<?xml version="1.0" encoding="windows-1252"?>
<RefData version="1.0" exporter="EA.25">
	<DataSet name="Automation Scripts" table="t_script" filter="ScriptName='#ScriptName#' and ScriptCategory='#ScriptCategory#'" stoplist=";ScriptID;">
		<DataRow>
			<Column name="ScriptID" value="1"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;&#xA;"/>
			<Column name="Script" value="JavaScriptLib"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="2"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FE229079-B2C7-4348-AD84-48384C15754E}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-EAConstants&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="/*&#xA; * Script Name: JavaScript-EAConstants.js&#xA; * Author: Sparx Systems&#xA; * Purpose:Provides constant values for the Enterprise Architect automation API. &#xA; * Date: 2010-05-31&#xA; */&#xA;&#xA;// =================================================================================================&#xA;// ObjectType&#xA;// See https://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation/objecttypeenum.html&#xA;// =================================================================================================&#xA;var otNone 							= 0;&#xA;var otProject 						= 1;&#xA;var otRepository 					= 2;&#xA;var otCollection 					= 3;&#xA;var otElement 						= 4;&#xA;var otPackage 						= 5;&#xA;var otModel 						= 6;&#xA;var otConnector 					= 7;&#xA;var otDiagram 						= 8;&#xA;var otRequirement 					= 9;&#xA;var otScenario 						= 10;&#xA;var otConstraint 					= 11;&#xA;var otTaggedValue 					= 12;&#xA;var otFile 							= 13;&#xA;var otEffort 						= 14;&#xA;var otMetric 						= 15;&#xA;var otIssue 						= 16;&#xA;var otRisk 							= 17;&#xA;var otTest 							= 18;&#xA;var otDiagramObject 				= 19;&#xA;var otDiagramLink 					= 20;&#xA;var otResource 						= 21;&#xA;var otConnectorEnd 					= 22;&#xA;var otAttribute 					= 23;&#xA;var otMethod 						= 24;&#xA;var otParameter 					= 25;&#xA;var otClient 						= 26;&#xA;var otAuthor 						= 27;&#xA;var otDatatype 						= 28;&#xA;var otStereotype 					= 29;&#xA;var otTask 							= 30;&#xA;var otTerm 							= 31;&#xA;var otProjectIssues 				= 32;&#xA;var otAttributeConstraint 			= 33;&#xA;var otAttributeTag 					= 34;&#xA;var otMethodConstraint 				= 35;&#xA;var otMethodTag 					= 36;&#xA;var otConnectorConstraint 			= 37;&#xA;var otConnectorTag 					= 38;&#xA;var otProjectResource 				= 39;&#xA;var otReference 					= 40;&#xA;var otRoleTag						= 41;&#xA;var otCustomProperty 				= 42;&#xA;var otPartition 					= 43;&#xA;var otTransition 					= 44;&#xA;var otEventProperty 				= 45;&#xA;var otEventProperties 				= 46;&#xA;var otPropertyType 					= 47;&#xA;var otProperties 					= 48;&#xA;var otProperty 						= 49;&#xA;var otSwimlaneDef 					= 50;&#xA;var otSwimlanes 					= 51;&#xA;var otSwimlane 						= 52;&#xA;var otModelWatcher 					= 53;&#xA;var otScenarioStep 					= 54;&#xA;var otScenarioExtension 			= 55;&#xA;var otParamTag						= 56;&#xA;var	otProjectRole					= 57;&#xA;var otDocumentGenerator				= 58;&#xA;var otMailInterface					= 59;&#xA;&#xA;// =================================================================================================&#xA;// MDGMenus&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/mdgmenusenum.htm&#xA;// =================================================================================================&#xA;var mgMerge 						= 1;&#xA;var mgBuildProject 					= 2;&#xA;var mgRun 							= 4;&#xA;&#xA;// =================================================================================================&#xA;// EnumXMIType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/xmitypeenum.htm&#xA;// =================================================================================================&#xA;var xmiEADefault 					= 0;&#xA;var xmiRoseDefault 					= 1;&#xA;var xmiEA10 						= 2;&#xA;var xmiEA11 						= 3;&#xA;var xmiEA12 						= 4;&#xA;var xmiRose10 						= 5;&#xA;var xmiRose11 						= 6;&#xA;var xmiRose12 						= 7;&#xA;var xmiMOF13 						= 8;&#xA;var xmiMOF14 						= 9;&#xA;var xmiEA20 						= 10;&#xA;var xmiEA21 						= 11;&#xA;var xmiEA211 						= 12;&#xA;var xmiEA212 						= 13;&#xA;var xmiEA22					    	= 14;&#xA;var xmiEA23					    	= 15;&#xA;var xmiEA24					    	= 16;&#xA;var xmiEA241				    	= 17;&#xA;var xmiEA242                        = 18;&#xA;var xmiEcore                        = 19;&#xA;var xmiBPMN20                       = 20;&#xA;var xmiXPDL22                       = 21;&#xA;&#xA;// =================================================================================================&#xA;// EnumMVErrorType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/project_2.htm&#xA;// =================================================================================================&#xA;var mvError 						= 0;&#xA;var mvWarning 						= 1;&#xA;var mvInformation 					= 2;&#xA;var mvErrorCritical 				= 3;&#xA;&#xA;// =================================================================================================&#xA;// CreateModelType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/createmodelitype_enum.htm&#xA;// =================================================================================================&#xA;var cmEAPFromBase 					= 0;&#xA;var cmEAPFromSQLRepository 			= 1;&#xA;&#xA;// =================================================================================================&#xA;// EAEditionTypes&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/eaeditiontypes_enum.htm&#xA;// =================================================================================================&#xA;var piLite 							= -1;&#xA;var piDesktop 						= 0;&#xA;var piProfessional 					= 1;&#xA;var piCorporate 					= 2;&#xA;var piBusiness 						= 3;&#xA;var piSystemEng 					= 4;&#xA;var piUltimate 						= 5;&#xA;&#xA;// =================================================================================================&#xA;// ScenarioStepType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/scenariosteptype.htm&#xA;// =================================================================================================&#xA;var stSystem 						= 0;&#xA;var stActor 						= 1;&#xA;&#xA;// =================================================================================================&#xA;// ExportPackageXMIFlag&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/exportpackagexmiflag.htm&#xA;// =================================================================================================&#xA;var epSaveToStub					= 1;&#xA;var epExcludeEAExtensions           = 2;&#xA;&#xA;// =================================================================================================&#xA;// CreateBaselineFlag&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/createbaselineflag.htm&#xA;// =================================================================================================&#xA;var cbSaveToStub					= 1;&#xA;&#xA;// =================================================================================================&#xA;// EnumScenarioDiagramType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/project_2.htm&#xA;// =================================================================================================&#xA;var sdActivity 						= 0;&#xA;var sdActivityWithActivityParameter	= 1;&#xA;var sdActivityWithAction			= 2;&#xA;var sdActivityhWithActionPin 		= 3;&#xA;var sdRuleFlow						= 4;&#xA;var sdState							= 5;&#xA;var sdSequence						= 6;&#xA;var sdRobustness					= 7;&#xA;&#xA;// =================================================================================================&#xA;// EnumScenarioTestType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/project_2.htm&#xA;// =================================================================================================&#xA;var stInternal						= 0;&#xA;var stExternal						= 1;&#xA;var stHorizontalTestSuite			= 2;&#xA;var stVerticalTestSuite				= 3;&#xA;&#xA;// =================================================================================================&#xA;// EnumCodeSection&#xA;// =================================================================================================&#xA;var cpWhole 						= 0;&#xA;var cpNotes 						= 1;&#xA;var cpText 							= 2;&#xA;&#xA;// =================================================================================================&#xA;// EnumRelationSetType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/enumrelationsettypeenum.htm&#xA;// =================================================================================================&#xA;var rsGeneralizeStart				= 0;&#xA;var rsGeneralizeEnd					= 1;&#xA;var rsRealizeStart					= 2;&#xA;var rsRealizeEnd					= 3;&#xA;var rsDependStart					= 4;&#xA;var rsDependEnd						= 5;&#xA;var rsParents						= 6;&#xA;&#xA;// =================================================================================================&#xA;// EnumCodeElementType&#xA;// =================================================================================================&#xA;var ctInvalid						= 0;&#xA;var ctNamespace						= 1;&#xA;var ctClass							= 2;&#xA;var ctAttribute						= 3;&#xA;var ctOperation						= 4;&#xA;var ctOperationParam				= 5;&#xA;&#xA;// =================================================================================================&#xA;// PropType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/proptype_enum.htm&#xA;// =================================================================================================&#xA;var ptString						= 0;&#xA;var ptInteger						= 1;&#xA;var ptFloatingPoint					= 2;&#xA;var ptBoolean						= 3;&#xA;var ptEnum							= 4;&#xA;var ptArray							= 5;&#xA;&#xA;// =================================================================================================&#xA;// SwimlaneOrientationType&#xA;// =================================================================================================&#xA;var soVertical						= 0;&#xA;var soHorizontal					= 1;&#xA;&#xA;// =================================================================================================&#xA;// ReloadType&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/reloadtype_enum.htm&#xA;// =================================================================================================&#xA;var rtNone							= 0;&#xA;var rtEntireModel					= 1;&#xA;var rtPackage						= 2;&#xA;var rtElement						= 3;&#xA;&#xA;// =================================================================================================&#xA;// ConstLayoutStyles&#xA;// See http://www.sparxsystems.com/uml_tool_guide/sdk_for_enterprise_architect/constlayoutstylesenum.htm&#xA;// =================================================================================================&#xA;var lsDiagramDefault				= 0x00000000;&#xA;var lsProgramDefault				= 0xFFFFFFFF;&#xA;var lsCycleRemoveGreedy				= 0x80000000;&#xA;var lsCycleRemoveDFS				= 0x40000000;&#xA;var lsLayeringLongestPathSink		= 0x30000000;&#xA;var lsLayeringLongestPathSource		= 0x20000000;&#xA;var lsLayeringOptimalLinkLength		= 0x10000000;&#xA;var lsInitializeNaive				= 0x08000000;&#xA;var lsInitializeDFSOut				= 0x04000000;&#xA;var lsInitializeDFSIn				= 0x0C000000;&#xA;var lsCrossReduceAggressive			= 0x02000000;&#xA;var lsLayoutDirectionUp				= 0x00010000;&#xA;var lsLayoutDirectionDown			= 0x00020000;&#xA;var lsLayoutDirectionLeft			= 0x00040000;&#xA;var lsLayoutDirectionRight			= 0x00080000;&#xA;&#xA;// =================================================================================================&#xA;// WorkFlowConstants&#xA;// =================================================================================================&#xA;var MaxWorkFlowUsers				= 50;&#xA;var MaxWorkFlowItems				= 100;&#xA;&#xA;// =================================================================================================&#xA;// PromptType&#xA;// =================================================================================================&#xA;var promptOK						= 1;&#xA;var promptYESNO						= 2;&#xA;var promptYESNOCANCEL				= 3;&#xA;var promptOKCANCEL					= 4;&#xA;&#xA;// =================================================================================================&#xA;// PromptResult&#xA;// =================================================================================================&#xA;var resultOK						= 1;&#xA;var resultCancel					= 2;&#xA;var resultYes						= 3;&#xA;var resultNo						= 4;&#xA;&#xA;// =================================================================================================&#xA;// WorkFlowResult&#xA;// =================================================================================================&#xA;var WorkFlowSucceeded				= 1;&#xA;var WorkFlowError					= 2;&#xA;var WorkFlowExists					= 3;&#xA;var WorkFlowNotFound				= 4;&#xA;var WorkFlowLimitReached			= 5;&#xA;var WorkFlowDenied					= 6;&#xA;var WorkFlowPermitted				= 7;&#xA;var WorkFlowIsMember				= 8;&#xA;var WorkFlowIsNotMember				= 9;&#xA;var WorkFlowBadParam				= 10;&#xA;&#xA;// =================================================================================================&#xA;// DocumentType&#xA;// =================================================================================================&#xA;var dtRTF							= 0;&#xA;var dtHTML							= 1;&#xA;var dtPDF							= 2;&#xA;var dtDOCX							= 3;&#xA;&#xA;// =================================================================================================&#xA;// DocumentBreak&#xA;// =================================================================================================&#xA;var breakPage						= 0;&#xA;var breakSection					= 1;&#xA;&#xA;// =================================================================================================&#xA;// TextAlignment&#xA;// =================================================================================================&#xA;var alignLeft 						= 0;&#xA;var alignCenter 					= 1;&#xA;var alignRight 						= 2;&#xA;var alignJustify 					= 3;&#xA;&#xA;// =================================================================================================&#xA;// MessageFlag&#xA;// =================================================================================================&#xA;var mfNone							= 0;&#xA;var mfComplete 						= 1;&#xA;var mfPurple 						= 2;&#xA;var mfOrange 						= 3;&#xA;var mfGreen 						= 4;&#xA;var mfYellow 						= 5;&#xA;var mfBlue 							= 6;&#xA;var mfRed 							= 7;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="3"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{22E7D5FB-E147-4598-B7FA-2EB8A5078586}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-CSV&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-DateTime&#xA;!INC JavaScriptLib.JavaScript-Logging&#xA;//!INC EAScriptLib.JavaScript-Logging&#xA;&#xA;/**&#xA; * @file JavaScript-CSV&#xA; * This script library contains helper functions to assist with CSV Import and Export of&#xA; * Enterprise Architect elements. &#xA; * &#xA; * Functions in this library are split into two parts: Import and Export. Functions that assist with &#xA; * CSV Import are prefixed with CSVI, whereas functions that assist with CSV Export are prefixed &#xA; * with CSVE.&#xA; *&#xA; * CSV Import can be performed by calling the function CSVIImportFile(). CSVIImportFile() requires&#xA; * that the function OnRowImported() be defined in the user's script to be used as a callback&#xA; * whenever row data is read from the CSV file. The user defined OnRowImported() can query for &#xA; * information about the current row through the functions CSVIContainsColumn(), &#xA; * CSVIGetColumnValueByName() and CSVIGetColumnValueByNumber().&#xA; *&#xA; * To perform a CSV export, the user must firstly call CSVEExportInitialize() which starts an export &#xA; * session. The call to CSVEExportInitialize() specifies the file name to export to, and the set of &#xA; * columns that will be exported. Once the session has been initialized with a call to &#xA; * CSVEExportInitialize(), the user may continually call CSVEExportRow() to export a row to file. &#xA; * Once all rows have been added, the export session is closed by calling CSVEExportFinalize(). &#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA; &#xA;var CSV_DELIMITER = &quot;,&quot;;&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;////																							////&#xA;////											CSV IMPORT										////&#xA;////																							////&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;var importColumnMap;				// : Map&#xA;var importColumnList;				// : Array&#xA;var importCurrentRow;				// : Array&#xA;var importIsImporting = false;&#xA;const FSREAD = 1;&#xA;&#xA;/**&#xA; * Imports the provided CSV file. The user function OnRowImported() is called to notify the user&#xA; * script that row data is available. The user script may then call CSVIContainsColumn() to see&#xA; * if the current row contains a particular named column, and CSVIGetColumnValueByName() or&#xA; * CSVIGetColumnValueByNumber() to obtain the field value of a particular column.&#xA; *&#xA; * @param[in] fileName (string) The path to the CSV file to import.&#xA; * &#xA; * @param[in] firstRowContainsHeadings (boolean) If set to true, the values of the first row will be parsed&#xA; * as column headings. CSVIContainsColumn() and CSVIGetColumnValueByName() will only work if &#xA; * firstRowContainsHeadings is set to true.&#xA; */&#xA;function CSVIImportFile( fileName /* : String */, firstRowContainsHeadings /* : boolean */ ) /* : void */&#xA;{&#xA;	if ( !importIsImporting )&#xA;	{&#xA;		importIsImporting = true;&#xA;		&#xA;		// Setup file objects&#xA;		var fsObject = new COMObject( &quot;Scripting.FileSystemObject&quot; );&#xA;		var file = fsObject.GetFile( fileName );&#xA;		var inputStream = file.OpenAsTextStream( FSREAD, 0 );&#xA;		&#xA;		// Set up row/column caching&#xA;		var lineCounter = 0;&#xA;		importCurrentRow = null;&#xA;		importColumnMap = new Map();&#xA;		importColumnList = [];&#xA;		&#xA;		// Read the file a row at a time&#xA;		while ( !inputStream.AtEndOfStream )&#xA;		{&#xA;			// Get the curnet line and split it into segments based on the CSV_DELIMITER&#xA;			var currentLine = inputStream.ReadLine();&#xA;			var currentLineTokens = currentLine.split( CSV_DELIMITER );&#xA;			&#xA;			if ( currentLineTokens.length &gt; 0 )&#xA;			{&#xA;				for ( var i = 0 ; i &lt; currentLineTokens.length ; i++ )&#xA;				{&#xA;					// Strip leading/trailing quotation marks&#xA;					var quotationLeadRegEx = new RegExp( &quot;^\&quot;+?|^'+?&quot;, &quot;gm&quot; );&#xA;					var quotationTrailRegEx = new RegExp( &quot;\&quot;+?$|'+?$&quot;, &quot;gm&quot; );&#xA;					&#xA;					currentLineTokens[i] = currentLineTokens[i].replace( quotationLeadRegEx, &quot;&quot; );&#xA;					currentLineTokens[i] = currentLineTokens[i].replace( quotationTrailRegEx, &quot;&quot; );&#xA;				}&#xA;				&#xA;				if ( lineCounter == 0 &amp;&amp; firstRowContainsHeadings )&#xA;				{&#xA;					// Cache column heading positions&#xA;					for ( var i = 0 ; i &lt; currentLineTokens.length ; i++ )&#xA;					{&#xA;						importColumnMap.set( currentLineTokens[i], i );&#xA;						importColumnList.push( currentLineTokens[i] );&#xA;					}&#xA;				}&#xA;				else&#xA;				{&#xA;					// Hold a reference to the current row data&#xA;					importCurrentRow = currentLineTokens;&#xA;					&#xA;					// Invoke the user script callback&#xA;					OnRowImported();&#xA;				}&#xA;				&#xA;				++lineCounter;&#xA;			}&#xA;		}&#xA;		&#xA;		// Clean up&#xA;		importColumnMap = null;&#xA;		importColumnList = null;&#xA;		inputStream.Close();&#xA;		importIsImporting = false;&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;Reentrant call made to CSVIImportFile(). CSVIImportFile() should not be called from within OnRowImported()&quot; );&#xA;	}&#xA;}&#xA;&#xA;/**&#xA; * Advises whether the current import row contains a field value for the specified column name.&#xA; *&#xA; * NOTE: The function only works if CSVImportFile() was called with the firstRowContainsHeadings&#xA; * paremeter set to true.&#xA; *&#xA; * @param[in] (String) The name of the column to check for&#xA; *&#xA; * @return A boolean indicating whether the current import row contains a field value for the &#xA; * specified column name.&#xA; */&#xA;function CSVIContainsColumn( columnName /* : String */ ) /* : boolean */&#xA;{&#xA;	var result = false;&#xA;	&#xA;	if ( importIsImporting )&#xA;	{&#xA;		// Get the column number of the specified named column&#xA;		var columnNumber = __CSVIGetColumnNumber( columnName );&#xA;	&#xA;		// If the column is in range then it exists!&#xA;		if ( columnNumber &gt;= 0 &amp;&amp; importCurrentRow != null &amp;&amp; columnNumber &lt; importCurrentRow.length )&#xA;			result = true;&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;No import currently running. CSVIContainsColumn() should only be called from within OnImportRow()&quot; );&#xA;	}&#xA;	&#xA;	return result;&#xA;}&#xA;&#xA;/**&#xA; * Returns the value of the field in the current import row with the specified column name&#xA; *&#xA; * NOTE: The function only works if CSVImportFile() was called with the firstRowContainsHeadings&#xA; * paremeter set to true.&#xA; *&#xA; * @param[in] columnName (String) The name of the column whose value will be retrieved.&#xA; *&#xA; * @return The current import row's field value for the specified column&#xA; */&#xA;function CSVIGetColumnValueByName( columnName /* : String */ ) /* : variant */&#xA;{	&#xA;	var result;&#xA;	&#xA;	if ( importIsImporting )&#xA;	{&#xA;		var columnNumber = __CSVIGetColumnNumber( columnName );&#xA;		result = CSVIGetColumnValueByNumber( columnNumber );&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;No import currently running. CSVIGetColumnValueByName() should only be called from within OnImportRow()&quot; );&#xA;	}&#xA;	&#xA;	return result;&#xA;}&#xA;&#xA;/**&#xA; * Returns the value of the field in the current import row with the specified column number&#xA; *&#xA; * @param[in] columnNumber (number) The index of the column whose value will be retrieved.&#xA; *&#xA; * @return The current import row's field value for the specified column&#xA; */&#xA;function CSVIGetColumnValueByNumber( columnNumber /* : number */ ) /* : variant */&#xA;{&#xA;	var result;&#xA;	&#xA;	if ( importIsImporting )&#xA;	{&#xA;		if ( columnNumber &gt;= 0 &amp;&amp; importCurrentRow != null &amp;&amp; columnNumber &lt; importCurrentRow.length )&#xA;			result = importCurrentRow[columnNumber];&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;No import currently running. CSVIGetColumnValueByNumber() should only be called from within OnImportRow()&quot; );&#xA;	}&#xA;		&#xA;	return result;&#xA;}&#xA;&#xA;/**&#xA; * Returns all column names that are not considered standard as an array of Strings.&#xA; */&#xA;function CSVIGetNonStandardElementColumns() /* : Array */&#xA;{&#xA;	var result = [];	&#xA;	var standardColumns = new String(&quot;;Abstract;Alias;Author;ClassifierName;Complexity;Created&quot;);&#xA;	standardColumns += &quot;;Difficulty;GenFile;GenType;Header1;Header2;IsActive;IsLeaf&quot;;&#xA;	standardColumns += &quot;;IsNew;IsSpec;Locked;Multiplicity;Name;Notes;Persistence;Phase;Priority&quot;;&#xA;	standardColumns += &quot;;RunState;Status;Stereotype;Subtype;Tablespace;Tag;TreePos;Type;Version&quot;;&#xA;	standardColumns += &quot;;Visibility;&quot;;&#xA;	&#xA;	if ( importIsImporting )&#xA;	{&#xA;		for ( var i = 0 ; i &lt; importCurrentRow.length ; i++ )&#xA;		{&#xA;			if ( i &lt; importColumnList.length )&#xA;			{&#xA;				var columnName = importColumnList[i];&#xA;				if ( standardColumns.indexOf( &quot;;&quot; + columnName + &quot;;&quot; ) == -1 )&#xA;				{&#xA;					result.push( columnName );&#xA;				}&#xA;			}&#xA;			&#xA;		}&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;No import currently running. CSVIGetNonStandardElementColumns() should only be called from within OnImportRow()&quot; );&#xA;	}&#xA;	&#xA;	return result;&#xA;}&#xA;&#xA;/**&#xA; * Sets the properties on the specified Element if there is a corresponding value for them in the &#xA; * current row.&#xA; *&#xA; * Element properties that are not set by this function include:&#xA; * 	- Read only properties&#xA; * 	- Collection properties&#xA; * 	- Properties that contain relational information (eg IDs/GUIDs of other elements, connectors &#xA; *	or packages.&#xA; *	- Modified Date property (this is property is automatically overwritten by the automation &#xA; *	interface when the element is saved)&#xA; *	- Properties that are themselves a comma separated list&#xA; *&#xA; * @param[in] elementForRow (EA.Element) The element whose properties will be set with the current row's &#xA; * values&#xA; */&#xA;function CSVISetStandardElementFieldValues( elementForRow /* : EA.Element */ ) /* : void */&#xA;{&#xA;	if ( importIsImporting )&#xA;	{&#xA;		var theElement as EA.Element;&#xA;		theElement = elementForRow;&#xA;		&#xA;		if ( theElement != null )&#xA;		{&#xA;			if ( CSVIContainsColumn(&quot;Abstract&quot;) )&#xA;				theElement.Abstract = CSVIGetColumnValueByName(&quot;Abstract&quot;);&#xA;			&#xA;			// ActionFlags - Not included (Comma Separated)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Alias&quot;) )&#xA;				theElement.Alias = CSVIGetColumnValueByName(&quot;Alias&quot;);&#xA;			&#xA;			// Attributes - Not included (Collection)&#xA;			// AttributesEx - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Author&quot;) )&#xA;				theElement.Author = CSVIGetColumnValueByName(&quot;Author&quot;);&#xA;			&#xA;			// BaseClasses - Not included (Collection)&#xA;			// ClassifierID - Not included (Relational)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;ClassifierName&quot;) )&#xA;				theElement.ClassifierName = CSVIGetColumnValueByName(&quot;ClassifierName&quot;);&#xA;			&#xA;			// ClassifierType - Not included (Read Only)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Complexity&quot;) )&#xA;				theElement.Complexity = CSVIGetColumnValueByName(&quot;Complexity&quot;);&#xA;			&#xA;			// CompositeDiagram - Not included (Relational)&#xA;			// Connectors - Not included (Collection)&#xA;			// Constraints - Not included (Collection)&#xA;			// ConstraintsEx - Not included (Collection)&#xA;					&#xA;			if ( CSVIContainsColumn(&quot;Created&quot;) )&#xA;			{&#xA;				var dateString = CSVIGetColumnValueByName(&quot;Created&quot;);&#xA;				var asEADate = DTParseEADate( dateString );&#xA;				theElement.Created = asEADate;&#xA;			}&#xA;			&#xA;			// CustomProperties - Not included (Collection)&#xA;			// Diagrams - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Difficulty&quot;) )&#xA;				theElement.Difficulty = CSVIGetColumnValueByName(&quot;Difficulty&quot;);&#xA;			&#xA;			// Efforts - Not included (Collection)&#xA;			// ElementGUID - Not included (Read Only)&#xA;			// ElementID - Not included (Read Only)&#xA;			// Elements - Not included (Collection)&#xA;			// EmbeddedElements - Not included (Read Only)&#xA;			// EventFlags - Not included (Comma Separated)	&#xA;			// ExtensionPoints - Not included (Comma Separated)&#xA;			// Files - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;GenFile&quot;) )&#xA;				theElement.Genfile = CSVIGetColumnValueByName(&quot;GenFile&quot;);&#xA;			&#xA;			// Genlinks - Not included (Relational)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;GenType&quot;) )&#xA;				theElement.Gentype = CSVIGetColumnValueByName(&quot;GenType&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Header1&quot;) )&#xA;				theElement.Header1 = CSVIGetColumnValueByName(&quot;Header1&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Header2&quot;) )&#xA;				theElement.Header1 = CSVIGetColumnValueByName(&quot;Header2&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;IsActive&quot;) )&#xA;				theElement.IsActive = CSVIGetColumnValueByName(&quot;IsActive&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;IsLeaf&quot;) )&#xA;				theElement.IsLeaf = CSVIGetColumnValueByName(&quot;IsLeaf&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;IsNew&quot;) )&#xA;				theElement.IsNew = CSVIGetColumnValueByName(&quot;IsNew&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;IsSpec&quot;) )&#xA;				theElement.IsSpec = CSVIGetColumnValueByName(&quot;IsSpec&quot;);&#xA;			&#xA;			// Issues - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Locked&quot;) )&#xA;				theElement.Locked = CSVIGetColumnValueByName(&quot;Locked&quot;);&#xA;			&#xA;			// MetaType - Not included (Read Only)&#xA;			// Methods - Not included (Collection)&#xA;			// Metrics - Not included (Collection)&#xA;			// MiscData - Not included (Read Only)&#xA;			// Modified - Not included (Overwritten)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Multiplicity&quot;) )&#xA;				theElement.Multiplicity = CSVIGetColumnValueByName(&quot;Multiplicity&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Name&quot;) )&#xA;			{&#xA;				theElement.Name = CSVIGetColumnValueByName(&quot;Name&quot;);&#xA;			}&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Notes&quot;) )&#xA;				theElement.Notes = CSVIGetColumnValueByName(&quot;Notes&quot;);&#xA;			&#xA;			// ObjectType - Not included (Read Only)&#xA;			// PackageID - Not included (Relational)&#xA;			// ParentID - Not included (Relational)&#xA;			// Partitions - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Persistence&quot;) )&#xA;				theElement.Persistence = CSVIGetColumnValueByName(&quot;Persistence&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Phase&quot;) )&#xA;				theElement.Persistence = CSVIGetColumnValueByName(&quot;Phase&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Priority&quot;) )&#xA;				theElement.Persistence = CSVIGetColumnValueByName(&quot;Priority&quot;);&#xA;			&#xA;			// Properties - Not included (Collection)&#xA;			// PropertyType - Not included (Relational)&#xA;			// Realizes - Not included (Collection)&#xA;			// Requirements - Not included (Collection)&#xA;			// RequirementsEx - Not included (Collection)&#xA;			// Resources - Not included (Collection)&#xA;			// Risks - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;RunState&quot;) )&#xA;				theElement.Persistence = CSVIGetColumnValueByName(&quot;RunState&quot;);&#xA;			&#xA;			// Scenarios - Not included (Collection)&#xA;			// State Transitions - Not included (Collection)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Status&quot;) )&#xA;				theElement.Status = CSVIGetColumnValueByName(&quot;Status&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Stereotype&quot;) )&#xA;				theElement.Stereotype = CSVIGetColumnValueByName(&quot;Stereotype&quot;);&#xA;			&#xA;			// StereotypeEx - Not included (Comma Separated)&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Subtype&quot;) )&#xA;				theElement.Subtype = CSVIGetColumnValueByName(&quot;Subtype&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Tablespace&quot;) )&#xA;				theElement.Tablespace = CSVIGetColumnValueByName(&quot;Tablespace&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Tag&quot;) )&#xA;				theElement.Tag = CSVIGetColumnValueByName(&quot;Tag&quot;);&#xA;			&#xA;			// TaggedValues - Not included (Collection)&#xA;			// TaggedValuesEx - Not included (Collection)&#xA;			// Tests - Not included (Collection)&#xA;			&#xA;			if (CSVIContainsColumn(&quot;TreePos&quot;) )&#xA;				theElement.TreePos = CSVIGetColumnValueByName(&quot;TreePos&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Type&quot;) )&#xA;				theElement.Type = CSVIGetColumnValueByName(&quot;Type&quot;);&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Version&quot;) )&#xA;			{&#xA;				theElement.Version = CSVIGetColumnValueByName(&quot;Version&quot;);&#xA;			}&#xA;			&#xA;			if ( CSVIContainsColumn(&quot;Visibility&quot;) )&#xA;			{&#xA;				theElement.Visibility = CSVIGetColumnValueByName(&quot;Visibility&quot;);&#xA;			}&#xA;		}&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;No import currently running. CSVSetStandardElementFieldValues() should only be called from within OnImportRow()&quot; );		&#xA;	}&#xA;}&#xA;&#xA;/**&#xA; * @private&#xA; * Returns the index of the column with the specified name&#xA; *&#xA; * @param[in] columnName (String) The name of the column whose index will be retrieved&#xA; *&#xA; * @return The index of the column with the specified name&#xA; */&#xA;function __CSVIGetColumnNumber( columnName /* : String */ ) /* : number */&#xA;{&#xA;	var result = -1;&#xA;	if ( importColumnMap != null &amp;&amp; importColumnMap.has(columnName) )&#xA;		result = importColumnMap.get(columnName);&#xA;	&#xA;	return result;&#xA;}&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;////																							////&#xA;////											CSV EXPORT										////&#xA;////																							////&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;////////////////////////////////////////////////////////////////////////////////////////////////////&#xA;var exportFile;						// : FileSystemObject&#xA;var exportColumns;					// : Array&#xA;var exportIsExporting = false;&#xA;&#xA;/**&#xA; * Initialises a CSV Export session. This must be called before calls to CSVEExportRow() are made. &#xA; * Once all rows have been exported, a corresponding call to CSVEExportFinalize() should be made.&#xA; *&#xA; * @param[in] fileName (String) the path to saving the resulting CSV file as.&#xA; * @param[in] columns (Array) an array of column names that will be exported&#xA; * @param[in] exportColumnHeadings (boolean) Specifies whether the first row should contain the column &#xA; * headings&#xA; */&#xA;function CSVEExportInitialize( fileName /* : String */, columns /* : Array */, &#xA;	exportColumnHeadings /* : boolean */ ) /* : void */&#xA;{&#xA;	if ( !exportIsExporting )&#xA;	{&#xA;		// Switch into exporting mode&#xA;		exportIsExporting = true;&#xA;&#xA;		// Setup file object and column array&#xA;		var fsObject = new COMObject( &quot;Scripting.FileSystemObject&quot; );&#xA;		exportFile = fsObject.CreateTextFile( fileName, true );&#xA;&#xA;		exportColumns = columns;&#xA;&#xA;		// Check if file successfully opened for writing&#xA;		if (exportFile === undefined)&#xA;		{&#xA;			LOGError(&quot;CSVEExportInitialize: Unable to open file - &quot; + fileName);&#xA;			return;&#xA;		}&#xA;		&#xA;		if ( exportColumnHeadings )&#xA;		{&#xA;			// Export column headings if the option was enabled&#xA;			var headingString = &quot;&quot;;&#xA;			&#xA;			for ( var i = 0 ; i &lt; exportColumns.length ; i++ )&#xA;			{&#xA;				if ( i == 0 )&#xA;					headingString += exportColumns[i];&#xA;				else&#xA;					headingString += CSV_DELIMITER + exportColumns[i];&#xA;			}&#xA;		&#xA;			&#xA;			exportFile.WriteLine( headingString );&#xA;		}&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;CSV Export is already in progress&quot; );&#xA;	}&#xA;}&#xA;&#xA;/**&#xA; * Finalizes a CSV Export session, closing file system resources required for the export. After this&#xA; * function has been executed, further calls to CSVEExportRow() will fail until another CSV Export&#xA; * session is initialized via CSVEExportInitialize()&#xA; */&#xA;function CSVEExportFinalize() /* : void */&#xA;{&#xA;	if ( exportIsExporting )&#xA;	{&#xA;		// Clean up file object and column array&#xA;		exportFile.Close();&#xA;		exportFile = null;&#xA;		exportColumns = null;&#xA;		&#xA;		// Switch out of exporting mode&#xA;		exportIsExporting = false;&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;CSV Export is not currently in progress&quot; );&#xA;	}&#xA;}&#xA;&#xA;/**&#xA; * Exports a row to the CSV file. The valueMap parameter is used to lookup field values for the&#xA; * columns specified when CSVEExportInitialize() was called. Values in valueMap that do not &#xA; * correspond to a valid column will not be exported.&#xA; *&#xA; * @param[in] valueMap (Map) A Map of field values where key=Column Name, value=Field Value&#xA; */&#xA;&#xA;function CSVEExportRow( valueMap /* : Map */ ) /* : void */&#xA;{&#xA;	if ( exportIsExporting )&#xA;	{&#xA;		if ( exportColumns.length &gt; 0 )&#xA;		{&#xA;			// Build a string for the row&#xA;			var rowString = &quot;&quot;;&#xA;			&#xA;			// Iterate over all columns specified in CSVEExportInitialize()&#xA;			for ( var i = 0 ; i &lt; exportColumns.length ; i++ )&#xA;			{&#xA;				// Get the column name&#xA;				var currentColumn = exportColumns[i];&#xA;				&#xA;				// Get the corresponding field value from valueMap&#xA;				var fieldValue = valueMap.get(currentColumn);&#xA;				&#xA;				// If the fieldValue is null/undefined, output an empty string&#xA;				if ( fieldValue == null )&#xA;					fieldValue = &quot;&quot;;&#xA;				&#xA;				if ( i == 0 )&#xA;					rowString += __CSVEToSafeCSVString(fieldValue);&#xA;				else&#xA;					rowString += CSV_DELIMITER + __CSVEToSafeCSVString(fieldValue);&#xA;			}&#xA;			&#xA;			// Output to file&#xA;			exportFile.WriteLine( rowString );&#xA;		}&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;CSV Export is not currently in progress. Call CSVEExportInitialize() to start a CSV Export&quot; );&#xA;	}&#xA;}&#xA;&#xA;/**&#xA; * Creates and returns an empty Value Map.&#xA; */&#xA;function CSVECreateEmptyValueMap() /* : Map */&#xA;{&#xA;	var valueMap = new Map();&#xA;	return valueMap;&#xA;}&#xA;&#xA;/**&#xA; * Returns an array of column names considered standard for EA elements. This array can be used&#xA; * as the columns parameter when calling CSVEExportInitialize()&#xA; *&#xA; * @param[in] includeGUID (boolean) Advises whether the elementGUID field should be included&#xA; *&#xA; * @return an array of column names &#xA; */&#xA;function CSVEGetStandardElementColumns( includeGUID /* : boolean */ ) /* : Array */&#xA;{&#xA;	var columnArray = [];&#xA;	&#xA;	columnArray.push( &quot;Abstract&quot; );&#xA;	// ActionFlags - Not included (Comma Separated)	&#xA;	columnArray.push( &quot;Alias&quot; );&#xA;	// Attributes - Not included (Collection)&#xA;	// AttributesEx - Not included (Collection)&#xA;	columnArray.push( &quot;Author&quot; );&#xA;	// BaseClasses - Not included (Collection)&#xA;	// ClassifierID - Not included (Relational)&#xA;	columnArray.push( &quot;ClassifierName&quot; );&#xA;	// ClassifierType - Not included (Read Only)&#xA;	columnArray.push(  &quot;Complexity&quot; );&#xA;	// CompositeDiagram - Not included (Relational)&#xA;	// Connectors - Not included (Collection)&#xA;	// Constraints - Not included (Collection)&#xA;	// ConstraintsEx - Not included (Collection)&#xA;	columnArray.push( &quot;Created&quot; );&#xA;	// CustomProperties - Not included (Collection)&#xA;	// Diagrams - Not included (Collection)&#xA;	columnArray.push( &quot;Difficulty&quot; );&#xA;	// Efforts - Not included (Collection)&#xA;	&#xA;	if ( includeGUID )&#xA;		columnArray.push( &quot;ElementGUID&quot; );&#xA;	&#xA;	// Elements - Not included (Collection)&#xA;	// EmbeddedElements - Not included (Collection)&#xA;	// EventFlags - Not included (Comma Separated)&#xA;	// ExtensionPoints - Not included (Comma Separated)&#xA;	// Files - Not included (Collection)&#xA;	columnArray.push( &quot;GenFile&quot; );&#xA;	// Genlinks - Not included (Relational)&#xA;	columnArray.push( &quot;GenType&quot; );&#xA;	columnArray.push( &quot;Header1&quot; );&#xA;	columnArray.push( &quot;Header2&quot; );&#xA;	columnArray.push( &quot;IsActive&quot; );&#xA;	columnArray.push( &quot;IsLeaf&quot; );&#xA;	columnArray.push( &quot;IsNew&quot; );&#xA;	columnArray.push( &quot;IsSpec&quot; );&#xA;	// Issues - Not included (Collection)&#xA;	columnArray.push( &quot;Locked&quot; );&#xA;	// MetaType - Not included (Read Only)&#xA;	// Methods - Not included (Collection)&#xA;	// Metrics - Not included (Collection)&#xA;	// MiscData - Not included (Read Only)&#xA;	// Modified - Not included (Overwritten)&#xA;	columnArray.push( &quot;Multiplicity&quot; );&#xA;	columnArray.push( &quot;Name&quot; );&#xA;	columnArray.push( &quot;Notes&quot; );&#xA;	// ObjectType - Not included (Read Only)&#xA;	// PackageID - Not included (Relational)&#xA;	// ParentID - Not included (Relational)&#xA;	// Partitions - Not included (Collection)&#xA;	columnArray.push( &quot;Persistence&quot; );&#xA;	columnArray.push( &quot;Phase&quot; );&#xA;	columnArray.push( &quot;Priority&quot; );&#xA;	// Properties - Not included (Collection)&#xA;	// PropertyType - Not included (Relational)&#xA;	// Realizes - Not included (Collection)&#xA;	// Requirements - Not included (Collection)&#xA;	// RequirementsEx - Not included (Collection)&#xA;	// Resources - Not included (Collection)&#xA;	// Risks - Not included (Collection)&#xA;	columnArray.push( &quot;RunState&quot; );&#xA;	// Scenarios - Not included (Collection)&#xA;	// State Transitions - Not included (Collection)&#xA;	columnArray.push( &quot;Status&quot; );&#xA;	columnArray.push( &quot;Stereotype&quot; );&#xA;	// StereotypeEx - Not included (Comma Separated)	&#xA;	columnArray.push( &quot;Subtype&quot; );&#xA;	columnArray.push( &quot;Tablespace&quot; );&#xA;	columnArray.push( &quot;Tag&quot; );&#xA;	// TaggedValues - Not included (Collection)&#xA;	// TaggedValuesEx - Not included (Collection)&#xA;	// Tests - Not included (Collection)&#xA;	columnArray.push( &quot;TreePos&quot; );&#xA;	columnArray.push( &quot;Type&quot; );&#xA;	columnArray.push( &quot;Version&quot; );&#xA;	columnArray.push( &quot;Visibility&quot; );&#xA;	&#xA;	return columnArray;&#xA;}&#xA;&#xA;/**&#xA; * Creates a Value Map of standard property names/values for the specified element. This Value Map &#xA; * can be used as the valueMap parameter when calling the ExportRow() function.&#xA; *&#xA; * @param[in] element (EA.Element) The element to compile the Value Map for&#xA; *&#xA; * @return A Value Map populated with the provided element's values.&#xA; */&#xA;function CSVEGetStandardElementFieldValues( element /* : EA.Element */ ) /* : Map */&#xA;{&#xA;	var theElement as EA.Element;&#xA;	theElement = element;&#xA;	&#xA;	var valueMap = CSVECreateEmptyValueMap();&#xA;	&#xA;	valueMap.set( &quot;Abstract&quot;, theElement.Abstract );&#xA;	// ActionFlags - Not included (Comma Separated)&#xA;	valueMap.set( &quot;Alias&quot;, theElement.Alias );&#xA;	// Attributes - Not included (Collection)&#xA;	// AttributesEx - Not included (Collection)&#xA;	valueMap.set( &quot;Author&quot;, theElement.Author );&#xA;	// BaseClasses - Not included (Collection)&#xA;	// ClassifierID - Not included (Relational)&#xA;	valueMap.set( &quot;ClassifierName&quot;, theElement.ClassifierName );&#xA;	// ClassifierType - Not included (Read Only)&#xA;	valueMap.set( &quot;Complexity&quot;, theElement.Complexity);&#xA;	// CompositeDiagram - Not included (Relational)&#xA;	// Connectors - Not included (Collection)&#xA;	// Constraints - Not included (Collection)&#xA;	// ConstraintsEx - Not included (Collection)&#xA;	valueMap.set( &quot;Created&quot;, theElement.Created );&#xA;	// CustomProperties - Not included (Collection)&#xA;	// Diagrams - Not included (Collection)&#xA;	valueMap.set( &quot;Difficulty&quot;, theElement.Difficulty );&#xA;	// Efforts - Not included (Collection)&#xA;	valueMap.set( &quot;ElementGUID&quot;, theElement.ElementGUID );&#xA;	// Elements - Not included (Collection)&#xA;	// EmbeddedElements - Not included (Read Only)&#xA;	// Event Flags - Not included (Comma Separated)	&#xA;	// ExtensionPoints - Not included (Comma Separated)&#xA;	// Files - Not included (Collection)&#xA;	valueMap.set( &quot;GenFile&quot;, theElement.Genfile );&#xA;	// Genlinks - Not included (Relational)&#xA;	valueMap.set( &quot;GenType&quot;, theElement.Gentype );&#xA;	valueMap.set( &quot;Header1&quot;, theElement.Header1 );&#xA;	valueMap.set( &quot;Header2&quot;, theElement.Header2 );&#xA;	valueMap.set( &quot;IsActive&quot;, theElement.IsActive );&#xA;	valueMap.set( &quot;IsLeaf&quot;, theElement.IsLeaf );&#xA;	valueMap.set( &quot;IsNew&quot;, theElement.IsNew );&#xA;	valueMap.set( &quot;IsSpec&quot;, theElement.IsSpec );&#xA;	// Issues - Not included (Collection)&#xA;	valueMap.set( &quot;Locked&quot;, theElement.Locked );&#xA;	// MetaType - Not included (Read Only)&#xA;	// Methods - Not included (Collection)&#xA;	// Metrics - Not included (Collection)&#xA;	// MiscData - Not included (Read Only)&#xA;	// Modified - Not included (Overwritten)&#xA;	valueMap.set( &quot;Multiplicity&quot;, theElement.Multiplicity );&#xA;	valueMap.set( &quot;Name&quot;, theElement.Name );&#xA;	valueMap.set( &quot;Notes&quot;, theElement.Notes );&#xA;	// ObjectType - Not included (Read Only)&#xA;	// PackageID - Not included (Relational)&#xA;	// ParentID - Not included (Relational)&#xA;	// Partitions - Not included (Collection)&#xA;	valueMap.set( &quot;Persistence&quot;, theElement.Persistence );&#xA;	valueMap.set( &quot;Phase&quot;, theElement.Phase );&#xA;	valueMap.set( &quot;Priority&quot;, theElement.Priority );&#xA;	// Properties - Not included (Collection)&#xA;	// PropertyType - Not included (Relational)&#xA;	// Realizes - Not included (Collection)&#xA;	// Requirements - Not included (Collection)&#xA;	// RequirementsEx - Not included (Collection)&#xA;	// Resources - Not included (Collection)&#xA;	// Risks - Not included (Collection)&#xA;	valueMap.set( &quot;RunState&quot;, theElement.RunState );&#xA;	// Scenarios - Not included (Collection)&#xA;	// State Transitions - Not included (Collection)&#xA;	valueMap.set( &quot;Status&quot;, theElement.Status );&#xA;	valueMap.set( &quot;Stereotype&quot;, theElement.Stereotype );&#xA;	// StereotypeEx - Not included (Comma Separated)	&#xA;	valueMap.set( &quot;Subtype&quot;, theElement.Subtype );&#xA;	valueMap.set( &quot;Tablespace&quot;, theElement.Tablespace );&#xA;	valueMap.set( &quot;Tag&quot;, theElement.Tag );&#xA;	// TaggedValues - Not included (Collection)&#xA;	// TaggedValuesEx - Not included (Collection)&#xA;	// Tests - Not included (Collection)&#xA;	valueMap.set( &quot;TreePos&quot;, theElement.TreePos );&#xA;	valueMap.set( &quot;Type&quot;, theElement.Type );&#xA;	valueMap.set( &quot;Version&quot;, theElement.Version );&#xA;	valueMap.set( &quot;Visibility&quot;, theElement.Visibility );&#xA;	&#xA;	return valueMap;&#xA;}&#xA;&#xA;/**&#xA; * @private&#xA; * Returns a copy of the string that is safe for inclusion in a CSV file.&#xA; *&#xA; * @param[in] originalString (String) The string to convert&#xA; *&#xA; * @return a copy of the string modified for inclusion in a CSV file&#xA; */&#xA;function __CSVEToSafeCSVString( originalString /* : String */ ) /* : String */&#xA;{&#xA;	var returnString = new String(originalString);&#xA;	&#xA;	// Strip out delimiters&#xA;	var delimiterRegExp = new RegExp( CSV_DELIMITER, &quot;gm&quot; );&#xA;	returnString = returnString.replace( delimiterRegExp, &quot;&quot; );&#xA;	&#xA;	// Strip out newline chars&#xA;	var newlineRegExp = new RegExp( &quot;\r\n?&quot;, &quot;gm&quot; );&#xA;	returnString = returnString.replace( newlineRegExp, &quot; &quot; );&#xA;		&#xA;	return returnString;&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="4"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{255CF97F-B6AE-46bd-B9C6-5BA481559DFA}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Database&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-XML&#xA;//!INC EAScriptLib.JavaScript-XML&#xA;&#xA;/**&#xA; * @file JavaScript-Database&#xA; * This script library contains helper functions to assist with querying the underlying database&#xA; * fields of an EA project.&#xA; *&#xA; * Some functions will behave differently according to the value of the script variable DBTYPE.&#xA; * You should ensure that this value reflects the corresponding database repository type that you&#xA; * are currently using.&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;var DBTYPE_EAP = 0;&#xA;var DBTYPE_MYSQL = 1;&#xA;var DBTYPE = DBTYPE_EAP;&#xA;&#xA;/**&#xA; * Queries the repository database for the first field value whose corresponding row matches the&#xA; * specified WHERE clause.&#xA; *&#xA; * @param[in] columnName (string) The column name whose field value will be queried for&#xA; * @param[in] table (string) The table that the column resides in&#xA; * @param[in] whereClause (string) The SQL where clause that the query will use to select the&#xA; * appropriate row&#xA; *&#xA; * @return A String representing the requested field value&#xA; */&#xA;function DBGetFieldValueString( columnName /* : String */, table /* : String */, whereClause /* : String */ ) /* : String */&#xA;{&#xA;	var stringValue = &quot;&quot;;&#xA;	&#xA;	// Construct and execute the query&#xA;	var sql = &quot;SELECT &quot; + columnName + &quot; FROM &quot; + table + &quot; WHERE &quot; + whereClause;&#xA;	var queryResult = Repository.SQLQuery( sql );&#xA;	&#xA;	if ( queryResult.length &gt; 0 )&#xA;	{&#xA;		var resultDOM = XMLParseXML( queryResult );&#xA;		if ( resultDOM )&#xA;			stringValue = XMLGetNodeText( resultDOM, &quot;//EADATA//Dataset_0//Data//Row//&quot; + columnName );&#xA;	}&#xA;	&#xA;	return stringValue;&#xA;}&#xA;&#xA;/**&#xA; * Queries the repository database for the first field value whose corresponding row matches the&#xA; * specified WHERE clause.&#xA; *&#xA; * @param[in] columnName (string) The column name whose field value will be queried for&#xA; * @param[in] table (string) The table that the column resides in&#xA; * @param[in] whereClause (string) The SQL where clause that the query will use to select the&#xA; * appropriate row&#xA; *&#xA; * @return A Number representing the requested field value&#xA; */&#xA;function DBGetFieldValueNumber( columnName /* : String */, table /* : String */, whereClause /* : String */ ) /* : Number */&#xA;{&#xA;	// Get the field value as a String&#xA;	var numberValue = 0;&#xA;	var valueAsString = DBGetFieldValueString( columnName, table, whereClause );&#xA;	&#xA;	// Conver to number&#xA;	if ( valueAsString.length &gt; 0 )&#xA;		numberValue = new Number( valueAsString );&#xA;	&#xA;	return numberValue;&#xA;}&#xA;&#xA;/**&#xA; * Queries the repository database for all field values whose corresponding row match the specified&#xA; * WHERE clause.&#xA; *&#xA; * @param[in] columnName (string) The column name whose values will be queried for&#xA; * @param[in] table (string) The table that the column resides in&#xA; * @param[in] whereClause (string) The SQL where clause that the query will use to select the&#xA; * appropriate rows&#xA; *&#xA; * @return An array of Strings representing the requested field values&#xA; */&#xA;function DBGetFieldValueArrayString( columnName /* : String */, table /* : String */, &#xA;	whereClause /* : String */ ) /* : Array */&#xA;{&#xA;	var resultArray = new Array();&#xA;	&#xA;	// Construct and execute the query&#xA;	var sql = &quot;SELECT &quot; + columnName + &quot; FROM &quot; + table;&#xA;	if ( typeof(whereClause) != &quot;undefined&quot; &amp;&amp; whereClause.length &gt; 0 )&#xA;		sql += &quot; WHERE &quot; + whereClause;&#xA;	&#xA;	var queryResult = Repository.SQLQuery( sql );&#xA;	if ( queryResult.length &gt; 0 )&#xA;	{&#xA;		var resultDOM = XMLParseXML( queryResult );&#xA;		resultArray = XMLGetNodeTextArray( resultDOM, &quot;//EADATA//Dataset_0//Data//Row//&quot; &#xA;			+ columnName );&#xA;	}&#xA;	&#xA;	return resultArray;&#xA;}&#xA;&#xA;/**&#xA; * Returns an escaped copy of the provided String that may be safely included in an SQL query.&#xA; * NOTE: This function automatically adds single quotation marks around the string value.&#xA; *&#xA; * @param[in] originalString The String to escape&#xA; *&#xA; * @return A String representing the SQL escaped version of the provided string&#xA; */&#xA;function DBSafeSQLString( originalString /* : String */ ) /* : String */&#xA;{&#xA;	// Replace single quotation marks with 2x single quotation marks&#xA;	var quotationRegEx = new RegExp( &quot;\'&quot;, &quot;gm&quot; );&#xA;	var modifiedContents = originalString.replace( quotationRegEx, &quot;\'\'&quot; );&#xA;	&#xA;	return &quot;\'&quot; + modifiedContents + &quot;\'&quot;;&#xA;}&#xA;&#xA;/**&#xA; * Returns a string representation of the provided Date which may be used in SQL queries&#xA; * NOTE: The output of this function depends on the value of the script variable DBTYPE.&#xA; *&#xA; * @param[in] scriptingDate The Date to the format&#xA; *&#xA; * @return A String representing the SQL formatted version of the provided Date&#xA; */&#xA;function DBGetSQLDate( scriptingDate /* : Date */ ) /* : String */&#xA;{&#xA;	var dateDelimiter = &quot;#&quot;;&#xA;	&#xA;	if ( DBTYPE == DBTYPE_MYSQL )&#xA;		dateDelimiter = &quot;\'&quot;;&#xA;	&#xA;	var sqlDate = dateDelimiter;&#xA;	sqlDate += scriptingDate.getFullYear() + &quot;-&quot; + (scriptingDate.getMonth() + 1) + &quot;-&quot; + scriptingDate.getDate();&#xA;	sqlDate += &quot; &quot; + scriptingDate.getHours() + &quot;:&quot; + scriptingDate.getMinutes() + &quot;:&quot; + scriptingDate.getSeconds();&#xA;	sqlDate += dateDelimiter;&#xA;	&#xA;	return sqlDate;&#xA;}&#xA;&#xA;/**&#xA; * Run SQL and return the ResultSet as a JSON object&#xA; *&#xA; * @param[in] sql (string) The SQL SELECT statement to be executed&#xA; *&#xA; * @return A JSON object with three properties: SQL (string), Rows (Array) and Columns (Array).&#xA; * SQL will contain a copy of the sql statement that was passed to this function. Columns will&#xA; * contain an Array of the unique column names returned by the query. Rows will contain an Array&#xA; * of JSON objects, the properties of each object are based on the columns returned by the SQL Query.&#xA; */&#xA;function DBSQLQueryToJSON( sql /* : String */ ) /* : Object */&#xA;{&#xA;	// Create a new JSON object to represent the result set. Object has three properties: SQL (string), Columns (Array) and Rows (Array)&#xA;	var resultSet = {&#xA;		&quot;SQL&quot; : sql,&#xA;		&quot;Columns&quot; : [],&#xA;		&quot;Rows&quot; : []&#xA;		};&#xA;	&#xA;	var xml = Repository.SQLQuery(sql);&#xA;	var xmlDOM = XMLParseXML(xml);&#xA;	var rowCount = 0;&#xA;&#xA;	var xmlRows = xmlDOM.documentElement.selectNodes( &quot;//EADATA//Dataset_0//Data//Row&quot; );&#xA;	if (xmlRows != null)&#xA;	{&#xA;		// Loop each Row node in the xml&#xA;		var xmlRow = xmlRows.nextNode();&#xA;		while (xmlRow != null)&#xA;		{&#xA;			// Create a new JSON Object for each row&#xA;			var row = {};&#xA;			&#xA;			// Loop each node which is a child of the current row (i.e. the columns)&#xA;			var xmlColumns = xmlRow.childNodes;&#xA;			var xmlColumn = xmlColumns.nextNode();&#xA;			while (xmlColumn != null)&#xA;			{&#xA;				// Create a property on the row object with the same name and value as the node found in the xml&#xA;				row[xmlColumn.nodeName] = xmlColumn.text;&#xA;&#xA;				// For first row only, add all unique column names to the Columns array&#xA;				if (rowCount == 0 &amp;&amp; !resultSet.Columns.includes(xmlColumn.nodeName))&#xA;					resultSet.Columns.push(xmlColumn.nodeName);&#xA;				&#xA;				// Next column&#xA;				xmlColumn = xmlColumns.nextNode();&#xA;			}&#xA;			&#xA;			// Append new row to ResultSet.Rows&#xA;			resultSet.Rows.push(row);&#xA;			rowCount++;&#xA;			&#xA;			// Next row&#xA;			xmlRow = xmlRows.nextNode();&#xA;		}&#xA;	}&#xA;	&#xA;	return resultSet;&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="5"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{61638C6D-687F-49a0-81A6-773A40614308}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-DateTime&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="/**&#xA; * @Status: NOT TESTED&#xA; * @file JavaScript-DateTime&#xA; * This script library contains helper functions for working with Date/Time structures in&#xA; * the automation interface. Functions provided by this module are identified by the prefix DT.&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2010-09-01&#xA; */&#xA; &#xA;/**&#xA; * Converts a scripting Date object to a variant date object that EA's automation interface accepts&#xA; *&#xA; * @param[in] scriptingDate (Date) The scripting Date object to convert&#xA; *&#xA; * @return the provided scripting Date in variant date form&#xA; */&#xA;function DTToEADate( scriptingDate /* : Date */ ) /* : variant */&#xA;{&#xA;	var eaDate = scriptingDate.getVarDate();&#xA;	return eaDate;&#xA;}&#xA;&#xA;/**&#xA; * Parses the provided date string into a variant date object that EA's automation interface accepts&#xA; *&#xA; * @param[in] dateString (String) A string representing a date&#xA; *&#xA; * @return The provided string parsed in variant date form&#xA; */&#xA;function DTParseEADate( dateString /* : String */ ) /* : variant */&#xA;{&#xA;	// As JScript mimics Javascript, parse() returns a long&#xA;	var asLong = Date.parse( dateString );&#xA;	&#xA;	// Create a JScript date from the long&#xA;	var asJScriptDate = new Date( asLong );&#xA;	&#xA;	// Convert to EA Date&#xA;	var asEADate = DTToEADate( asJScriptDate );&#xA;	&#xA;	return asEADate;&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="6"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{13C73AFF-93F2-4d59-B80F-C9E5A65D83BB}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Dialog&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/**&#xA; * @file JavaScript-Dialog&#xA; * This script library contains helper functions for common dialogs. Functions provided by this &#xA; * module are identified by the prefix DLG.&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;&#xA;var DLG_MAXFILESIZE = 260;&#xA;var OF_FILEMUSTEXIST = 0x1000;&#xA;var OF_OVERWRITEPROMPT = 0x2;&#xA;&#xA;/**&#xA; * Displays an Input dialog and returns the text that the user typed in.&#xA; *&#xA; * @param[in] promptText (String) The text prompt that will be displayed on the input dialog.&#xA; * @param[in] title (String) The text that will appear in the input dialog's title.&#xA; * @param[in] defaultText (String) The initial text that will appear in the input field of the dialog.&#xA; *&#xA; * @return A String value representing the text the user typed into the input field&#xA; */&#xA;function DLGInputBox( promptText /* : String */, title /* : String */, defaultText /* : String */ ) /* : String */&#xA;{&#xA;	// JavaScript has no intrinsic InputBox method, therefore we have to steal VBs&#xA;	var vbe = new COMObject(&quot;ScriptControl&quot;);&#xA;	vbe.Language = &quot;VBScript&quot;;&#xA;	&#xA;	return vbe.eval( &quot;InputBox(\&quot;&quot; + promptText + &quot;\&quot;,\&quot;&quot; + title + &quot;\&quot;,\&quot;&quot; + defaultText + &quot;\&quot;)&quot;);&#xA;}&#xA;&#xA;/**&#xA; * Displays an Open File dialog and returns the file name that the user selected.&#xA; *&#xA; * @param[in] filterString (String) A filter string that lists the sets of filename filters that &#xA; * can be applied in the dialog. Each filter is a string pair delimited by the pipe symbol (|), &#xA; * with the first string containing a description of the filter (eg &quot;Documents&quot;) and the second&#xA; * string containing a semicolon delimited list of file patterns to filter on (eg &#xA; * &quot;*.doc;*.xml;*.odt&quot;). Multiple filters can be provided in filterString, delimited also by the &#xA; * pipe symbol (eg &quot;All Files |*.*|Documents|*.doc;*.xml;*.odt&quot;)&#xA; * @param[in] defaultFilterIndex (Number) The filter index that will be selected by default (starts &#xA; * at 1)&#xA; *&#xA; * @return A String value representing the file name that the user selected&#xA; */&#xA;function DLGOpenFile( filterString /* : String */, defaultFilterIndex /* : Number */ ) /* : String */&#xA;{&#xA;	if ( filterString == null || filterString == &quot;&quot; )&#xA;	{&#xA;		filterString = &quot;All Files (*.*)|*.*&quot;;&#xA;		defaultFilterIndex = 1;&#xA;	}&#xA;&#xA;	var filename = &quot;&quot;;&#xA;	var flags = OF_FILEMUSTEXIST;&#xA;	var initialDirectory = &quot;&quot;;&#xA;	var openOrSave = 0;&#xA;	&#xA;	// Show the dialog and return the selected file name&#xA;	return Repository.GetProjectInterface().GetFileNameDialog(filename, filterString, defaultFilterIndex, flags, initialDirectory, openOrSave);&#xA;}&#xA;&#xA;/**&#xA; * Displays a Save File dialog and returns the file name that the user selected.&#xA; *&#xA; * @param[in] filterString (String) A filter string that lists the sets of filename filters that &#xA; * can be applied in the dialog. Each filter is a string pair delimited by the pipe symbol (|), &#xA; * with the first string containing a description of the filter (eg &quot;Documents&quot;) and the second&#xA; * string containing a semicolon delimited list of file patterns to filter on (eg &#xA; * &quot;*.doc;*.xml;*.odt&quot;). Multiple filters can be provided in filterString, delimited also by the &#xA; * pipe symbol (eg &quot;All Files |*.*|Documents|*.doc;*.xml;*.odt&quot;)&#xA; * @param[in] defaultFilterIndex (Number) The filter index that will be selected by default (starts &#xA; * at 1)&#xA; *&#xA; * @return A String value representing the file name that the user selected.&#xA; */&#xA;function DLGSaveFile( filterString /* : String */, defaultFilterIndex /* : Number */ ) /* : String */&#xA;{&#xA;	if ( filterString == null || filterString == &quot;&quot; )&#xA;	{&#xA;		filterString = &quot;All Files (*.*)|*.*&quot;;&#xA;		defaultFilterIndex = 1;&#xA;	}&#xA;	&#xA;	var filename = &quot;&quot;;&#xA;	var flags = OF_OVERWRITEPROMPT;&#xA;	var initialDirectory = &quot;&quot;;&#xA;	var openOrSave = 1;&#xA;	&#xA;	// Show the dialog and return the selected file name&#xA;	return Repository.GetProjectInterface().GetFileNameDialog(filename, filterString, defaultFilterIndex, flags, initialDirectory, openOrSave);&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="7"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{78A126B5-774E-4c72-AE95-3FE387C5BF60}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-GUID&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/**&#xA; * @file JavaScript-GUID&#xA; * This script library contains helper functions to assist with the generation and manipulation&#xA; * of Globally Unique Identifiers (GUIDs)&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;&#xA;/**&#xA; * Generates and returns a Globally Unique Identifier in string form&#xA; *&#xA; * @return A string representing a new globally unique identifier&#xA; */&#xA;function GUIDGenerateGUID() /* : String */&#xA;{&#xA;	var typeLib = new COMObject( &quot;Scriptlet.TypeLib&quot; );&#xA;	&#xA;	// GUID returned from typeLib has 2 unprintable characters at the end which stuff up string&#xA;	// manipulation later on&#xA;	return typeLib.GUID.substr(0, 38);&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="8"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{F030ED9C-0E06-4165-8DD5-95B3968CA747}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Logging&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/**&#xA; * @file JavaScript-Logging&#xA; * This script library contains helper functions to assist with logging. Log messages can be &#xA; * submitted to the various functions in this module, and will be filtered according to the value&#xA; * of LOGLEVEL.&#xA; *&#xA; * Valid values for LOGLEVEL are:&#xA; * - LOGLEVEL_ERROR&#xA; * - LOGLEVEL_WARNING&#xA; * - LOGLEVEL_INFO&#xA; * - LOGLEVEL_DEBUG&#xA; * - LOGLEVEL_TRACE&#xA; *&#xA; * You can change the log level at any time during execution by setting the LOGLEVEL variable to the&#xA; * desired value.&#xA; *&#xA; * Functions provided by this module are identified by the prefix LOG&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;&#xA;// LOGLEVEL values&#xA;var LOGLEVEL_ERROR = 0;&#xA;var LOGLEVEL_WARNING = 1;&#xA;var LOGLEVEL_INFO = 2;&#xA;var LOGLEVEL_DEBUG = 3;&#xA;var LOGLEVEL_TRACE = 4;&#xA;&#xA;// The level to log at&#xA;var LOGLEVEL = LOGLEVEL_INFO;&#xA;&#xA;/**&#xA; * Logs a message at the ERROR level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_ERROR or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGError( message /* : String */ ) /* : void */&#xA;{&#xA;	if ( LOGLEVEL &gt;= LOGLEVEL_ERROR )&#xA;		Session.Output( _LOGGetDisplayDate() + &quot; [ERROR]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the INFO level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_INFO or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGInfo( message /* : String */ ) /* : void */&#xA;{&#xA;	if ( LOGLEVEL &gt;= LOGLEVEL_INFO )&#xA;		Session.Output( _LOGGetDisplayDate() + &quot; [INFO]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the WARNING level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_WARNING or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGWarning( message /* : String */ ) /* : void */&#xA;{&#xA;	if ( LOGLEVEL &gt;= LOGLEVEL_WARNING )&#xA;		Session.Output( _LOGGetDisplayDate() + &quot; [WARNING]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the DEBUG level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_DEBUG or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGDebug( message /* : String */ ) /* : void */&#xA;{&#xA;	if ( LOGLEVEL &gt;= LOGLEVEL_DEBUG )&#xA;		Session.Output( _LOGGetDisplayDate() + &quot; [DEBUG]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Logs a message at the TRACE level. The message will be displayed if LOGLEVEL is set to &#xA; * LOGLEVEL_TRACE or above.&#xA; *&#xA; * @param[in] message (String) The message to log&#xA; */&#xA;function LOGTrace( message /* : String */ ) /* : void */&#xA;{&#xA;	if ( LOGLEVEL &gt;= LOGLEVEL_TRACE )&#xA;		Session.Output( _LOGGetDisplayDate() + &quot; [TRACE]: &quot; + message );&#xA;}&#xA;&#xA;/**&#xA; * Returns the current date/time in a format suitable for logging.&#xA; *&#xA; * @return A String representing the current date/time&#xA; */&#xA;function _LOGGetDisplayDate() /* : String */&#xA;{&#xA;	var now = new Date();&#xA;	&#xA;	// Pad hour value&#xA;	var hours = now.getHours();&#xA;	if ( hours &lt; 10 )&#xA;		hours = &quot;0&quot; + hours;&#xA;	&#xA;	// Pad minute value&#xA;	var minutes = now.getMinutes();&#xA;	if ( minutes &lt; 10 )&#xA;		minutes = &quot;0&quot; + minutes;&#xA;	&#xA;	// Pad second value&#xA;	var seconds = now.getSeconds();&#xA;	if ( seconds &lt; 10 )&#xA;		seconds = &quot;0&quot; + seconds;&#xA;	&#xA;	var displayDate = now.getFullYear() + &quot;-&quot; + (now.getMonth() + 1) + &quot;-&quot; + now.getDate();&#xA;	displayDate += &quot; &quot; + hours + &quot;:&quot; + minutes + &quot;:&quot; + seconds;&#xA;&#xA;	return displayDate;&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="9"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8D11EF31-440F-4183-A176-717524074B12}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-String&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/**&#xA; * @file JavaScript-String&#xA; * This script library contains helper functions to assist with String manipulation&#xA; *&#xA; * Functions provided by this module are identified by the prefix STR&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA; &#xA;function STRTrim( original /* : String */ ) /* : String */&#xA;{&#xA;	return original.replace( /^\s+|\s+$/g, &quot;&quot; );&#xA;}&#xA;&#xA;function STRLTrim( original /* : String */ ) /* : String */&#xA;{&#xA;	return original.replace( /^\s+/, &quot;&quot; );&#xA;}&#xA;&#xA;function STRRTrim( original /* : String */ ) /* : String */&#xA;{&#xA;	return original.replace( /\s+$/, &quot;&quot; );&#xA;}&#xA;&#xA;function STRTrimQuote( original /* : String */ ) /* : String */&#xA;{&#xA;	return original.replace( /^\&quot;+|\&quot;+$/g, &quot;&quot; );&#xA;}&#xA;&#xA;function STRLTrimQuote( original /* : String */ ) /* : String */&#xA;{&#xA;	return original.replace( /^\&quot;+/, &quot;&quot; );&#xA;}&#xA;&#xA;function STRRTrimQuote( original /* : String */ ) /* : String */&#xA;{&#xA;	return original.replace( /\&quot;+$/, &quot;&quot; );&#xA;}&#xA;&#xA;&#xA;/**&#xA; * Generate spaces based on a specified indent level.&#xA; *&#xA; * @param[in] (Integer) Depth of the indent to generate&#xA; *&#xA; * @return A string of space characters. 4 spaces per indent level will be generated.&#xA; */&#xA;function STRIndent(num /* : Integer */) /* : String */&#xA;{&#xA;	return new Array(num + 1).join(&quot;    &quot;);&#xA;}&#xA;&#xA;/**&#xA; * Tests the provided string to determine if it appears to be a valid GUID format.&#xA; *&#xA; * @param[in] (String) The string value to be tested&#xA; *&#xA; * @return A boolean indicating if the provided string appears to be a guid.&#xA; */&#xA;function STRIsGUID(s /* : String */) /* : Boolean */&#xA;{&#xA;	var regexGUID = /^\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\}?$/&#xA;	return regexGUID.test(s);&#xA;}&#xA;&#xA;/**&#xA; * Insert contents of array into the original message by index like {0}, {1}, etc. Similar to String.Format method in C#.&#xA; *&#xA; * @param[in] (String) The string to be formatted. Should contain placeholders like {0}, {1}, etc which correspond to index of item to be inserted from params array&#xA; * @param[in] (Array) The values to be inserted into original string. E.g. [1, &quot;Hello&quot;, &quot;World!&quot;]&#xA; *&#xA; * @return A formatted message string after performing replacements.&#xA; */&#xA;function STRFormat(message /* : String */, params /* : Array */)&#xA;{&#xA;	var result = message;&#xA;	for (var p=0; p &lt; params.length; p++)&#xA;	{&#xA;		//use regular expression to ensure all matching instances are replaced&#xA;		result = result.replace(new RegExp(&quot;\\{&quot; + p + &quot;\\}&quot;, &quot;g&quot;), params[p]);&#xA;	}&#xA;	return result;&#xA;}&#xA;&#xA;/**&#xA; * Get a specific name/value pair from within a Style string.&#xA; *&#xA; * @param[in] (String) The full EA Style field&#xA; * @param[in] (String) The name of the option to get from this field&#xA; * @param[in] (String) The delimiter used to split the options in this Style string (E.g. &quot;;&quot;)&#xA; *&#xA; * @return String containing a name/value pair from a standard EA Style field.&#xA; */&#xA;function STRGetOption(styleString /* : String */, optionName /* : String */, delimiter /* : String */)&#xA;{&#xA;	var index = styleString.indexOf( optionName );&#xA;	var s = &quot;&quot;;&#xA;	if (index &gt;= 0)&#xA;	{&#xA;		var delimiterIndex = styleString.indexOf( delimiter, index );&#xA;		s = styleString.substring(index, delimiterIndex);&#xA;	}&#xA;	return s;&#xA;}&#xA;&#xA;/**&#xA; * Get the value part from a name/value pair (i.e. anything after the equals sign)&#xA; *&#xA; * @param[in] (String) The name/value pair retrieved from an EA Style field.&#xA; *&#xA; * @return The value part of a name/value pair.&#xA; */&#xA;&#xA;function STRGetValue(option /* : String */) /* : String */&#xA;{&#xA;	var s = &quot;&quot;;&#xA;	var index = option.indexOf( &quot;=&quot; );&#xA;	s = option.substring(index+1);&#xA;&#xA;	return s;&#xA;}&#xA;&#xA;&#xA;/**&#xA; * Set a specific option within a style string. Replaces existing value if found or appends to end of the style string if option not found.&#xA; *&#xA; * @param[in] (String) The original EA Style field&#xA; * @param[in] (String) The name of the option to set in this field&#xA; * @param[in] (String) The value of the option to set in this field&#xA; * @param[in] (String) The delimiter used to split the options in this Style string (E.g. &quot;;&quot;)&#xA; *&#xA; * @return The complete Style string after adding or updating the specified option.&#xA; */&#xA;function STRSetOption(styleString /* : String */, optionName /* : String */, newValue /* : String */, delimiter /* : String */) /* : String */&#xA;{&#xA;	var newOption = optionName + &quot;=&quot; + newValue;&#xA;&#xA;	//check for existing option&#xA;	var currentOption = STRGetOption( styleString, optionName, delimiter );&#xA;&#xA;	if (currentOption.length &gt; 0)&#xA;	{&#xA;		//if the option already exists, replace with the new value&#xA;		styleString = styleString.replace(currentOption, newOption);&#xA;	}&#xA;	else&#xA;	{&#xA;		//if option not found, append new option to the style string&#xA;		styleString += newOption + delimiter;&#xA;	}&#xA;	&#xA;	return styleString;&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="10"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{FEFD3D98-190A-46f5-BD57-1914626A117C}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-TaggedValue&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="/**&#xA; * @file JavaScript-TaggedValue &#xA; * This script library contains helper functions for working with Tagged Values. Functions &#xA; * provided by this module are identified by the prefix TV.&#xA; *&#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA; &#xA; /**&#xA;  * Retrieves the TaggedValue value from the provided element whose name matches the specified name.&#xA;  * If the element does not exist, or does not contain a TaggedValue with the specified name, null&#xA;  * is returned.&#xA;  *&#xA;  * @param[in] theElement (EA.Element) The element to retrieve the TaggedValue value from&#xA;  * @param[in] taggedValueName (String) The name of the TaggedValue whose value will be retrieved&#xA;  *&#xA;  * @return The value of the requested TaggedValue in variant form&#xA;  */&#xA;function TVGetElementTaggedValue( theElement /* : EA.Element */, taggedValueName /* : String */, defaultValue /* : String */ ) /* : variant */&#xA;{&#xA;	var result = defaultValue;&#xA;	&#xA;	if ( theElement != null &amp;&amp; taggedValueName.length &gt; 0 )&#xA;	{&#xA;		var taggedValue as EA.TaggedValue;&#xA;		taggedValue = theElement.TaggedValues.GetByName( taggedValueName );&#xA;		&#xA;		if ( taggedValue != null )&#xA;			result = taggedValue.Value;&#xA;	}&#xA;	&#xA;	return result;	&#xA;}&#xA;&#xA;/**&#xA; * Sets the specified TaggedValue on the provided element. If the provided element does not already&#xA; * contain a TaggedValue with the specified name, a new TaggedValue is created with the requested&#xA; * name and value. If a TaggedValue already exists with the specified name then action to take is&#xA; * determined by the replaceExisting variable. If replaceExisting is set to true, the existing value&#xA; * is replaced with the specified value, if not, a new TaggedValue is created with the new value.&#xA; *&#xA; * @param[in] theElement (EA.Element) The element to set the TaggedValue value on&#xA; * @param[in] taggedValueName (String) The name of the TaggedValue to set&#xA; * @param[in] taggedValueValue (variant) The value of the TaggedValue to set&#xA; * @param[in] replaceExisting (boolean) If a TaggedValue of the same name already exists, specifies &#xA; * whether to replace it, or create a new TaggedValue.&#xA; */&#xA;function TVSetElementTaggedValue( theElement /* : EA.Element */, taggedValueName /* : String */, taggedValueValue /* : variant */, replaceExisting /* : boolean */ ) /* : void */&#xA;{&#xA;	if ( theElement != null &amp;&amp; taggedValueName.length &gt; 0 )&#xA;	{&#xA;		var taggedValue as EA.TaggedValue;&#xA;		taggedValue = null;&#xA;	&#xA;		// If replace existing was specified then attempt to get a tagged value from the element&#xA;		// with the provided name&#xA;		if ( replaceExisting )&#xA;			taggedValue = theElement.TaggedValues.GetByName( taggedValueName );&#xA;		&#xA;		if ( taggedValue == null )&#xA;		{&#xA;			taggedValue = theElement.TaggedValues.AddNew( taggedValueName, taggedValueValue );&#xA;		}&#xA;		else&#xA;		{&#xA;			taggedValue.Value = taggedValueValue;&#xA;		}&#xA;		&#xA;		taggedValue.Update();&#xA;	}&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="11"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{46034E94-998A-46b9-9441-96341C1F9A72}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-XML&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-Logging&#xA;//!INC EAScriptLib.JavaScript-Logging&#xA;&#xA;/**&#xA; * @file JavaScript-XML&#xA; * This script library contains helper functions to assist with reading and writing XML. Functions &#xA; * provided by this module are identified by the prefix XML&#xA; * &#xA; * @author Sparx Systems&#xA; * @date 2020-07-21&#xA; */&#xA;&#xA;//Set by XMLCreateXMLObject depending on which version of the DOM Object is successfully created.&#xA;var XMLDOMDocumentVersion = &quot;&quot;;&#xA;&#xA;/**&#xA; * Attempts to create an MSXML2.DOMDocument object, depending upon the versions of MSXML available&#xA; * on the current system. It will try to create in order of preference: 6.0, 3.0 or 4.0.&#xA; *&#xA; * @return A new XML DOMDocument object ready for processing. If the object could not be &#xA; * created, the function will return null. Errors will be logged at the WARNING level.&#xA; * Success will be logged at the TRACE level.&#xA; */&#xA;function XMLCreateXMLObject() /* : MSXML2.DOMDocument */&#xA;{&#xA;	var xmlDOM = null;&#xA;	var ProgId = &quot;&quot;;&#xA;	var attempt = 0;&#xA;	&#xA;	while (xmlDOM == null)&#xA;	{&#xA;		switch (attempt++)&#xA;		{&#xA;			case 0:	ProgId = &quot;MSXML2.DOMDocument.6.0&quot;; break;	//MSXML 6.0&#xA;			case 1:	ProgId = &quot;MSXML2.DOMDocument.3.0&quot;; break;	//MSXML 3.0&#xA;			case 2:	ProgId = &quot;MSXML2.DOMDocument&quot;; break;		//MSXML 3.0&#xA;			case 3:	ProgId = &quot;MSXML2.DOMDocument.4.0&quot;; break;	//MSXML 4.0&#xA;			default: LOGWarning(&quot;Could not create DOMDocument.&quot;); return;&#xA;		}&#xA;		try { xmlDOM = new COMObject( ProgId ); LOGTrace(&quot;DOMDocument object created: &quot; + ProgId); } catch (err) { xmlDOM = null; }&#xA;	}&#xA;	&#xA;	if (xmlDOM != null)&#xA;	{&#xA;		xmlDOM.validateOnParse = false;&#xA;		xmlDOM.async = false;&#xA;		XMLDOMDocumentVersion = ProgId;&#xA;	}&#xA;	&#xA;	return xmlDOM;&#xA;}&#xA;&#xA;/**&#xA; * Parses a string containing an XML document into an XML DOMDocument object.&#xA; *&#xA; * @param[in] xmlDocument (String) A String value containing an XML document.&#xA; *&#xA; * @return An XML DOMDocument representing the parsed XML Document. If the document could not be &#xA; * parsed, the function will return null. Parse errors will be logged at the WARNING level&#xA; */&#xA;function XMLParseXML( xmlDocument /* : String */ ) /* : MSXML2.DOMDocument */&#xA;{&#xA;	// Create a new DOM object&#xA;	var xmlDOM = XMLCreateXMLObject();&#xA;	&#xA;	// Parse the string into the DOM&#xA;	var parsed = xmlDOM.loadXML( xmlDocument );&#xA;	if ( !parsed )&#xA;	{&#xA;		// A parse error occured, so log the last error and set the return value to null&#xA;		LOGWarning( _XMLDescribeParseError(xmlDOM.parseError) );&#xA;		xmlDOM = null;&#xA;	}&#xA;	&#xA;	return xmlDOM;&#xA;}&#xA;&#xA;/**&#xA; * Parses an XML file into an XML DOMDocument object.&#xA; *&#xA; * @param[in] xmlPath (String) A String value containing the path name to the XML file to parse.&#xA; *&#xA; * @return An XML DOMDocument representing the parsed XML File.  If the document could not be &#xA; * parsed, the function will return null. Parse errors will be logged at the WARNING level&#xA; */&#xA;function XMLReadXMLFromFile( xmlPath /* : String */ ) /* : MSXML2.DOMDocument */&#xA;{&#xA;	var xmlDOM = XMLCreateXMLObject();&#xA;	xmlDOM.validateOnParse = true;&#xA;	xmlDOM.async = true;&#xA;&#xA;	var loaded = xmlDOM.load( xmlPath );&#xA;	if ( !loaded )&#xA;	{&#xA;		LOGWarning( _XMLDescribeParseError(xmlDOM.parseError) );&#xA;		xmlDOM = null;&#xA;	}&#xA;	&#xA;	return xmlDOM;&#xA;}&#xA;&#xA;/**&#xA; * Saves the provided DOMDocument to the specified file path.&#xA; *&#xA; * @parameter[in] xmlDOM (MSXML2.DOMDocument) The XML DOMDocument to save&#xA; * @parameter[in] filePath (String) The path to save the file to&#xA; * @parameter[in] xmlDeclaration (Boolean) Whether the XML declaration should be included in the &#xA; * output file&#xA; * @parameter[in] indent (Boolean) Whether the output should be formatted with indents&#xA; */&#xA;function XMLSaveXMLToFile( xmlDOM /* : MSXML2.DOMDocument */, filePath /* : String */ , &#xA;	xmlDeclaration /* : Boolean */, indent /* : Boolean */ ) /* : void */&#xA;{&#xA;	// Create the file to write out to&#xA;	var fileIOObject = new COMObject( &quot;Scripting.FileSystemObject&quot; );&#xA;	var outFile = fileIOObject.CreateTextFile( filePath, true );&#xA;	&#xA;	// Create the formatted writer&#xA;	var xmlWriter = new COMObject( &quot;MSXML2.MXXMLWriter&quot; );&#xA;	xmlWriter.omitXMLDeclaration = !xmlDeclaration;&#xA;	xmlWriter.indent = indent;&#xA;		&#xA;	// Create the sax reader and assign the formatted writer as its content handler&#xA;	var xmlReader = new COMObject( &quot;MSXML2.SAXXMLReader&quot; );&#xA;	xmlReader.contentHandler = xmlWriter;&#xA;	&#xA;	// Parse and write the output&#xA;	xmlReader.parse( xmlDOM );&#xA;	outFile.Write( xmlWriter.output );&#xA;	outFile.Close();&#xA;}&#xA;&#xA;/**&#xA; * Retrieves the value of the named attribute that belongs to the node at nodePath.&#xA; *&#xA; * @param[in] xmlDOM (MSXML2.DOMDocument) The XML document that the node resides in&#xA; * @param[in] nodePath (String) The XPath path to the node that contains the desired attribute&#xA; * @param[in] attributeName (String) The name of the attribute whose value will be retrieved&#xA; *&#xA; * @return A String representing the value of the requested attribute&#xA; */&#xA;function XMLGetAttributeValue( xmlDOM /* : MSXML2.DOMDocument */, nodePath /* : String */, &#xA;	attributeName /* : String */ ) /* : String */&#xA;{&#xA;	var value = &quot;&quot;;&#xA;	&#xA;	// Get the node at the specified path&#xA;	var node = xmlDOM.selectSingleNode( nodePath );&#xA;	if ( node )&#xA;	{&#xA;		// Get the node's attributes&#xA;		var attributeMap = node.attributes;&#xA;		if ( attributeMap != null )&#xA;		{&#xA;			// Get the specified attribute&#xA;			var attribute = attributeMap.getNamedItem( attributeName )&#xA;			if ( attribute != null )&#xA;			{&#xA;				// Get the attribute's value&#xA;				value = attribute.value;&#xA;			}&#xA;			else&#xA;			{&#xA;				// Specified attribute not found&#xA;				LOGWarning( &quot;Node at path &quot; + nodePath + &#xA;					&quot; does not contain an attribute named: &quot; + attributeName );&#xA;			}&#xA;		}&#xA;		else&#xA;		{&#xA;			// Node cannot contain attributes&#xA;			LOGWarning( &quot;Node at path &quot; + nodePath + &quot; does not contain attributes&quot; );&#xA;		}&#xA;	}&#xA;	else&#xA;	{&#xA;		// Specified node not found&#xA;		LOGWarning( &quot;Node not found at path: &quot; + nodePath );&#xA;	}&#xA;	&#xA;	return value;&#xA;}&#xA;&#xA;/**&#xA; * Returns the text value of the XML node at nodePath&#xA; *&#xA; * @param[in] xmlDOM (MSXML2.DOMDocument) The XML document that the node resides in&#xA; * @param[in] nodePath (String) The XPath path to the desired node&#xA; *&#xA; * @return A String representing the desired node's text value&#xA; */&#xA;function XMLGetNodeText( xmlDOM /* : MSXML2.DOMDocument */, nodePath /* : String */ ) /* : String */&#xA;{&#xA;	var value = &quot;&quot;;&#xA;	&#xA;	// Get the node at the specified path&#xA;	var node = xmlDOM.selectSingleNode( nodePath );&#xA;	if ( node != null )&#xA;	{&#xA;		value = node.text;&#xA;	}&#xA;	else&#xA;	{&#xA;		// Specified node not found&#xA;		LOGWarning( &quot;Node not found at path: &quot; + nodePath );	&#xA;	}&#xA;	&#xA;	return value;&#xA;}&#xA;&#xA;/**&#xA; * Returns an array populated with the text values of the XML nodes at nodePath&#xA; *&#xA; * @param[in] xmlDOM (MSXML2.DOMDocument) The XML document that the nodes reside in&#xA; * @param[in] nodePath (String) The XPath path to the desired nodes&#xA; *&#xA; * @return An array of Strings representing the text values of the desired nodes&#xA; */&#xA;function XMLGetNodeTextArray( xmlDOM /* : MSXML2.DOMDocument */, nodePath /* : String */ ) /* : Array */&#xA;{&#xA;	var nodeList = xmlDOM.documentElement.selectNodes( nodePath );&#xA;	var textArray = [];&#xA;	&#xA;	for ( var i = 0 ; i &lt; nodeList.length ; i++ )&#xA;	{&#xA;		var currentNode = nodeList.nextNode();&#xA;		if (currentNode != null)&#xA;		{&#xA;			textArray.push(currentNode.text);&#xA;		}&#xA;	}&#xA;	&#xA;	return textArray;&#xA;}&#xA;&#xA;/**&#xA; * Returns a string containing the value of the named attribute owned by the provided DOM Node.&#xA; * Empty string is returned if named node not found.&#xA; *&#xA; * @param[in] node (IXMLDOMNode) The XML document node being queried&#xA; * @param[in] attName (String) The name of the attribute&#xA; *&#xA; * @return String representing the text value of the named attribute&#xA; */&#xA;function XMLGetNamedAttribute( node /* : IXMLDOMNode */, attName /* : String */ ) /* : String */&#xA;{&#xA;	var value = &quot;&quot;;&#xA;	&#xA;	var attrib = node.attributes.getNamedItem( attName );&#xA;	if (attrib != null)&#xA;	{&#xA;		value = attrib.value;&#xA;	}&#xA;	else&#xA;	{&#xA;		LOGWarning( &quot;Attribute not found: &quot; + attName );&#xA;	}&#xA;	&#xA;	return value;&#xA;}&#xA;&#xA;/**&#xA; * Returns a description of the provided parse error&#xA; *&#xA; * @return A String description of the last parse error that occured&#xA; */&#xA;function _XMLDescribeParseError( parseError )&#xA;{&#xA;	var reason = &quot;Unknown Error&quot;;&#xA;	&#xA;	// If we have an error&#xA;	if ( typeof(parseError) != &quot;undefined&quot; )&#xA;	{&#xA;		// Format a description of the error&#xA;		reason = &quot;XML Parse Error at [line: &quot; + parseError.line + &quot;, pos: &quot; + &#xA;			parseError.linepos + &quot;] &quot; + parseError.reason;&#xA;	}&#xA;	&#xA;	return reason;&#xA;}&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="12"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{5CDD3755-801D-4f21-BE9F-CE37021E049F}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Recursive Model Dump Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;!INC JavaScriptLib.JavaScript-Enumerator&#xA;&#xA;// Iterates through an EAP file using recursion.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Repository API - http://www.sparxsystems.com/uml_tool_guide/index.html?repository3.htm&#xA;//&#xA;function RecursiveModelDumpExample()&#xA;{&#xA;	Session.Output( &quot;JavaScript RECURSIVE MODEL DUMP EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Iterate through all models in the project&#xA;	var modelEnumerator = new Enumerator( Models );&#xA;	while ( !modelEnumerator.atEnd() )&#xA;	{&#xA;		var currentModel as EA.Package;&#xA;		currentModel = modelEnumerator.item();&#xA;		&#xA;		// Recursively process this package&#xA;		DumpPackage( &quot;&quot;, currentModel );&#xA;		&#xA;		modelEnumerator.moveNext();&#xA;	}&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child &#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function DumpPackage( indent, thePackage )&#xA;{&#xA;	// Cast thePackage to EA.Package so we get intellisense&#xA;	var currentPackage as EA.Package;&#xA;	currentPackage = thePackage;&#xA;	&#xA;	// Add the current package's name to the list&#xA;	Session.Output( indent + currentPackage.Name + &quot; (PackageID=&quot; + &#xA;		currentPackage.PackageID + &quot;)&quot; );&#xA;	&#xA;	// Dump the elements this package contains&#xA;	DumpElements( indent + &quot;    &quot;, currentPackage );&#xA;	&#xA;	// Recursively process any child packages&#xA;	var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;	while ( !childPackageEnumerator.atEnd() )&#xA;	{&#xA;		var childPackage as EA.Package;&#xA;		childPackage = childPackageEnumerator.item();&#xA;		&#xA;		DumpPackage( indent + &quot;    &quot;, childPackage );&#xA;		&#xA;		childPackageEnumerator.moveNext();&#xA;	}&#xA;}&#xA;&#xA;//&#xA;// Outputs the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function DumpElements( indent, thePackage )&#xA;{&#xA;	// Cast thePackage to EA.Package so we get intellisense&#xA;	var currentPackage as EA.Package;&#xA;	currentPackage = thePackage;&#xA;	&#xA;	// Iterate through all elements and add them to the list&#xA;	var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;	while ( !elementEnumerator.atEnd() )&#xA;	{&#xA;		var currentElement as EA.Element;&#xA;		currentElement = elementEnumerator.item();&#xA;		&#xA;		Session.Output( indent + &quot;::&quot; + currentElement.Name +&#xA;			&quot; (&quot; + currentElement.Type +&#xA;			&quot;, ID=&quot; + currentElement.ElementID + &quot;)&quot; );&#xA;		&#xA;		elementEnumerator.moveNext();&#xA;	}&#xA;}&#xA;&#xA;RecursiveModelDumpExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="13"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2C598093-9E99-40f6-9765-BDAC70F7AD1C}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Restore Baselines&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC Local JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;// The Project interface is what is required to work with baselines.&#xA;var project as EA.Project;&#xA;project = GetProjectInterface();&#xA;&#xA;// The simplest possible merge instruction.  Restore everything from baseline.&#xA;var mergeInstructions;&#xA;mergeInstructions = &quot;&lt;Merge&gt;&lt;MergeItem guid=\&quot;RestoreAll\&quot; /&gt;&lt;/Merge&gt;&quot;;&#xA;&#xA;function CreateXMLObject()&#xA;{&#xA;	var xmlDOM;&#xA;	try&#xA;	{&#xA;	       xmlDOM = new ActiveXObject( &quot;MSXML2.DOMDocument.4.0&quot; );&#xA;	}&#xA;	catch(e)&#xA;	{&#xA;	       xmlDOM = new ActiveXObject( &quot;MSXML2.DOMDocument.6.0&quot; );&#xA;	}&#xA;	&#xA;	xmlDOM.validateOnParse = false;&#xA;	xmlDOM.async = false;&#xA;	&#xA;	return xmlDOM;&#xA;}&#xA;&#xA;// Iterate over a collection of packages to find any packages&#xA;// that need the baseline restored.&#xA;function RestoreBaselinesInCollection(collection)&#xA;{&#xA;	var package as EA.Package;&#xA;	for(var idx = 0; idx &lt; collection.Count; idx++)&#xA;	{&#xA;		package = collection.GetAt(idx);&#xA;		RestoreBaselinesInPackage(package);&#xA;	}&#xA;}&#xA;&#xA;function RestoreBaselinesInPackage(package)&#xA;{&#xA;	// There's no point doing children if we've just&#xA;	// restored a top level package, so don't process&#xA;	// children to save time.&#xA;	var processChildren = true;&#xA;	&#xA;	// We're only intersted in restoring baselines&#xA;	// from packages with the stereotype &quot;test data&quot;.&#xA;	var PkgElement as EA.Element;&#xA;	PkgElement = package.Element;&#xA;	if(PkgElement != null)&#xA;	{&#xA;		// Look at each stereotype, if any match then continue.&#xA;		var stereotypes = PkgElement.StereotypeEx.split(&quot;,&quot;);&#xA;		for(id in stereotypes)&#xA;		{&#xA;			if(stereotypes[id] == &quot;test data&quot;)&#xA;			{&#xA;				RestoreBaselines(package);&#xA;				processChildren = false;&#xA;			}&#xA;		}&#xA;	}&#xA;	&#xA;	// Now process child packages.&#xA;	if(processChildren)&#xA;		RestoreBaselinesInCollection(package.Packages);&#xA;}&#xA;&#xA;function RestoreBaselines(package)&#xA;{&#xA;	// EA returns the list of baselines as xml.  So we need&#xA;	// to load the XML and get the guid of a baseline.&#xA;	var sXML = project.GetBaselines(package.PackageGUID, &quot;&quot;);&#xA;	var xml = CreateXMLObject();&#xA;	if(xml.loadXML(sXML))&#xA;	{&#xA;		var node;&#xA;		var baselineGUID;&#xA;		// We can't distinguish which baseline is the latest&#xA;		// so we are naively only getting a single node.&#xA;		node = xml.selectSingleNode(&quot;//EA.BaseLines//Baseline&quot;);&#xA;		if(node)&#xA;		{&#xA;			baselineGUID = node.getAttribute(&quot;guid&quot;);&#xA;		}&#xA;&#xA;		if(baselineGUID == &quot;&quot;)&#xA;		{&#xA;			Session.Output(&quot;Failed to find baseline for package: &quot; + package.Name);&#xA;		}&#xA;&#xA;		// Restore all from the baseline.&#xA;		Session.Output(&quot;Restoring from baseline for package &quot; + package.Name);&#xA;		project.DoBaselineMerge(package.PackageGUID, baselineGUID, mergeInstructions, &quot;&quot;);&#xA;	}&#xA;	else&#xA;	{&#xA;		Session.Output(&quot;Failed to load baseline list for package: &quot; + package.Name);&#xA;	}&#xA;}&#xA;&#xA;// This is a long operation and running it while testing is being done&#xA;// may have unexpected consequences.  So prompt the user before beginning.&#xA;if(Session.Prompt(&quot;Are you sure you want to restore all test data to baseline?&quot;, promptYESNO) == resultYes)&#xA;{&#xA;	Repository.ClearOutput(&quot;Script&quot;);&#xA;	RestoreBaselinesInCollection(Models);&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="14"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AD72DEB1-850D-4c54-96D3-72F7CDA21AC8}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Attribute Lifecycle Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;/*&#xA; * An example of working with attributes.&#xA; *&#xA; * NOTE: Requires an element to be selected in the Project Browser&#xA; * Related APIs&#xA; * =================================================================================&#xA; * Attribute API - http://www.sparxsystems.com/enterprise_architect_user_guide/14.1/automation_and_scripting/attribute.html&#xA; */&#xA;function AttributeLifeCycleExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	// Get the currently selected element in the tree to work on&#xA;	var theElement as EA.Element;&#xA;	theElement = Repository.GetTreeSelectedObject();&#xA;	&#xA;	if ( theElement != null &amp;&amp; theElement.ObjectType == otElement )&#xA;	{&#xA;		var addedAttributeID = 0;&#xA;&#xA;		Session.Output( &quot;JavaScript ATTRIBUTE LIFE CYCLE EXAMPLE&quot; );&#xA;		Session.Output( &quot;=======================================&quot; );&#xA;		Session.Output( &quot;Working on element '&quot; + theElement.Name + &quot;' (Type=&quot; + theElement.Type +&#xA;			&quot;, ID=&quot; + theElement.ElementID + &quot;)&quot; );&#xA;		&#xA;		// ==================================================&#xA;		// ADD AN ATTRIBUTE&#xA;		// ==================================================&#xA;		// Create an attribute to work on&#xA;		var attributes as EA.Collection;&#xA;		attributes = theElement.Attributes;&#xA;		&#xA;		var newAttribute as EA.Attribute;&#xA;		newAttribute = attributes.AddNew( &quot;m_number&quot;, &quot;int&quot; );&#xA;		newAttribute.Update();&#xA;		attributes.Refresh();&#xA;		&#xA;		addedAttributeID = newAttribute.AttributeID;&#xA;		&#xA;		Session.Output( &quot;Added attribute: &quot; + newAttribute.Name +&#xA;			&quot;(Type=&quot; + newAttribute.Type +&#xA;			&quot;, ID=&quot; + addedAttributeID + &quot;)&quot; );&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ATTRIBUTE CONSTRAINTS&#xA;		// ==================================================&#xA;		// Add an attribute constraint&#xA;		var constraints as EA.Collection;&#xA;		constraints = newAttribute.Constraints;&#xA;		&#xA;		var newConstraint as EA.AttributeConstraint;&#xA;		newConstraint = constraints.AddNew( &quot;&gt; 123&quot;, &quot;Precision&quot; );&#xA;		newConstraint.Update();&#xA;		constraints.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added constraint: &quot; + newConstraint.Name );&#xA;		&#xA;		// Search the constraint collection for the added constraint and delete it&#xA;		for ( var i = 0; i &lt; constraints.Count ; i++ )&#xA;		{&#xA;			var currentConstraint as EA.AttributeConstraint;&#xA;			currentConstraint = constraints.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Attribute Constraint: &quot; + currentConstraint.Name );&#xA;			&#xA;			// Delete the constraint we just added&#xA;			if ( currentConstraint.Name == &quot;&gt; 123&quot; )&#xA;			{&#xA;				constraints.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Constraint: &quot; + currentConstraint.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		constraints = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ATTRIBUTE TAGGED VALUES&#xA;		// ==================================================&#xA;		// Add a tagged value&#xA;		var tags as EA.Collection;&#xA;		tags = newAttribute.TaggedValues;&#xA;		&#xA;		var newTag as EA.AttributeTag;&#xA;		newTag = tags.AddNew( &quot;MyAttributeTag&quot;, &quot;Number&quot; );&#xA;		newTag.Update();&#xA;		tags.Refresh();&#xA;		&#xA;		var newTagID = newTag.TagID;&#xA;		Session.Output( &quot;Added tag: &quot; + newTag.Name + &quot; (ID=&quot; + newTagID  + &quot;)&quot; );&#xA;		&#xA;		newTag = null;&#xA;		&#xA;		// Search the tag collection for the added tag and delete it&#xA;		for ( var i = 0; i &lt; tags.Count ; i++ )&#xA;		{&#xA;			var currentTag as EA.AttributeTag;&#xA;			currentTag = tags.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Attribute Tag: &quot; + currentTag.Name );&#xA;			&#xA;			// Delete the tag we just added&#xA;			if ( currentTag.Name == &quot;MyAttributeTag&quot; )&#xA;			{&#xA;				tags.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Tag: &quot; + currentTag.Name + &#xA;					&quot; (ID=&quot; + currentTag.TagID + &quot;)&quot; );&#xA;			}&#xA;		}&#xA;		&#xA;		tags = null;&#xA;		&#xA;		// ==================================================&#xA;		// LIST AND DELETE ATTRIBUTES&#xA;		// ==================================================&#xA;		newAttribute = null;&#xA;		&#xA;		// List attributes&#xA;		for ( var i = 0 ; i &lt; attributes.Count ; i++ )&#xA;		{&#xA;			var currentAttribute as EA.Attribute;&#xA;			currentAttribute = attributes.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Attribute: &quot; + currentAttribute.Name  );&#xA;			&#xA;			// Delete the attribute we added&#xA;			if ( currentAttribute.AttributeID == addedAttributeID )&#xA;			{&#xA;				attributes.DeleteAt( i, true );&#xA;				Session.Output( &quot;Deleted Attribute: &quot; + currentAttribute.Name +&#xA;					&quot; (Type=&quot; + currentAttribute.Type +&#xA;					&quot;, ID=&quot; + currentAttribute.AttributeID + &quot;)&quot; );&#xA;			}&#xA;		}&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in the tree, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires an element be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select an element in the Project Browser and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;AttributeLifeCycleExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="15"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{AECFD02B-B6EB-403e-BCA9-E5D5F7FAD152}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Dictionary Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;/*&#xA; * @Status: Successfully converted to JavaScript and tested&#xA; * An example of working with JScript dictionaries. A Dictionary object is the &#xA; * equivalent of a PERL associative array. Items can be any form of data, and &#xA; * are stored in the array. Each item is associated with a unique key. The key &#xA; * is used to retrieve an individual item and is usually an integer or a string, &#xA; * but can be anything except an array.&#xA; * &#xA; * Related APIs&#xA; * ============================================================================= &#xA; * Dictionary Object - https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/dictionary-object&#xA; */&#xA; &#xA;function DictionaryExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;==============================&quot; );&#xA;	Session.Output( &quot;JavaScript Dictionary Example&quot; );&#xA;	Session.Output( &quot;==============================&quot; );&#xA;	&#xA;	// Instantiate an object of class Scripting.Dictionary&#xA;	//var theDictionary = new ActiveXObject(&quot;Scripting.Dictionary&quot;);&#xA;	//var theDictionary = getActiveXObject(&quot;Scripting.Dictionary&quot;);&#xA;	var theDictionary = new COMObject('Scripting.Dictionary');&#xA;	&#xA;	// Add items to the Dictionary. Keys are usually strings or integers, but can be any type&#xA;	// except for an array.&#xA;	theDictionary.Add( &quot;a&quot;, &quot;Alpha&quot; );&#xA;	theDictionary.Add( &quot;b&quot;, &quot;Bravo&quot; );&#xA;	theDictionary.Add( &quot;c&quot;, &quot;Charlie&quot; );&#xA;	theDictionary.Add( &quot;d&quot;, &quot;Delta&quot; );&#xA;	theDictionary.Add( &quot;e&quot;, &quot;Echo&quot; );&#xA;	&#xA;	// The Count property can be used to determine the amount of items in the Dictionary&#xA;	var itemCount = theDictionary.Count;&#xA;	Session.Output( &quot;The dictionary has &quot; + itemCount + &quot; item(s) in it.&quot; );&#xA;	&#xA;	// The Exists method can be used to determine if there is an entry in the Dictionary mapped&#xA;	// against the provided key:&#xA;	if ( theDictionary.Exists(&quot;a&quot;) )&#xA;		Session.Output( &quot;There is an entry for 'a' in the Dictionary&quot; );&#xA;	else&#xA;		Session.Output( &quot;There is no entry for 'a' in the Dictionary&quot; );&#xA;	&#xA;	if ( theDictionary.Exists(&quot;f&quot;) )&#xA;		Session.Output( &quot;There is an entry for 'f' in the Dictionary&quot; );&#xA;	else&#xA;		Session.Output( &quot;There is no entry for 'f' in the Dictionary&quot; );&#xA;	&#xA;	&#xA;	// The Item property can be used to retrieve an item mapped against a provided key&#xA;	var theItem = theDictionary.Item( &quot;d&quot;,&quot;aaa&quot; );&#xA;	Session.Output( &quot;The entry for 'd' is: '&quot; + theItem + &quot;'&quot; );&#xA;	&#xA;	// The Items method returns all items in the map. The Items collection is returned&#xA;	// as a VB type array which must be wrapped with a VBArray object to be accessed from&#xA;	// JScript.&#xA;	Session.Output( &quot;A dump of the entire dictionary:&quot;);&#xA;//	var allItems = theDictionary.Items();&#xA;//	var allItems = new VBArray( allItemsVB );&#xA;//	var allItemsArray = allItemsVB.toArray();&#xA;	var allItemsArray = theDictionary.Items();&#xA;	&#xA;	// Iterate through all items in the dictionary and display them&#xA;	for ( var i = 0 ; i &lt; itemCount ; i++ )&#xA;		Session.Output( &quot;Item &quot; + i + &quot;: &quot; + allItemsArray[i] );&#xA;		&#xA;	// The Remove method removes the item mapped to the provided key&#xA;	theDictionary.Remove( &quot;c&quot; );&#xA;	Session.Output( &quot;The dictionary has &quot; + theDictionary.Count + &quot; item(s) in it.&quot; );&#xA;	&#xA;	// The RemoveAll method removes all items in the dictionary&#xA;	Session.Output( &quot;Removing items from the dictionary&quot; );&#xA;	theDictionary.RemoveAll();&#xA;	Session.Output( &quot;The dictionary has &quot; + theDictionary.Count + &quot; item(s) in it.&quot; );&#xA;	&#xA;	Session.Output( &quot;=====&quot; );&#xA;	Session.Output( &quot;Done!&quot; );&#xA;	Session.Output( &quot;=====&quot; );&#xA;}&#xA;&#xA;DictionaryExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="16"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="17"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="18"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{38445D81-46E0-4734-B779-56A415228460}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Table Counts&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;/* @Status Tested Successfully&#xA; * Script Name: &#xA; * Author: &#xA; * Purpose: &#xA; * Date: &#xA; */&#xA; &#xA;function main()&#xA;{&#xA;	dumpcount(&quot;t_xref&quot;);&#xA;dumpcount(&quot;t_roleconstraint&quot;);&#xA;dumpcount(&quot;t_authors&quot;);&#xA;dumpcount(&quot;t_cardinality&quot;);&#xA;dumpcount(&quot;t_category&quot;);&#xA;dumpcount(&quot;t_clients&quot;);&#xA;dumpcount(&quot;t_complexitytypes&quot;);&#xA;dumpcount(&quot;t_connectortypes&quot;);&#xA;dumpcount(&quot;t_constants&quot;);&#xA;dumpcount(&quot;t_constrainttypes&quot;);&#xA;dumpcount(&quot;t_datatypes&quot;);&#xA;dumpcount(&quot;t_ecf&quot;);&#xA;dumpcount(&quot;t_efforttypes&quot;);&#xA;dumpcount(&quot;t_genopt&quot;);&#xA;dumpcount(&quot;t_lists&quot;);&#xA;dumpcount(&quot;t_mainttypes&quot;);&#xA;dumpcount(&quot;t_metrictypes&quot;);&#xA;dumpcount(&quot;t_objecttypes&quot;);&#xA;dumpcount(&quot;t_ocf&quot;);&#xA;dumpcount(&quot;t_package&quot;);&#xA;dumpcount(&quot;t_problemtypes&quot;);&#xA;dumpcount(&quot;t_projectroles&quot;);&#xA;dumpcount(&quot;t_propertytypes&quot;);&#xA;dumpcount(&quot;t_requiretypes&quot;);&#xA;dumpcount(&quot;t_resources&quot;);&#xA;dumpcount(&quot;t_risktypes&quot;);&#xA;dumpcount(&quot;t_rtfreport&quot;);&#xA;dumpcount(&quot;t_scenariotypes&quot;);&#xA;dumpcount(&quot;t_statustypes&quot;);&#xA;dumpcount(&quot;t_stereotypes&quot;);&#xA;dumpcount(&quot;t_tcf&quot;);&#xA;dumpcount(&quot;t_testclass&quot;);&#xA;dumpcount(&quot;t_testtypes&quot;);&#xA;dumpcount(&quot;t_trxtypes&quot;);&#xA;dumpcount(&quot;t_diagramtypes&quot;);&#xA;dumpcount(&quot;t_glossary&quot;);&#xA;dumpcount(&quot;t_implement&quot;);&#xA;dumpcount(&quot;t_object&quot;);&#xA;dumpcount(&quot;t_secgroup&quot;);&#xA;dumpcount(&quot;t_secpermission&quot;);&#xA;dumpcount(&quot;t_secuser&quot;);&#xA;dumpcount(&quot;t_diagram&quot;);&#xA;dumpcount(&quot;t_method&quot;);&#xA;dumpcount(&quot;t_objectconstraint&quot;);&#xA;dumpcount(&quot;t_objecteffort&quot;);&#xA;dumpcount(&quot;t_objectfiles&quot;);&#xA;dumpcount(&quot;t_objectmetrics&quot;);&#xA;dumpcount(&quot;t_objectproblems&quot;);&#xA;dumpcount(&quot;t_objectproperties&quot;);&#xA;dumpcount(&quot;t_objectrequires&quot;);&#xA;dumpcount(&quot;t_objectresource&quot;);&#xA;dumpcount(&quot;t_objectrisks&quot;);&#xA;dumpcount(&quot;t_objectscenarios&quot;);&#xA;dumpcount(&quot;t_objecttests&quot;);&#xA;dumpcount(&quot;t_objecttrx&quot;);&#xA;dumpcount(&quot;t_operation&quot;);&#xA;dumpcount(&quot;t_palette&quot;);&#xA;dumpcount(&quot;t_attribute&quot;);&#xA;dumpcount(&quot;t_connector&quot;);&#xA;dumpcount(&quot;t_diagramlinks&quot;);&#xA;dumpcount(&quot;t_diagramobjects&quot;);&#xA;dumpcount(&quot;t_issues&quot;);&#xA;dumpcount(&quot;t_operationparams&quot;);&#xA;dumpcount(&quot;t_operationposts&quot;);&#xA;dumpcount(&quot;t_operationpres&quot;);&#xA;dumpcount(&quot;t_attributeconstraints&quot;);&#xA;dumpcount(&quot;t_attributetag&quot;);&#xA;dumpcount(&quot;t_connectorconstraint&quot;);&#xA;dumpcount(&quot;t_connectortag&quot;);&#xA;dumpcount(&quot;t_document&quot;);&#xA;dumpcount(&quot;t_files&quot;);&#xA;dumpcount(&quot;t_html&quot;);&#xA;dumpcount(&quot;t_image&quot;);&#xA;dumpcount(&quot;t_operationtag&quot;);&#xA;dumpcount(&quot;t_paletteitem&quot;);&#xA;dumpcount(&quot;t_phase&quot;);&#xA;dumpcount(&quot;t_rtf&quot;);&#xA;dumpcount(&quot;t_rules&quot;);&#xA;dumpcount(&quot;t_script&quot;);&#xA;dumpcount(&quot;t_secgrouppermission&quot;);&#xA;dumpcount(&quot;t_seclocks&quot;);&#xA;dumpcount(&quot;t_secusergroup&quot;);&#xA;dumpcount(&quot;t_secuserpermission&quot;);&#xA;dumpcount(&quot;t_snapshot&quot;);&#xA;dumpcount(&quot;t_taggedvalue&quot;);&#xA;dumpcount(&quot;t_tasks&quot;);&#xA;dumpcount(&quot;t_template&quot;);&#xA;dumpcount(&quot;t_testplans&quot;);&#xA;dumpcount(&quot;t_umlpattern&quot;);&#xA;dumpcount(&quot;t_version&quot;);&#xA;dumpcount(&quot;t_xrefsystem&quot;);&#xA;dumpcount(&quot;t_xrefuser&quot;);&#xA;dumpcount(&quot;usys_system&quot;);&#xA;dumpcount(&quot;t_secpolicies&quot;);&#xA;dumpcount(&quot;usystables&quot;);&#xA;};&#xA;&#xA;function dumpcount( table)&#xA;{&#xA;	Session.Output(&quot;\nTABLE = &quot; + table);&#xA;	s = Repository.SQLQuery(&quot;Select count(*) as RowCount from &quot; + table);&#xA;	Session.Output(s);&#xA;};&#xA;&#xA;main();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="19"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="20"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="21"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2F404CA2-DA90-4b79-A09B-EDB5E6E418F7}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Documentation Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;// @Status Succecfully converted and tested&#xA;// Demonstrates how the DocumentGenerator API can be used to programmatically generate RTF or HTML&#xA;// documentation for model elements&#xA;//&#xA;// This example generates documentation for all actors under the package currently selected in&#xA;// the project browser, and all use cases they are linked to&#xA;//&#xA;// Related APIs&#xA;// =================================================================================&#xA;//&#xA;&#xA;var ACTOR_TEMPLATE = &quot;Model Report&quot;;&#xA;var USECASE_TEMPLATE = &quot;Use Case Details&quot;;&#xA;&#xA;var DOCUMENTATION_TYPE = dtRTF;&#xA;var OUTPUT_FILE = &quot;c:\\Users\\paulh\\Documents\\DocumentationExample.rtf&quot;;&#xA;function DocumentationExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript DOCUMENTATION EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Get the currently selected package in the Project Browser&#xA;	var currentPackage as EA.Package;&#xA;	currentPackage = Repository.GetTreeSelectedPackage();&#xA;	&#xA;	if ( currentPackage )&#xA;	{&#xA;		// Create a document generator object&#xA;		var docGenerator as EA.DocumentGenerator;&#xA;		docGenerator = Repository.CreateDocumentGenerator();&#xA;		&#xA;		// Create a new document&#xA;		if ( docGenerator.NewDocument(&quot;&quot;) )&#xA;		{&#xA;			var generationSuccess = false;&#xA;			&#xA;			// Insert table of contents&#xA;			docGenerator.InsertText( &quot;Table of Contents&quot;, alignLeft );&#xA;			generationSuccess = docGenerator.InsertTableOfContents();&#xA;			if ( !generationSuccess )&#xA;				ReportWarning( &quot;Error inserting Table of Contents: &quot; + docGenerator.GetLastError() );&#xA;			&#xA;			// Insert page break&#xA;			docGenerator.InsertBreak( breakPage );&#xA;			&#xA;			// Iterate over all actors under the currently selected package&#xA;			var packageElements as EA.Collection;&#xA;			packageElements = currentPackage.Elements;&#xA;			for ( var i = 0 ; i &lt; packageElements.Count ; i++ )&#xA;			{&#xA;				// Get the current element&#xA;				var currentElement as EA.Element;&#xA;				currentElement = packageElements.GetAt( i );&#xA;				&#xA;				if ( currentElement.Type == &quot;Actor&quot; )&#xA;				{&#xA;					// Generate Actor documentation&#xA;					ReportInfo( &quot;Generating documentation for actor: &quot; + currentElement.Name );&#xA;					generationSuccess = docGenerator.DocumentElement( currentElement.ElementID, 0, ACTOR_TEMPLATE );&#xA;					if ( !generationSuccess )&#xA;						ReportWarning( &quot;Error generating Actor documentation: &quot; + docGenerator.GetLastError() );&#xA;					&#xA;					// Generate documentation for all Use Cases connected to the current actor&#xA;					var elementConnectors as EA.Collection;&#xA;					elementConnectors = currentElement.Connectors;&#xA;					for ( var j = 0 ; j &lt; elementConnectors.Count ; j++ )&#xA;					{&#xA;						// Get the current connector and the element that it connects to&#xA;						var currentConnector as EA.Connector;&#xA;						currentConnector = elementConnectors.GetAt( j );&#xA;						var connectedElement as EA.Element;&#xA;						connectedElement = Repository.GetElementByID( currentConnector.SupplierID );&#xA;						&#xA;						if ( connectedElement.Type == &quot;UseCase&quot; )&#xA;						{&#xA;							// Generate Use Case documentation&#xA;							ReportInfo( &quot;Generating documentation for connected UseCase: &quot; + connectedElement.Name );&#xA;							generationSuccess = docGenerator.DocumentElement( connectedElement.ElementID, 1, USECASE_TEMPLATE );&#xA;							if ( !generationSuccess )&#xA;								ReportWarning( &quot;Error generating UseCase documentation: &quot; + docGenerator.GetLastError() );&#xA;						}&#xA;					}&#xA;					&#xA;				}&#xA;				else&#xA;				{&#xA;					ReportInfo( &quot;Skipping element &quot; + currentElement.Name + &quot; - not an actor&quot; );&#xA;				}&#xA;			}&#xA;			&#xA;			// Save the document&#xA;			var saveSuccess = docGenerator.SaveDocument( OUTPUT_FILE, DOCUMENTATION_TYPE );&#xA;			if ( saveSuccess )&#xA;				ReportInfo( &quot;Documentation complete!&quot; );&#xA;			else&#xA;				ReportWarning( &quot;Error saving file: &quot; + docGenerator.GetLastError() );&#xA;		}&#xA;		else&#xA;		{&#xA;			ReportFatal( &quot;Could not create new document: &quot; + docGenerator.GetLastError() );&#xA;		}&#xA;	}&#xA;	else&#xA;	{&#xA;		ReportFatal( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select a package in the Project Browser and try again.&quot; );&#xA;	}&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;	&#xA;}&#xA;&#xA;function ReportInfo( message )&#xA;{&#xA;	Session.Output( &quot;[INFO] &quot; + message );&#xA;}&#xA;&#xA;function ReportWarning( message )&#xA;{&#xA;	Session.Output( &quot;[WARNING] &quot; + message );&#xA;}&#xA;&#xA;function ReportFatal( message )&#xA;{&#xA;	Session.Output( &quot;[FATAL] &quot; + message );&#xA;	Session.Prompt( message, promptOK );&#xA;}&#xA;&#xA;DocumentationExample();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="22"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="23"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{6CB5B59D-3E23-4771-80E9-029460A14100}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Element Extras Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;/*&#xA; * @Status Successfully converted and tested&#xA; * Examples of how to access and use element extras - such as scenarios, constraints &#xA; * and requirements.&#xA; *&#xA; * NOTE: Requires an element to be selected in the Project Browser&#xA; *&#xA; * Related APIs&#xA; * =================================================================================&#xA; * Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/element2.html&#xA; */&#xA;function ElementExtrasExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	// Get the currently selected element in the tree to work on&#xA;	var theElement as EA.Element;&#xA;	theElement = Repository.GetTreeSelectedObject();&#xA;	&#xA;	if ( theElement != null &amp;&amp; theElement.ObjectType == otElement )&#xA;	{&#xA;		var addedAttributeID = 0;&#xA;&#xA;		Session.Output( &quot;JavaScript ELEMENT EXTRAS EXAMPLE&quot; );&#xA;		Session.Output( &quot;=======================================&quot; );&#xA;		Session.Output( &quot;Working on element '&quot; + theElement.Name + &quot;' (Type=&quot; + theElement.Type +&#xA;			&quot;, ID=&quot; + theElement.ElementID + &quot;)&quot; );&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT CONSTRAINTS&#xA;		// ==================================================&#xA;		Session.Output( &quot;Constraints&quot; );&#xA;		&#xA;		// Add a new constraint&#xA;		var constraints as EA.Collection;&#xA;		constraints = theElement.Constraints;&#xA;		&#xA;		var newConstraint as EA.Constraint;&#xA;		newConstraint = constraints.AddNew( &quot;MyConstraint&quot;, &quot;Pre-condition&quot; );&#xA;		newConstraint.Update();&#xA;		constraints.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Constraint: &quot; + newConstraint.Name );&#xA;		&#xA;		newConstraint = null;&#xA;		&#xA;		// List all element constraints&#xA;		for ( var i = 0 ; i &lt; constraints.Count ; i++ )&#xA;		{&#xA;			var currentConstraint as EA.Constraint;&#xA;			currentConstraint = constraints.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Constraint: &quot; + currentConstraint.Name );&#xA;			&#xA;			// Delete the constraint that we just added&#xA;			if ( currentConstraint.Name == &quot;MyConstraint&quot; )&#xA;			{&#xA;				constraints.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Constraint: &quot; + currentConstraint.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		constraints = null;&#xA;&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT EFFORTS&#xA;		// ==================================================&#xA;		Session.Output( &quot;Efforts&quot; );&#xA;		&#xA;		// Add a new effort&#xA;		var efforts as EA.Collection;&#xA;		efforts = theElement.Efforts;&#xA;		&#xA;		var newEffort as EA.Effort;&#xA;		newEffort = efforts.AddNew( &quot;MyEffort&quot;, &quot;Coding&quot; );&#xA;		newEffort.Update();&#xA;		efforts.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Effort: &quot; + newEffort.Name );&#xA;		&#xA;		newEffort = null;&#xA;		&#xA;		// List all element efforts&#xA;		for ( var i = 0 ; i &lt; efforts.Count ; i++ )&#xA;		{&#xA;			var currentEffort as EA.Effort;&#xA;			currentEffort = efforts.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Effort: &quot; + currentEffort.Name );&#xA;			&#xA;			// Delete the effort that we just added&#xA;			if ( currentEffort.Name == &quot;MyEffort&quot; )&#xA;			{&#xA;				efforts.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Effort: &quot; + currentEffort.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		efforts = null;&#xA;&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT RISKS&#xA;		// ==================================================&#xA;		Session.Output( &quot;Risks&quot; );&#xA;		&#xA;		// Add a new risk&#xA;		var risks as EA.Collection;&#xA;		risks = theElement.Risks;&#xA;		&#xA;		var newRisk as EA.Risk;&#xA;		newRisk = risks.AddNew( &quot;MyRisk&quot;, &quot;Time&quot; );&#xA;		newRisk.Update();&#xA;		risks.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Risk: &quot; + newRisk.Name );&#xA;		&#xA;		newRisk = null;&#xA;		&#xA;		// List all element risks&#xA;		for ( var i = 0 ; i &lt; risks.Count ; i++ )&#xA;		{&#xA;			var currentRisk as EA.Risk;&#xA;			currentRisk = risks.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Risk: &quot; + currentRisk.Name );&#xA;			&#xA;			// Delete the risk that we just added&#xA;			if ( currentRisk.Name == &quot;MyRisk&quot; )&#xA;			{&#xA;				risks.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Risk: &quot; + currentRisk.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		risks = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT METRICS&#xA;		// ==================================================&#xA;		Session.Output( &quot;Metrics&quot; );&#xA;		&#xA;		// Add a new metric&#xA;		var metrics as EA.Collection;&#xA;		metrics = theElement.Metrics;&#xA;		&#xA;		var newMetric as EA.Metric;&#xA;		newMetric = metrics.AddNew( &quot;MyMetric&quot;, &quot;Cost&quot; );&#xA;		newMetric.Update();&#xA;		metrics.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Metric: &quot; + newMetric.Name );&#xA;		&#xA;		newMetric = null;&#xA;		&#xA;		// List all element metrics&#xA;		for ( var i = 0 ; i &lt; metrics.Count ; i++ )&#xA;		{&#xA;			var currentMetric as EA.Metric;&#xA;			currentMetric = metrics.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Metric: &quot; + currentMetric.Name );&#xA;			&#xA;			// Delete the metric that we just added&#xA;			if ( currentMetric.Name == &quot;MyMetric&quot; )&#xA;			{&#xA;				metrics.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Metric: &quot; + currentMetric.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		metrics = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT TAGGED VALUES&#xA;		// ==================================================&#xA;		Session.Output( &quot;Tagged Values&quot; );&#xA;		&#xA;		// Add a new tag&#xA;		var tags as EA.Collection;&#xA;		tags = theElement.TaggedValues;&#xA;		&#xA;		var newTag as EA.TaggedValue;&#xA;		newTag = tags.AddNew( &quot;MyTag&quot;, &quot;Number&quot; );&#xA;		newTag.Update();&#xA;		tags.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Tag: &quot; + newTag.Name );&#xA;		&#xA;		newTag = null;&#xA;		&#xA;		// List all element tag&#xA;		for ( var i = 0 ; i &lt; tags.Count ; i++ )&#xA;		{&#xA;			var currentTag as EA.TaggedValue;&#xA;			currentTag = tags.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Tag Value: &quot; + currentTag.Name );&#xA;			&#xA;			// Delete the tagged value that we just added&#xA;			if ( currentTag.Name == &quot;MyTag&quot; )&#xA;			{&#xA;				tags.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Tag: &quot; + currentTag.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		tags = null;		&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT SCENARIOS&#xA;		// ==================================================&#xA;		Session.Output( &quot;Scenarios&quot; );&#xA;		&#xA;		// Add a new scenario&#xA;		var scenarios as EA.Collection;&#xA;		scenarios = theElement.Scenarios;&#xA;		&#xA;		var newScenario as EA.Scenario;&#xA;		newScenario = scenarios.AddNew( &quot;MyScenario&quot;, &quot;Alternate&quot; );&#xA;		newScenario.Update();&#xA;		scenarios.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Scenario: &quot; + newScenario.Name );&#xA;		&#xA;		newScenario = null;&#xA;		&#xA;		// List all element scenarios&#xA;		for ( var i = 0 ; i &lt; scenarios.Count ; i++ )&#xA;		{&#xA;			var currentScenario as EA.Scenario;&#xA;			currentScenario = scenarios.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Scenario: &quot; + currentScenario.Name );&#xA;			&#xA;			// Delete the scenario that we just added&#xA;			if ( currentScenario.Name == &quot;MyScenario&quot; )&#xA;			{&#xA;				scenarios.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Scenario: &quot; + currentScenario.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		scenarios = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT FILES&#xA;		// ==================================================&#xA;		Session.Output( &quot;Files&quot; );&#xA;		&#xA;		// Add a new file&#xA;		var files as EA.Collection;&#xA;		files = theElement.Files;&#xA;		&#xA;		var newFile as EA.File;&#xA;		newFile = files.AddNew( &quot;MyFile&quot;, &quot;doc&quot; );&#xA;		newFile.Update();&#xA;		files.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new File: &quot; + newFile.Name );&#xA;		&#xA;		newFile = null;&#xA;		&#xA;		// List all element files&#xA;		for ( var i = 0 ; i &lt; files.Count ; i++ )&#xA;		{&#xA;			var currentFile as EA.File;&#xA;			currentFile = files.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    File: &quot; + currentFile.Name );&#xA;			&#xA;			// Delete the file that we just added&#xA;			if ( currentFile.Name == &quot;MyFile&quot; )&#xA;			{&#xA;				files.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted File: &quot; + currentFile.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		files = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT TESTS&#xA;		// ==================================================&#xA;		Session.Output( &quot;Tests&quot; );&#xA;		&#xA;		// Add a new test&#xA;		var tests as EA.Collection;&#xA;		tests = theElement.Tests;&#xA;		&#xA;		var newTest as EA.Test;&#xA;		newTest = tests.AddNew( &quot;MyTest&quot;, &quot;Unit&quot; );&#xA;		newTest.Update();&#xA;		tests.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Test: &quot; + newTest.Name );&#xA;		&#xA;		newTest = null;&#xA;		&#xA;		// List all element tests&#xA;		for ( var i = 0 ; i &lt; tests.Count ; i++ )&#xA;		{&#xA;			var currentTest as EA.Test;&#xA;			currentTest = tests.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Test: &quot; + currentTest.Name );&#xA;			&#xA;			// Delete the test that we just added&#xA;			if ( currentTest.Name == &quot;MyTest&quot; )&#xA;			{&#xA;				tests.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Test: &quot; + currentTest.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		tests = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ELEMENT ISSUES&#xA;		// ==================================================&#xA;		Session.Output( &quot;Issues&quot; );&#xA;		&#xA;		// Add a new issue&#xA;		var issues as EA.Collection;&#xA;		issues = theElement.Issues;&#xA;		&#xA;		var newIssue as EA.Issue;&#xA;		newIssue = issues.AddNew( &quot;MyIssue&quot;, &quot;Defect&quot; );&#xA;		newIssue.Update();&#xA;		issues.Refresh();&#xA;		&#xA;		Session.Output( &quot;    Added new Issue: &quot; + newIssue.Name );&#xA;		&#xA;		newIssue = null;&#xA;		&#xA;		// List all element issues&#xA;		for ( var i = 0 ; i &lt; issues.Count ; i++ )&#xA;		{&#xA;			var currentIssue as EA.Issue;&#xA;			currentIssue = issues.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;    Issue: &quot; + currentIssue.Name );&#xA;			&#xA;			// Delete the issue that we just added&#xA;			if ( currentIssue.Name == &quot;MyIssue&quot; )&#xA;			{&#xA;				issues.DeleteAt( i, false );&#xA;				Session.Output( &quot;    Deleted Issue: &quot; + currentIssue.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		issues = null;		&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in the tree, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires an element be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select an element in the Project Browser and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;ElementExtrasExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="24"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2E9CF665-0091-41bb-A168-611872361FAD}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Manage Attributes and Methods Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;/*&#xA; * @Status converted and tested&#xA; * Example illustrating how to add and delete Attributes and Methods.&#xA; *&#xA; * NOTE: Requires an element to be selected in the Project Browser&#xA; *&#xA; * Related APIs&#xA; * =================================================================================&#xA; * Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/151/automation_and_scripting/element2.html&#xA; * Attribute API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/attribute.html&#xA; * Method API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/method.html&#xA; */&#xA;function ManageAttributesMethodsExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	// Get the currently selected element in the tree to work on&#xA;	var theElement as EA.Element;&#xA;	theElement = Repository.GetTreeSelectedObject();&#xA;	&#xA;	if ( theElement != null &amp;&amp; theElement.ObjectType == otElement )&#xA;	{&#xA;		Session.Output( &quot;JavaScript MANAGE ATTRIBUTES/METHODS EXAMPLE&quot; );&#xA;		Session.Output( &quot;=======================================&quot; );&#xA;		Session.Output( &quot;Working on element '&quot; + theElement.Name + &quot;' (Type=&quot; + theElement.Type +&#xA;			&quot;, ID=&quot; + theElement.ElementID + &quot;)&quot; );&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE ATTRIBUTES&#xA;		// ==================================================&#xA;		// Add an attribute&#xA;		var attributes as EA.Collection;&#xA;		attributes = theElement.Attributes;&#xA;		&#xA;		var newAttribute as EA.Attribute;&#xA;		newAttribute = attributes.AddNew( &quot;m_newAttribute&quot;, &quot;string&quot; );&#xA;		newAttribute.Update();&#xA;		attributes.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added attribute: &quot; + newAttribute.Name );&#xA;		&#xA;		newAttribute = null;&#xA;		&#xA;		// Search the attribute collection for the added attribute and delete it&#xA;		for ( var i = 0 ; i &lt; attributes.Count ; i++ )&#xA;		{&#xA;			var currentAttribute as EA.Attribute;&#xA;			currentAttribute = attributes.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Attribute: &quot; + currentAttribute.Name );&#xA;			&#xA;			// Delete the attribute we just added&#xA;			if ( currentAttribute.Name == &quot;m_newAttribute&quot; )&#xA;			{&#xA;				attributes.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Attribute: &quot; + currentAttribute.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		attributes = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE METHODS&#xA;		// ==================================================&#xA;		// Add a method&#xA;		var methods as EA.Collection;&#xA;		methods = theElement.Methods;&#xA;		&#xA;		var newMethod as EA.Method;&#xA;		newMethod = methods.AddNew( &quot;NewMethod&quot;, &quot;int&quot; );&#xA;		newMethod.Update();&#xA;		methods.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added method: &quot; + newMethod.Name );&#xA;		&#xA;		newMethod = null;&#xA;		&#xA;		// Search the method collection for the added method and delete it&#xA;		for ( var i = 0 ; i &lt; methods.Count ; i++ )&#xA;		{&#xA;			var currentMethod as EA.Method;&#xA;			currentMethod = methods.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Method: &quot; + currentMethod.Name );&#xA;			&#xA;			// Delete the method we just added&#xA;			if ( currentMethod.Name == &quot;NewMethod&quot; )&#xA;			{&#xA;				methods.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Method: &quot; + currentMethod.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		methods = null;		&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in the tree, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires an element be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select an element in the Project Browser and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;ManageAttributesMethodsExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="25"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{51A51B10-0BD2-46f7-A4BF-DFC0C3C7EAD3}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Manage Diagrams Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;// @Status tested successfully&#xA;// An example of how to create a diagram and add an Element to it.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Diagram API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/diagram2.html&#xA;// Diagram Object API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/diagramobjects.html&#xA;//&#xA;function ManageDiagramsExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JScript MANAGE DIAGRAMS EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Create a new package in the first model node&#xA;	var modelNode as EA.Package;&#xA;	modelNode = Repository.Models.GetAt( 0 );&#xA;	&#xA;	var testPackage as EA.Package;&#xA;	testPackage = modelNode.Packages.AddNew( &quot;TestPackage&quot;, &quot;Class&quot; );&#xA;	testPackage.Update();&#xA;	&#xA;	Session.Output( &quot;Added package '&quot; + testPackage.Name + &quot;' to model&quot; );&#xA;	&#xA;	// Create a diagram in the test package&#xA;	var testDiagram as EA.Diagram;&#xA;	testDiagram = testPackage.Diagrams.AddNew( &quot;My Logical Diagram&quot;, &quot;Logical&quot; );&#xA;	testDiagram.Notes = &quot;Test diagram created by the ManageDiagramsExample script&quot;;&#xA;	testDiagram.Update();&#xA;	&#xA;	Session.Output( &quot;Added diagram '&quot; + testDiagram.Name + &quot;' to package &quot; + testPackage.Name );&#xA;	&#xA;	// Create an element (which will be added to the diagram later on)&#xA;	var testElement as EA.Element;&#xA;	testElement = testPackage.Elements.AddNew( &quot;TestClass&quot;, &quot;Class&quot; );&#xA;	testElement.Update();&#xA;	&#xA;	Session.Output( &quot;Created element '&quot; + testElement.Name + &quot;' in package '&quot; +&#xA;		testPackage.Name + &quot;'&quot; );&#xA;		&#xA;	// Add the element to the diagram&#xA;	var diagramObjects as EA.Collection;&#xA;	diagramObjects = testDiagram.DiagramObjects;&#xA;	&#xA;	var testDiagramObject as EA.DiagramObject;&#xA;	testDiagramObject = diagramObjects.AddNew( &quot;l=200;r=400;t=200;b=600;&quot;, &quot;&quot; );&#xA;	testDiagramObject.ElementID = testElement.ElementID ;&#xA;	testDiagramObject.Update();&#xA;	&#xA;	Session.Output( &quot;Added element '&quot; + testElement.Name + &quot;' to diagram '&quot; +&#xA;		testDiagram.Name + &quot;'&quot; );&#xA;&#xA;	Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;ManageDiagramsExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="38"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="39"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="101"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="102"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="103"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="104"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="105"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="106"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="107"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="108"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="109"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="110"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="111"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="112"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="113"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="114"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="115"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="116"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="117"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="118"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="119"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="120"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="121"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="122"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="123"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="124"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="125"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="126"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="127"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="128"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="129"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="130"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="131"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="132"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="133"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="134"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="135"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="136"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="137"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="138"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="139"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="140"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="61"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{D2230A11-8EED-48aa-AA15-9568187435DA}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Enumerator&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;/*&#xA;Set of Enumerator functions to support iterating through collections&#xA;*/&#xA;function moveNext()&#xA;	{&#xA;		if(this.iElem &gt; -1)&#xA;		{&#xA;			this.iElem++;&#xA;			if(this.iElem &lt; this.Package.Count)&#xA;			{&#xA;				return true;&#xA;			}&#xA;			this.iElem = this.Package.Count;&#xA;		}&#xA;		return false;&#xA;	}&#xA;	&#xA;function item()&#xA;	{&#xA;		if( this.iElem &gt; -1 &amp;&amp; this.iElem &lt; this.Package.Count)&#xA;		{&#xA;			return this.Package.GetAt(this.iElem);&#xA;		}&#xA;		return null;&#xA;	}&#xA;&#xA;function atEnd()&#xA;	{&#xA;		if((this.iElem &gt; -1) &amp;&amp; (this.iElem &lt; this.Package.Count))&#xA;		{&#xA;			return false;&#xA;		}&#xA;		// Session.Output(&quot;at end!&quot;);&#xA;		return true;&#xA;	}&#xA;&#xA;function Check( obj)&#xA;	{&#xA;		if(obj == undefined)&#xA;		{&#xA;			Session.Output(&quot;Undefined object&quot;);&#xA;			return false;&#xA;		}&#xA;		return true;&#xA;	}	&#xA;&#xA;function Enumerator( object )&#xA;{&#xA;	this.iElem = 0;&#xA;	this.Package = object;&#xA;	this.atEnd = atEnd;&#xA;	this.moveNext = moveNext;&#xA;	this.item = item;&#xA;	this.Check = Check;&#xA;	if(!Check(object))&#xA;	{&#xA;		this.iElem = -1;&#xA;	}&#xA;}"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="64"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="65"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="66"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="67"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="68"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="69"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="70"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="71"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="72"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="73"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="74"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="75"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="76"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="77"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="78"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="79"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="80"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="81"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="82"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="83"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="84"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="85"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="86"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="87"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="88"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="89"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="90"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="91"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="92"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="93"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="94"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="95"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="96"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="97"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="98"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="99"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="100"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="141"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="142"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="27"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{8099D254-0BBD-412f-93EB-9A8E43272F7B}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Manage Elements Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;// @Status tested successfully&#xA;// Example illustrating how to add and delete Elements in a Package. &#xA;// &#xA;// NOTE: Requires a package to be selected in the Project Browser&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/element2.html&#xA;//&#xA;function ManageElementsExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	// Get the currently selected package in the tree to work on&#xA;	var thePackage as EA.Package;&#xA;	thePackage = Repository.GetTreeSelectedPackage();&#xA;	&#xA;	if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;	{&#xA;		var testElementID = 0;&#xA;		&#xA;		Session.Output( &quot;JavaScript MANAGE ELEMENTS EXAMPLE&quot; );&#xA;		Session.Output( &quot;=======================================&quot; );&#xA;		Session.Output( &quot;Working on package '&quot; + thePackage.Name + &quot;' (ID=&quot; +&#xA;			thePackage.PackageID + &quot;)&quot; );&#xA;		&#xA;		var elements as EA.Collection;&#xA;		elements = thePackage.Elements;&#xA;		&#xA;		// Create a new element in the package&#xA;		var testElement as EA.Element;&#xA;		testElement = elements.AddNew( &quot;Login to Website&quot;, &quot;UseCase&quot; );&#xA;		testElement.Stereotype = &quot;testcase&quot;;&#xA;		testElement.Update();&#xA;		thePackage.Elements.Refresh();&#xA;		&#xA;		testElementID = testElement.ElementID;&#xA;		Session.Output( &quot;Added Element: &quot; + testElement.Name + &quot; (ID=&quot; + testElementID + &quot;)&quot; );&#xA;		&#xA;		testElement = null;&#xA;		&#xA;		// Navigate the elements collection. Delete the newly added element when we find it&#xA;		for ( var i = 0 ; i &lt; elements.Count ; i++ )&#xA;		{&#xA;			var currentElement as EA.Element;&#xA;			currentElement = elements.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Element: &quot; + currentElement.Name );&#xA;			&#xA;			// If the element is the one we just added, then delete it&#xA;			if ( currentElement.ElementID == testElementID )&#xA;			{&#xA;				elements.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Element: &quot; + currentElement.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;ManageElementsExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="28"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C5BBF178-5CB1-482c-B9ED-B68878163724}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Manage Packages Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;// @Status tested successfully&#xA;// Example illustrating how to add a Model or a Package.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Package API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/package_2.html&#xA;// Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/element2.html&#xA;// Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/repository3.html&#xA;//&#xA;function ManagePackagesExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	var newModelID = 0;&#xA;	&#xA;	Session.Output( &quot;JavaScript MANAGE PACKAGES EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Create a new model node&#xA;	var newModel as EA.Package;&#xA;	newModel = Repository.Models.AddNew( &quot;AdvancedModel&quot;, &quot;&quot; );&#xA;	newModel.Update();&#xA;	Repository.Models.Refresh();&#xA;	&#xA;	newModelID = newModel.PackageID;&#xA;	Session.Output( &quot;Added new model: &quot; + newModel.Name +&#xA;		&quot; (PackageID=&quot; + newModelID + &quot;)&quot; );&#xA;	&#xA;	// ==================================================&#xA;	// ADD A SUBPACKAGE TO THE MODEL&#xA;	// ==================================================&#xA;	var packages as EA.Collection;&#xA;	packages = newModel.Packages;&#xA;	&#xA;	var subPackage as EA.Package;&#xA;	subPackage = packages.AddNew( &quot;SubPackage&quot;, &quot;Class&quot; );&#xA;	subPackage.Update();&#xA;	&#xA;	// GetElement returns the underlying element representation of the package&#xA;	// The initial Update() of the package must be called before we can access the&#xA;	// underlying element.&#xA;	var packageMetaElement as EA.Element;&#xA;	packageMetaElement = subPackage.Element;&#xA;	&#xA;	// Set the package's stereotype&#xA;	packageMetaElement.Stereotype = &quot;system&quot;;&#xA;	subPackage.Update();&#xA;	&#xA;	packages.Refresh();&#xA;	&#xA;	Session.Output( &quot;Added subpackage '&quot; + subPackage.Name +&#xA;		&quot;' under model '&quot; + newModel.Name + &quot;'&quot; );&#xA;		&#xA;	packageMetaElement = null;&#xA;	subPackage = null;&#xA;	newModel = null;&#xA;	&#xA;	// List all models in the collection, deleting the one we added&#xA;	for ( var i = 0 ; i &lt; Repository.Models.Count ; i++ )&#xA;	{&#xA;		var currentModel as EA.Package;&#xA;		currentModel = Repository.Models.GetAt( i );&#xA;		Session.Output( &quot;Model: &quot; + currentModel.Name );&#xA;		&#xA;		// If the model is the one we just added, then delete it&#xA;		if ( currentModel.PackageID == newModelID )&#xA;		{&#xA;			Repository.Models.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted model &quot; + currentModel.Name +&#xA;				&quot; (PackageID=&quot; + currentModel.PackageID + &quot;)&quot; );&#xA;		}&#xA;	}&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;ManagePackagesExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="29"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A918AF3D-09E2-49b0-A65B-0564365638B8}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Manage Stereotypes Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;// @Status tested successfully&#xA;// Example illustrating how to add and delete Stereotypes.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Stereotype API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/stereotype.html&#xA;// Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/repository3.html&#xA;//&#xA;function ManageStereotypesExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript MANAGE STEREOTYPES EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Create a new stereotype in the repository&#xA;	var stereotypes as EA.Collection;&#xA;	stereotypes = Repository.Stereotypes;&#xA;	&#xA;	var testStereo as EA.Stereotype;&#xA;	testStereo = stereotypes.AddNew( &quot;TestStereotype&quot;, &quot;Class&quot; );&#xA;	testStereo.Update();&#xA;	stereotypes.Refresh();&#xA;	&#xA;	Session.Output( &quot;Added Stereotype: &quot; + testStereo.Name );&#xA;	&#xA;	// Navigate the stereotype collection. Delete the newly added stereotype&#xA;	// when we find it&#xA;	for ( var i = 0 ; i &lt; stereotypes.Count ; i++ )&#xA;	{&#xA;		var currentStereo as EA.Stereotype;&#xA;		currentStereo = stereotypes.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Stereotype: &quot; + currentStereo.Name );&#xA;		&#xA;		// If the stereotype is the one we just added, then delete it&#xA;		if ( currentStereo.Name == &quot;TestStereotype&quot; )&#xA;		{&#xA;			stereotypes.DeleteAt( i , false );&#xA;			Session.Output( &quot;Deleted Stereotype: &quot; + currentStereo.Name );&#xA;		}&#xA;	}&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;ManageStereotypesExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="30"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{789F1989-2EAC-4c8b-B51A-1A666AA43428}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Method Lifecycle Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;/* @Status tested successfully&#xA; * An example of working with methods.&#xA; *&#xA; * NOTE: Requires an element to be selected in the Project Browser&#xA; *&#xA; * Related APIs&#xA; * =================================================================================&#xA; * Method API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/method.html&#xA; */&#xA;function ManageMethodsExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	// Get the currently selected element in the tree to work on&#xA;	var theElement as EA.Element;&#xA;	theElement = Repository.GetTreeSelectedObject();&#xA;	&#xA;	if ( theElement != null &amp;&amp; theElement.ObjectType == otElement )&#xA;	{&#xA;		var addedMethodID = 0;&#xA;&#xA;		Session.Output( &quot;JavaScript METHOD LIFE CYCLE EXAMPLE&quot; );&#xA;		Session.Output( &quot;=======================================&quot; );&#xA;		Session.Output( &quot;Working on element '&quot; + theElement.Name + &quot;' (Type=&quot; + theElement.Type +&#xA;			&quot;, ID=&quot; + theElement.ElementID + &quot;)&quot; );&#xA;		&#xA;		// ==================================================&#xA;		// ADD A METHOD&#xA;		// ==================================================&#xA;		// Create a method to work on&#xA;		var methods as EA.Collection;&#xA;		methods = theElement.Methods;&#xA;		&#xA;		var newMethod as EA.Method;&#xA;		newMethod = methods.AddNew( &quot;TestMethod&quot;, &quot;bool&quot; );&#xA;		newMethod.Update();&#xA;		methods.Refresh();&#xA;		&#xA;		addedMethodID = newMethod.MethodID;&#xA;		&#xA;		Session.Output( &quot;Added method: &quot; + newMethod.Name +&#xA;			&quot;(ID=&quot; + addedMethodID + &quot;)&quot; );&#xA;			&#xA;		// ==================================================&#xA;		// MANAGE METHOD PRECONDITIONS&#xA;		// ==================================================&#xA;		// Add a PreCondition&#xA;		var preConditions as EA.Collection;&#xA;		preConditions = newMethod.PreConditions;&#xA;		&#xA;		var newPreCondition as EA.MethodConstraint;&#xA;		newPreCondition = preConditions.AddNew( &quot;TestPreCondition&quot;, &quot;Precision&quot; );&#xA;		newPreCondition.Update();&#xA;		preConditions.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added PreCondition: &quot; + newPreCondition.Name );&#xA;		&#xA;		newPreCondition = null;&#xA;		&#xA;		// Search the collection for the added PreCondition and delete it&#xA;		for ( var i = 0 ; i &lt; preConditions.Count ; i++ )&#xA;		{&#xA;			var currentPreCondition as EA.MethodConstraint;&#xA;			currentPreCondition = preConditions.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;PreCondition: &quot; + currentPreCondition.Name );&#xA;			&#xA;			// Delete the PreCondition we just added&#xA;			if ( currentPreCondition.Name == &quot;TestPreCondition&quot; )&#xA;			{&#xA;				preConditions.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted PreCondition: &quot; + currentPreCondition.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		preConditions = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE METHOD POSTCONDITIONS&#xA;		// ==================================================&#xA;		// Add a PostCondition&#xA;		var postConditions as EA.Collection;&#xA;		postConditions = newMethod.PostConditions;&#xA;		&#xA;		var newPostCondition as EA.MethodConstraint;&#xA;		newPostCondition = postConditions.AddNew( &quot;TestPostCondition&quot;, &quot;Precision&quot; );&#xA;		newPostCondition.Update();&#xA;		postConditions.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added PostCondition: &quot; + newPostCondition.Name );&#xA;		&#xA;		newPostCondition = null;&#xA;		&#xA;		// Search the collection for the added PostCondition and delete it&#xA;		for ( var i = 0 ; i &lt; postConditions.Count ; i++ )&#xA;		{&#xA;			var currentPostCondition as EA.MethodConstraint;&#xA;			currentPostCondition = postConditions.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;PostCondition: &quot; + currentPostCondition.Name );&#xA;			&#xA;			// Delete the PostCondition we just added&#xA;			if ( currentPostCondition.Name == &quot;TestPostCondition&quot; )&#xA;			{&#xA;				postConditions.DeleteAt( i, true );&#xA;				Session.Output( &quot;Deleted PostCondition: &quot; + currentPostCondition.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		postConditions = null;&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE METHOD TAGGED VALUES&#xA;		// ==================================================&#xA;		// Add a method tag&#xA;		var tags as EA.Collection;&#xA;		tags = newMethod.TaggedValues;&#xA;		&#xA;		var newTag as EA.MethodTag;&#xA;		newTag = tags.AddNew( &quot;MyMethodTag&quot;, &quot;Number&quot; );&#xA;		newTag.Update();&#xA;		tags.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added tag: &quot; + newTag.Name + &quot; (ID=&quot; + newTag.TagID + &quot;)&quot; );&#xA;		&#xA;		newTag = null;&#xA;		&#xA;		// Search the tag collection for the added tag and delete it&#xA;		for ( var i = 0 ; i &lt; tags.Count ; i++ )&#xA;		{&#xA;			var currentTag as EA.MethodTag;&#xA;			currentTag = tags.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Method Tag: &quot; + currentTag.Name );&#xA;			&#xA;			// Delete the tag we just added&#xA;			if ( currentTag.Name == &quot;MyMethodTag&quot; )&#xA;			{&#xA;				tags.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Tag: &quot; + currentTag.Name + &#xA;					&quot; (ID=&quot; + currentTag.TagID + &quot;)&quot; );&#xA;			}&#xA;		}&#xA;		&#xA;		tags = null;			&#xA;		&#xA;		// ==================================================&#xA;		// MANAGE METHOD PARAMETERS&#xA;		// ==================================================&#xA;		// Add a method parameter&#xA;		var parameters as EA.Collection;&#xA;		parameters = newMethod.Parameters;&#xA;		&#xA;		var newParameter as EA.Parameter;&#xA;		newParameter = parameters.AddNew( &quot;sName&quot;, &quot;String&quot; );&#xA;		newParameter.Update();&#xA;		parameters.Refresh();&#xA;		&#xA;		Session.Output( &quot;Added parameter: &quot; + newParameter.Name );&#xA;		&#xA;		newParameter = null;&#xA;		&#xA;		// Search the parameter collection for the added parameter and delete it&#xA;		for ( var i = 0 ; i &lt; parameters.Count ; i++ )&#xA;		{&#xA;			var currentParameter as EA.MethodTag;&#xA;			currentParameter = parameters.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Method Parameter: &quot; + currentParameter.Name );&#xA;			&#xA;			// Delete the parameter we just added&#xA;			if ( currentParameter.Name == &quot;sName&quot; )&#xA;			{&#xA;				parameters.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Parameter: &quot; + currentParameter.Name );&#xA;			}&#xA;		}&#xA;		&#xA;		parameters = null;&#xA;		&#xA;		// ==================================================&#xA;		// LIST AND DELETE METHODS&#xA;		// ==================================================&#xA;		newMethod = null;&#xA;		&#xA;		// List methods&#xA;		for ( var i = 0 ; i &lt; methods.Count ; i++ )&#xA;		{&#xA;			var currentMethod as EA.Method;&#xA;			currentMethod = methods.GetAt( i );&#xA;			&#xA;			Session.Output( &quot;Method: &quot; + currentMethod.Name );&#xA;			&#xA;			// Delete the method we added&#xA;			if ( currentMethod.MethodID == addedMethodID )&#xA;			{&#xA;				methods.DeleteAt( i, false );&#xA;				Session.Output( &quot;Deleted Method: &quot; + currentMethod.Name +&#xA;					&quot; (ID=&quot; + currentMethod.MethodID + &quot;)&quot; );&#xA;			}&#xA;		}&#xA;		&#xA;		methods = null;&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in the tree, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires an element be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select an element in the Project Browser and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;ManageMethodsExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="31"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{7AEA570E-DE40-4044-BA2E-EEE4A7CA72C3}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Model Search Attributes Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;/* @Status Unknown.&#xA; * Example of how to utilise the search window from scripts&#xA; * &#xA; * NOTE: Requires an element to be selected in context&#xA; *&#xA; * Related APIs&#xA; * =================================================================================&#xA; * Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/repository3.html&#xA; * Attribute API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/attribute.html&#xA; * Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/element2.html&#xA; */&#xA;&#xA;// The columns that will apear in the Model Search window&#xA;var SEARCH_SPECIFICATION = &quot;&lt;ReportViewData&gt;&quot; +&#xA;							&quot;&lt;Fields&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;CLASSGUID\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;CLASSTYPE\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Name\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Scope\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Stereotype\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Type\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Note\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Element\&quot; /&gt;&quot; +&#xA;							&quot;&lt;/Fields&gt;&quot; +&#xA;							&quot;&lt;Rows/&gt;&quot; +&#xA;							&quot;&lt;/ReportViewData&gt;&quot;;&#xA;&#xA;function CreateXMLObject()&#xA;{&#xA;	var xmlDOM;&#xA;	try&#xA;	{&#xA;	       xmlDOM = new COMXObject( &quot;MSXML2.DOMDocument.4.0&quot; );&#xA;	}&#xA;	catch(e)&#xA;	{&#xA;	       xmlDOM = new COMObject( &quot;MSXML2.DOMDocument.6.0&quot; );&#xA;	}&#xA;	&#xA;	xmlDOM.validateOnParse = false;&#xA;	xmlDOM.async = false;&#xA;	&#xA;	return xmlDOM;&#xA;}							&#xA;/*&#xA; * Finds all Attributes and inherited Attributes of the selected context element.&#xA; * The results are added to an XML document and passed back to the Model Search window to display &#xA; * the results.&#xA; */ &#xA;function RunModelSearchExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JScript RUN MODEL SEARCH EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Create a DOM object to represent the search tree&#xA;	var xmlDOM = CreateXMLObject();&#xA;	&#xA;	// If an element is selected in context, get its Attributes, including any inherited &#xA;	// Attributes&#xA;	var selectedObject as EA.Element;&#xA;	selectedObject = Repository.GetContextObject();&#xA;	&#xA;	if( selectedObject != null &amp;&amp; selectedObject.ObjectType == otElement )&#xA;	{&#xA;		Session.Output( &quot;Working on element '&quot; + selectedObject.Name + &quot;' (Type=&quot; + &#xA;			selectedObject.Type + &quot;, ID=&quot; + selectedObject.ElementID + &quot;)&quot; );&#xA;		&#xA;		// Retrieve all attributes and inherited attributes for this object&#xA;		var attributesCollection as EA.Collection;&#xA;		attributesCollection = selectedObject.AttributesEx;&#xA;		&#xA;		// Load the search template&#xA;		if( xmlDOM.loadXML(SEARCH_SPECIFICATION) )&#xA;		{&#xA;			var node = xmlDOM.selectSingleNode( &quot;//ReportViewData//Rows&quot; );&#xA;			&#xA;			if( attributesCollection.Count &gt; 0 )&#xA;			{&#xA;				var objectIDs = &quot;&quot;;&#xA;				&#xA;				// Get the Object IDs for all elements that declare attributes in the inheritance&#xA;				// hierarchy of the selected object&#xA;				objectIDs = GetObjectIDs( attributesCollection );&#xA;				&#xA;				if( objectIDs != &quot;&quot; )&#xA;				{	&#xA;					// Now we have the IDs of all elements in the hierarchy, get the actual elements&#xA;					// themselves&#xA;					var elementCollection as EA.Collection;&#xA;					elementCollection = GetElementSet( objectIDs, 0 );&#xA;					&#xA;					// For each Attribute extract the information to populate our XML document, this &#xA;					// will make up the row data in the Model Search window&#xA;					var lastID = selectedObject.ElementID;&#xA;					var elementName = selectedObject.Name;&#xA;					&#xA;					for( var i = 0; i &lt; attributesCollection.Count; i++ )&#xA;					{&#xA;						var attribute as EA.Attribute;&#xA;						attribute = attributesCollection.GetAt( i );&#xA;						&#xA;						if( attribute == null )&#xA;							continue;&#xA;												&#xA;						// If the attribute belongs to the selected Element use its name, other wise&#xA;						// get the name of the Element for the inherited attribute.&#xA;						if(lastID != attribute.ParentID)&#xA;						{&#xA;							elementName = GetOwningElementName( elementCollection, attribute );&#xA;							lastID = attribute.ParentID ;&#xA;						}&#xA;						&#xA;						// Add this element to the XML tree&#xA;						AddRow( xmlDOM, node, elementName, attribute );&#xA;					}&#xA;				}&#xA;				else&#xA;				{					&#xA;					Session.Output( &quot;Error constructing Object ID list&quot; );&#xA;				}&#xA;			}&#xA;			&#xA;			// Fill the Model Search window with the results&#xA;			Repository.RunModelSearch( &quot;&quot;, &quot;&quot;, &quot;&quot;, xmlDOM.xml );&#xA;		}&#xA;		else&#xA;		{&#xA;			Session.Prompt( &quot;Failed to load search xml&quot;, promptOK );&#xA;		}&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;		&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in context, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires the current context item to be an element.\n&quot; +&#xA;			&quot;Please select an element and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;/*&#xA; * Trims any of the set of characters given in 'chars' from the end of the string 'str'&#xA; */&#xA;function RTrim(str, chars)&#xA;{&#xA;	chars = chars || &quot;\\s&quot;;&#xA;	return str.replace(new RegExp(&quot;[&quot; + chars + &quot;]+$&quot;, &quot;g&quot;), &quot;&quot;);&#xA;}&#xA;&#xA;/*&#xA; * Adds an entry for the attribute object 'theAttribute' to the xml row node 'rowsNode'&#xA; */&#xA;function AddRow( xmlDOM, rowsNode, elementName, theAttribute )&#xA;{&#xA;	// Cast theAttribute for intellisense&#xA;	var attribute as EA.Attribute;&#xA;	attribute = theAttribute;&#xA;&#xA;	// Create a Row node&#xA;	var row = xmlDOM.createElement( &quot;Row&quot; );&#xA;	&#xA;	// Add the Model Search row data to our DOM&#xA;	AddField( xmlDOM, row, &quot;CLASSGUID&quot;, attribute.AttributeGUID );&#xA;	AddField( xmlDOM, row, &quot;CLASSTYPE&quot;, &quot;Attribute&quot; );&#xA;	AddField( xmlDOM, row, &quot;Name&quot;, attribute.Name );&#xA;	AddField( xmlDOM, row, &quot;Scope&quot;, attribute.Visibility );&#xA;	AddField( xmlDOM, row, &quot;Stereotype&quot;, attribute.Stereotype );&#xA;	AddField( xmlDOM, row, &quot;Type&quot;, attribute.Type );&#xA;	AddField( xmlDOM, row, &quot;Note&quot;, attribute.Notes );&#xA;	AddField( xmlDOM, row, &quot;Element&quot;, elementName );&#xA;	&#xA;	// Append the newly created row node to the rows node&#xA;	rowsNode.appendChild( row );&#xA;}&#xA;&#xA;/*&#xA; * Adds an Element to our DOM called Field which makes up the Row data for the Model Search window.&#xA; * &lt;Field name &quot;&quot; value &quot;&quot;/&gt;&#xA; */&#xA;function AddField( xmlDOM, row, name, value )&#xA;{&#xA;	var fieldNode = xmlDOM.createElement( &quot;Field&quot; );&#xA;	&#xA;	// Create first attribute for the name&#xA;	var nameAttribute = xmlDOM.createAttribute( &quot;name&quot; );&#xA;	nameAttribute.value = name;&#xA;	fieldNode.attributes.setNamedItem( nameAttribute );&#xA;	&#xA;	// Create second attribute for the value&#xA;	var valueAttribute = xmlDOM.createAttribute( &quot;value&quot; );&#xA;	valueAttribute.value = value;&#xA;	fieldNode.attributes.setNamedItem( valueAttribute );&#xA;	&#xA;	// Append the fieldNode&#xA;	row.appendChild( fieldNode );&#xA;}&#xA;&#xA;/*&#xA; * Returns the name of the element in 'theElementCollection' that declares the attribute 'theAttribute'&#xA; */&#xA;function GetOwningElementName( theElementCollection, theAttribute )&#xA;{&#xA;	// Cast theAttribute to get intellisense&#xA;	var currentAttribute as EA.Attribute;&#xA;	currentAttribute = theAttribute;&#xA;	&#xA;	// Cast elementCollection to get intellisense&#xA;	var elementCollection as EA.Collection;&#xA;	elementCollection = theElementCollection;&#xA;	&#xA;	var elementName = &quot;&quot;;&#xA;	&#xA;	// Iterate through elements in the elementCollection to find the declaring element&#xA;	for( var i = 0; i &lt; elementCollection.Count; i++ )&#xA;	{&#xA;		// Get the current element&#xA;		var element as EA.Element;&#xA;		element = elementCollection.GetAt( i );&#xA;		&#xA;		// Is this element the declaring element?&#xA;		if( element != null &amp;&amp; element.ElementID == currentAttribute.ParentID )&#xA;		{&#xA;			// If it is then set the elementName variable appropriately&#xA;			elementName = element.Name;&#xA;			break;&#xA;		}&#xA;	}	&#xA;	&#xA;	return elementName;&#xA;}&#xA;&#xA;/*&#xA; * Returns the signature of the provided attribute object 'theAttribute'. The signature is returned as a&#xA; * comma separated list of parameter types&#xA; */&#xA;function BuildAttributeSignature( theAttribute )&#xA;{&#xA;	// Cast theAttribute for intellisense&#xA;	var currentAttribute as EA.Attribute;&#xA;	currentAttribute = theAttribute;&#xA;	&#xA;	// Get a list of all parameters for the attribute&#xA;	var parameterCollection as EA.Collection;&#xA;	parameterCollection = currentAttribute.Parameters;&#xA;&#xA;	var attributeSignature = &quot;&quot;;&#xA;	&#xA;	//Construct the signature of the Attribute&#xA;	for( var i = 0; i &lt; parameterCollection.Count; i++)&#xA;	{&#xA;		var currentParameter as EA.Parameter;&#xA;		currentParameter = parameterCollection.GetAt( i );&#xA;		&#xA;		if( currentParameter != null )&#xA;		{&#xA;			// Add the currentParameter's type to the attributeSignature string&#xA;			attributeSignature = attributeSignature + currentParameter.Type + &quot;, &quot;;&#xA;		}&#xA;	}&#xA;	&#xA;	// Trim the trailing comma from the signature&#xA;	attributeSignature = RTrim( attributeSignature, &quot;, &quot; );&#xA;	&#xA;	return attributeSignature;&#xA;}&#xA;&#xA;/*&#xA; * Returns a unique comma seperated string of Element IDs for every Attribute and inherited Attribute of&#xA; * the selected Class in the Project Browser&#xA; */&#xA;function GetObjectIDs( attributesCollection )&#xA;{&#xA;	// Cast attributesCollection for intellisense&#xA;	var theAttributesCollection as EA.Collection;&#xA;	theAttributesCollection = attributesCollection;&#xA;	&#xA;	var objectIDs = &quot;&quot;;&#xA;	var lastID = 0;&#xA;	&#xA;	// Iterate through all attributes and add their parent ID to the objectIDs list&#xA;	for( var i = 0; i &lt; theAttributesCollection.Count; i++ )&#xA;	{&#xA;		var attribute = theAttributesCollection.GetAt( i );&#xA;&#xA;		// Only record each objectID once&#xA;		if( lastID != attribute.ParentID )&#xA;		{&#xA;			objectIDs = objectIDs + attribute.ParentID + &quot;,&quot;;&#xA;			lastID = attribute.ParentID;&#xA;		}&#xA;	}&#xA;	&#xA;	// Trim the trailing comma from the objectIDs list&#xA;	objectIDs = RTrim( objectIDs, &quot;,&quot; );&#xA;	&#xA;	return objectIDs;&#xA;}&#xA;&#xA;RunModelSearchExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="32"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{0FF9F545-5B23-43aa-91C2-55686164611E}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Model Search Operations Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;/*@Status Tested successfully&#xA; * Example of how to utilise the search window from scripts&#xA; * &#xA; * NOTE: Requires an element to be selected in context&#xA; *&#xA; * Related APIs&#xA; * =================================================================================&#xA; * Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/repository3.html&#xA; * Method API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/method.html &#xA; * Element API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/element2.html&#xA; */&#xA;&#xA;// The columns that will appear in the Model Search window&#xA;var SEARCH_SPECIFICATION = &quot;&lt;ReportViewData&gt;&quot; +&#xA;							&quot;&lt;Fields&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;CLASSGUID\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;CLASSTYPE\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Abstract\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Name\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Parameters\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Scope\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Stereotype\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;ReturnType\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Note\&quot; /&gt;&quot; +&#xA;							&quot;&lt;Field name=\&quot;Element\&quot; /&gt;&quot; +&#xA;							&quot;&lt;/Fields&gt;&quot; +&#xA;							&quot;&lt;Rows/&gt;&quot; +&#xA;							&quot;&lt;/ReportViewData&gt;&quot;;&#xA;&#xA;function CreateXMLObject()&#xA;{&#xA;	var xmlDOM;&#xA;	try&#xA;	{&#xA;	       xmlDOM = new COMObject( &quot;MSXML2.DOMDocument.4.0&quot; );&#xA;	}&#xA;	catch(e)&#xA;	{&#xA;	       xmlDOM = new COMXObject( &quot;MSXML2.DOMDocument.6.0&quot; );&#xA;	}&#xA;	&#xA;	xmlDOM.validateOnParse = false;&#xA;	xmlDOM.async = false;&#xA;	&#xA;	return xmlDOM;&#xA;}&#xA;&#xA;/*&#xA; * Finds all Methods and inherited Methods of the selected context element.&#xA; * The results are added to an XML document and passed back to the Model Search window to display &#xA; * the results.&#xA; */ &#xA;function RunModelSearchExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;	&#xA;	Session.Output( &quot;JScript RUN MODEL SEARCH EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Create a DOM object to represent the search tree&#xA;	var xmlDOM = CreateXMLObject();&#xA;	&#xA;	// If an element is selected in context, get its Methods, including any inherited &#xA;	// Methods&#xA;	var selectedObject as EA.Element;&#xA;	selectedObject = Repository.GetContextObject();&#xA;	&#xA;	if( selectedObject != null &amp;&amp; selectedObject.ObjectType == otElement )&#xA;	{&#xA;		Session.Output( &quot;Working on element '&quot; + selectedObject.Name + &quot;' (Type=&quot; + &#xA;			selectedObject.Type + &quot;, ID=&quot; + selectedObject.ElementID + &quot;)&quot; );&#xA;		&#xA;		// Retrieve all methods and inherited methods for this object&#xA;		var methodsCollection as EA.Collection;&#xA;		methodsCollection = selectedObject.MethodsEx;&#xA;		&#xA;		// Load the search template&#xA;		if( xmlDOM.loadXML(SEARCH_SPECIFICATION) )&#xA;		{&#xA;			var node = xmlDOM.selectSingleNode( &quot;//ReportViewData//Rows&quot; );&#xA;			&#xA;			if( methodsCollection.Count &gt; 0 )&#xA;			{&#xA;				var objectIDs = &quot;&quot;;&#xA;				&#xA;				// Get the Object IDs for all elements that declare methods in the inheritance&#xA;				// hierarchy of the selected object&#xA;				objectIDs = GetObjectIDs( methodsCollection );&#xA;				&#xA;				if( objectIDs != &quot;&quot; )&#xA;				{	&#xA;					// Now we have the IDs of all elements in the hierarchy, get the actual elements&#xA;					// themselves&#xA;					var elementCollection as EA.Collection;&#xA;					elementCollection = GetElementSet( objectIDs, 0 );&#xA;					&#xA;					// For each Method extract the information to populate our XML document, this &#xA;					// will make up the row data in the Model Search window&#xA;					var lastID = selectedObject.ElementID;&#xA;					var elementName = selectedObject.Name;&#xA;					&#xA;					for( var i = 0; i &lt; methodsCollection.Count; i++ )&#xA;					{&#xA;						var method as EA.Method;&#xA;						method = methodsCollection.GetAt( i );&#xA;						&#xA;						if( method == null )&#xA;							continue;&#xA;&#xA;						// Get the method's signature&#xA;						var methodSignature = BuildMethodSignature( method );&#xA;												&#xA;						// If the method belongs to the selected Element use its name, other wise&#xA;						// get the name of the Element for the inherited method.&#xA;						if(lastID != method.ParentID)&#xA;						{&#xA;							elementName = GetOwningElementName( elementCollection, method );&#xA;							lastID = method.ParentID ;&#xA;						}&#xA;						&#xA;						// Add this element to the XML tree&#xA;						AddRow( xmlDOM, node, elementName, method );&#xA;					}&#xA;				}&#xA;				else&#xA;				{					&#xA;					Session.Output( &quot;Error constructing Object ID list&quot; );&#xA;				}&#xA;			}&#xA;			&#xA;			// Fill the Model Search window with the results&#xA;			Repository.RunModelSearch( &quot;&quot;, &quot;&quot;, &quot;&quot;, xmlDOM.xml );&#xA;		}&#xA;		else&#xA;		{&#xA;			Session.Prompt( &quot;Failed to load search xml&quot;, promptOK );&#xA;		}&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;		&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in context, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires the current context item to be an element.\n&quot; +&#xA;			&quot;Please select an element and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;/*&#xA; * Trims any of the set of characters given in 'chars' from the end of the string 'str'&#xA; */&#xA;function RTrim(str, chars)&#xA;{&#xA;	chars = chars || &quot;\\s&quot;;&#xA;	return str.replace(new RegExp(&quot;[&quot; + chars + &quot;]+$&quot;, &quot;g&quot;), &quot;&quot;);&#xA;}&#xA;&#xA;/*&#xA; * Adds an entry for the method object 'theMethod' to the xml row node 'rowsNode'&#xA; */&#xA;function AddRow( xmlDOM, rowsNode, elementName, theMethod )&#xA;{&#xA;	// Cast theMethod for intellisense&#xA;	var method as EA.Method;&#xA;	method = theMethod;&#xA;&#xA;	// Create a Row node&#xA;	var row = xmlDOM.createElement( &quot;Row&quot; );&#xA;	&#xA;	// Add the Model Search row data to our DOM&#xA;	AddField( xmlDOM, row, &quot;CLASSGUID&quot;, method.MethodGUID );&#xA;	AddField( xmlDOM, row, &quot;CLASSTYPE&quot;, &quot;Operation&quot; );&#xA;	AddField( xmlDOM, row, &quot;Abstract&quot;, method.Abstract ? &quot;Abstract&quot; : &quot;Concrete&quot; );&#xA;	AddField( xmlDOM, row, &quot;Name&quot;, method.Name );&#xA;	AddField( xmlDOM, row, &quot;Parameters&quot;, BuildMethodSignature(method) );&#xA;	AddField( xmlDOM, row, &quot;Scope&quot;, method.Visibility );&#xA;	AddField( xmlDOM, row, &quot;Stereotype&quot;, method.Stereotype );&#xA;	AddField( xmlDOM, row, &quot;ReturnType&quot;, method.ReturnType );&#xA;	AddField( xmlDOM, row, &quot;Note&quot;, method.Notes );&#xA;	AddField( xmlDOM, row, &quot;Element&quot;, elementName );&#xA;	&#xA;	// Append the newly created row node to the rows node&#xA;	rowsNode.appendChild( row );&#xA;}&#xA;&#xA;/*&#xA; * Adds an Element to our DOM called Field which makes up the Row data for the Model Search window.&#xA; * &lt;Field name &quot;&quot; value &quot;&quot;/&gt;&#xA; */&#xA;function AddField( xmlDOM, row, name, value )&#xA;{&#xA;	var fieldNode = xmlDOM.createElement( &quot;Field&quot; );&#xA;	&#xA;	// Create first attribute for the name&#xA;	var nameAttribute = xmlDOM.createAttribute( &quot;name&quot; );&#xA;	nameAttribute.value = name;&#xA;	fieldNode.attributes.setNamedItem( nameAttribute );&#xA;	&#xA;	// Create second attribute for the value&#xA;	var valueAttribute = xmlDOM.createAttribute( &quot;value&quot; );&#xA;	valueAttribute.value = value;&#xA;	fieldNode.attributes.setNamedItem( valueAttribute );&#xA;	&#xA;	// Append the fieldNode&#xA;	row.appendChild( fieldNode );&#xA;}&#xA;&#xA;/*&#xA; * Returns the name of the element in 'theElementCollection' that declares the method 'theMethod'&#xA; */&#xA;function GetOwningElementName( theElementCollection, theMethod )&#xA;{&#xA;	// Cast theMethod to get intellisense&#xA;	var currentMethod as EA.Method;&#xA;	currentMethod = theMethod;&#xA;	&#xA;	// Cast elementCollection to get intellisense&#xA;	var elementCollection as EA.Collection;&#xA;	elementCollection = theElementCollection;&#xA;	&#xA;	var elementName = &quot;&quot;;&#xA;	&#xA;	// Iterate through elements in the elementCollection to find the declaring element&#xA;	for( var i = 0; i &lt; elementCollection.Count; i++ )&#xA;	{&#xA;		// Get the current element&#xA;		var element as EA.Element;&#xA;		element = elementCollection.GetAt( i );&#xA;		&#xA;		// Is this element the declaring element?&#xA;		if( element != null &amp;&amp; element.ElementID == currentMethod.ParentID )&#xA;		{&#xA;			// If it is then set the elementName variable appropriately&#xA;			elementName = element.Name;&#xA;			break;&#xA;		}&#xA;	}	&#xA;	&#xA;	return elementName;&#xA;}&#xA;&#xA;/*&#xA; * Returns the signature of the provided method object 'theMethod'. The signature is returned as a&#xA; * comma separated list of parameter types&#xA; */&#xA;function BuildMethodSignature( theMethod )&#xA;{&#xA;	// Cast theMethod for intellisense&#xA;	var currentMethod as EA.Method;&#xA;	currentMethod = theMethod;&#xA;	&#xA;	// Get a list of all parameters for the method&#xA;	var parameterCollection as EA.Collection;&#xA;	parameterCollection = currentMethod.Parameters;&#xA;&#xA;	var methodSignature = &quot;&quot;;&#xA;	&#xA;	//Construct the signature of the Method&#xA;	for( var i = 0; i &lt; parameterCollection.Count; i++)&#xA;	{&#xA;		var currentParameter as EA.Parameter;&#xA;		currentParameter = parameterCollection.GetAt( i );&#xA;		&#xA;		if( currentParameter != null )&#xA;		{&#xA;			// Add the currentParameter's type to the methodSignature string&#xA;			methodSignature = methodSignature + currentParameter.Type + &quot;, &quot;;&#xA;		}&#xA;	}&#xA;	&#xA;	// Trim the trailing comma from the signature&#xA;	methodSignature = RTrim( methodSignature, &quot;, &quot; );&#xA;	&#xA;	return methodSignature;&#xA;}&#xA;&#xA;/*&#xA; * Returns a unique comma seperated string of Element IDs for every Method and inherited Method of&#xA; * the selected Class in the Project Browser&#xA; */&#xA;function GetObjectIDs( methodsCollection )&#xA;{&#xA;	// Cast methodsCollection for intellisense&#xA;	var theMethodsCollection as EA.Collection;&#xA;	theMethodsCollection = methodsCollection;&#xA;	&#xA;	var objectIDs = &quot;&quot;;&#xA;	var lastID = 0;&#xA;	&#xA;	// Iterate through all methods and add their parent ID to the objectIDs list&#xA;	for( var i = 0; i &lt; theMethodsCollection.Count; i++ )&#xA;	{&#xA;		var method = theMethodsCollection.GetAt( i );&#xA;&#xA;		// Only record each objectID once&#xA;		if( lastID != method.ParentID )&#xA;		{&#xA;			objectIDs = objectIDs + method.ParentID + &quot;,&quot;;&#xA;			lastID = method.ParentID;&#xA;		}&#xA;	}&#xA;	&#xA;	// Trim the trailing comma from the objectIDs list&#xA;	objectIDs = RTrim( objectIDs, &quot;,&quot; );&#xA;	&#xA;	return objectIDs;&#xA;}&#xA;&#xA;RunModelSearchExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="33"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{4C242BE1-4C3D-4483-8A32-F16F36D50044}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Non-Recursive Model Dump Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;!INC JavaScriptLib.JavaScript-Enumerator&#xA;// @Status Tested successfully&#xA;// Lists all top level packages and diagrams underneath them in a non-recursive style.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/repository3.html&#xA;//&#xA;function NonRecursiveModelDumpExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript NON RECURSIVE MODEL DUMP EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Get the first model node&#xA;	var theModel as EA.Package;&#xA;	theModel = Repository.Models.GetAt( 0 );&#xA;	&#xA;	// Iterate through all views (top level packages) in the model&#xA;	var viewEnumerator = new Enumerator( theModel.Packages );&#xA;	while ( !viewEnumerator.atEnd() )&#xA;	{&#xA;		var currentView as EA.Package;&#xA;		currentView = viewEnumerator.item();&#xA;		&#xA;		// Add the name of this view to the output window&#xA;		Session.Output( currentView.Name );&#xA;		&#xA;		// Iterate through all diagrams in this view&#xA;		var diagramEnumerator = new Enumerator( currentView.Diagrams );&#xA;		while ( !diagramEnumerator.atEnd() )&#xA;		{&#xA;			var currentDiagram as EA.Diagram;&#xA;			currentDiagram = diagramEnumerator.item();&#xA;			&#xA;			// Add the name of this diagram to the output window&#xA;			Session.Output( &quot;    -&gt; Diagram: &quot; + currentDiagram.Name );&#xA;			&#xA;			// Iterate through all objects in this diagram&#xA;			var diagramObjectEnumerator = new Enumerator( currentDiagram.DiagramObjects );&#xA;			while ( !diagramObjectEnumerator.atEnd() )&#xA;			{&#xA;				var currentDiagramObject as EA.DiagramObject;&#xA;				currentDiagramObject = diagramObjectEnumerator.item();&#xA;				&#xA;				// Get the element that this Diagram Object represents&#xA;				var currentElement as EA.Element;&#xA;				currentElement = Repository.GetElementByID( currentDiagramObject.ElementID );&#xA;				&#xA;				if ( currentElement != null )&#xA;				{&#xA;					// Add the element details to the output window&#xA;					Session.Output( &quot;        -&gt; Element: &quot; + currentElement.Name +&#xA;						&quot; (&quot; + currentElement.Type +&#xA;						&quot;, ID=&quot; + currentElement.ElementID + &quot;)&quot; );&#xA;				}&#xA;				&#xA;				diagramObjectEnumerator.moveNext();&#xA;			}&#xA;			&#xA;			diagramEnumerator.moveNext();&#xA;		}&#xA;		&#xA;		viewEnumerator.moveNext();&#xA;	}&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;NonRecursiveModelDumpExample();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="34"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{37FB900C-2951-4bd1-A43B-237342959382}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Project Browser Multi Selection Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;//@Status Tested Successfully&#xA;// Outputs the details of elements selected in the Project Browser&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/repository3.html&#xA;//&#xA;function MultiSelectionExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript Project Browser Multi Selection Example&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Get the set of selected items as a collection&#xA;	var selectedElements as EA.Collection;&#xA;	selectedElements = Repository.GetTreeSelectedElements();&#xA;	&#xA;	var selectedElementCount = selectedElements.Count;&#xA;	if ( selectedElementCount &gt; 0 )&#xA;	{&#xA;		// Iterate over all of the selected elements&#xA;		for ( var i = 0 ; i &lt; selectedElementCount ; i++ )&#xA;		{&#xA;			var theElement as EA.Element;&#xA;			theElement = selectedElements.GetAt( i );&#xA;			&#xA;			// Output the details of the current selected element&#xA;			var message = &quot;Element Name: &quot; + theElement.Name;&#xA;			message += &quot;\nGUID: &quot; + theElement.ElementGUID;&#xA;			message += &quot;\nType: &quot; + theElement.Type;&#xA;			message += &quot;\nStereotype: &quot; + theElement.StereotypeEx;&#xA;			message += &quot;\nID: &quot; + theElement.ElementID;&#xA;			message += &quot;\n\n&quot;;&#xA;			Session.Output( message );&#xA;		}&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		// No item selected in the tree, or the item selected was not an element&#xA;		Session.Prompt( &quot;This script requires one or more  elements to be selected in the Project Browser.\n&quot; +&#xA;			&quot;Please select a range of elements in the Project Browser and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;MultiSelectionExample();&#xA;&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="35"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2DC9A50F-ACA0-4b80-A4F2-B6FAECA324BE}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Project Interface Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;!INC JavaScriptLib.JavaScript-Enumerator&#xA;// Examples of how to access and use the Project Interface.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Project Interface API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/project_2.html&#xA;//&#xA;&#xA;// Global reference to the project interface&#xA;var projectInterface as EA.Project&#xA;&#xA;function ProjectInterfaceExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript PROJECT INTERFACE EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	projectInterface = Repository.GetProjectInterface();&#xA;	&#xA;	// Iterate through all model nodes&#xA;	var modelEnumerator = new Enumerator( Repository.Models );&#xA;	while ( !modelEnumerator.atEnd() )&#xA;	{&#xA;		var currentModel as EA.Package;&#xA;		currentModel = modelEnumerator.item();&#xA;		&#xA;		// Iterate through all child packages and save out their diagrams&#xA;		var childPackageEnumerator = new Enumerator( currentModel.Packages );&#xA;		while ( !childPackageEnumerator.atEnd() )&#xA;		{&#xA;			var childPackage = childPackageEnumerator.item();&#xA;			DumpDiagrams( childPackage );&#xA;			&#xA;			childPackageEnumerator.moveNext();&#xA;		}&#xA;		&#xA;		modelEnumerator.moveNext();&#xA;	}&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;}&#xA;&#xA;//&#xA;// Recursively saves all diagrams under the provided package and its children&#xA;//&#xA;function DumpDiagrams( thePackage )&#xA;{&#xA;	// Cast thePackage to EA.Package so we get intellisense&#xA;	var currentPackage as EA.Package;&#xA;	currentPackage = thePackage;&#xA;	&#xA;	// Iterate through all diagrams in the current package&#xA;	var diagramEnumerator = new Enumerator( currentPackage.Diagrams );&#xA;	while ( !diagramEnumerator.atEnd() )&#xA;	{&#xA;		var currentDiagram as EA.Diagram;&#xA;		currentDiagram = diagramEnumerator.item();&#xA;		&#xA;		// Open the diagram&#xA;		Repository.OpenDiagram( currentDiagram.DiagramID );&#xA;		&#xA;		// Save and close the diagram&#xA;		Session.Output( &quot;Saving &quot; + currentDiagram.Name );&#xA;		projectInterface.SaveDiagramImageToFile( &quot;c:\\temp\\&quot; + currentDiagram.Name + &quot;.emf&quot; );&#xA;		Repository.CloseDiagram( currentDiagram.DiagramID );&#xA;		&#xA;		diagramEnumerator.moveNext();&#xA;	}&#xA;	&#xA;	// Process child packages&#xA;	var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;	while ( !childPackageEnumerator.atEnd() )&#xA;	{&#xA;		var childPackage = childPackageEnumerator.item();&#xA;		DumpDiagrams( childPackage );&#xA;		&#xA;		childPackageEnumerator.moveNext();&#xA;	}	&#xA;}&#xA;&#xA;ProjectInterfaceExample();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="36"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1170E010-369E-437a-9F81-498673A6C407}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Recursive Element Count Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;!INC JavaScriptLib.JavaScript-Enumerator&#xA;&#xA;// @Status Tested Successfully&#xA;// Recursively counts the number of elements in the selected package and its children&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Package API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/package_2.htm&#xA;// Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/12.1/automation_and_scripting/repository3.html&#xA;//&#xA;&#xA;function RecursiveElementCountExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript RECURSIVE ELEMENT COUNT EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; );&#xA;	&#xA;	// Get the package to work on&#xA;	var contextObjectType = Repository.GetContextItemType();&#xA;	&#xA;	if ( contextObjectType == otPackage )&#xA;	{&#xA;		var elementCounter = 0;&#xA;		&#xA;		// Get the context object as a package&#xA;		var contextPackage as EA.Package;&#xA;		contextPackage = Repository.GetContextObject();&#xA;		&#xA;		// Recursively count the number of elements in the package and its&#xA;		// children&#xA;		elementCounter = CountElements( contextPackage );&#xA;		&#xA;		// Output the results!&#xA;		var message = &quot;Package '&quot; + contextPackage.Name + &quot;' has &quot; + elementCounter +&#xA;			&quot; element(s) under it&quot;;&#xA;		&#xA;		Session.Prompt( message, promptOK );&#xA;		Session.Output( message );&#xA;		&#xA;		Session.Output( &quot;Done!&quot; );&#xA;	}&#xA;	else&#xA;	{&#xA;		Session.Prompt( &quot;This script requires a package to be selected.\n&quot; +&#xA;			&quot;Please select a package and try again.&quot;, promptOK );&#xA;	}&#xA;}&#xA;&#xA;//&#xA;// Counts the number of elements under the provided package and its children&#xA;//&#xA;function CountElements( thePackage )&#xA;{&#xA;	var count = 0;&#xA;	&#xA;	// Cast thePackage to EA.Package so we get intellisense&#xA;	var contextPackage as EA.Package;&#xA;	contextPackage = thePackage;&#xA;	&#xA;	// Iterate through all child packages&#xA;	var childPackageEnumerator = new Enumerator( contextPackage.Packages );&#xA;	while ( !childPackageEnumerator.atEnd() )&#xA;	{&#xA;		var currentPackage as EA.Package;&#xA;		currentPackage = childPackageEnumerator.item();&#xA;		&#xA;		// Recursively process child packages&#xA;		count = count + CountElements( currentPackage );&#xA;		&#xA;		childPackageEnumerator.moveNext();&#xA;	}&#xA;	&#xA;	// Add this package's element count to the counter&#xA;	return count + contextPackage.Elements.Count;&#xA;}&#xA;&#xA;RecursiveElementCountExample();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="37"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{A520C4DE-2F19-4d8a-A129-BDEC54659B39}"/>
			<Column name="ScriptAuthor" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;JavaScript-Respository Extras Example&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;&#xA;// @Status Tested Successfully&#xA;// Examples of how to access repository collections for system level information.&#xA;// &#xA;// Related APIs&#xA;// =================================================================================&#xA;// Repository API - http://www.sparxsystems.com/enterprise_architect_user_guide/15.1/automation_and_scripting/repository3.html&#xA;//&#xA;function RepositoryExtrasExample()&#xA;{&#xA;	// Show the script output window&#xA;	Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;	Session.Output( &quot;JavaScript REPOSITORY EXTRAS EXAMPLE&quot; );&#xA;	Session.Output( &quot;=======================================&quot; )	;&#xA;	&#xA;	// ==================================================&#xA;	// MANAGE PROJECT ISSUES&#xA;	// ==================================================&#xA;	// Add a project issue&#xA;	var issues as EA.Collection;&#xA;	issues = Repository.Issues;&#xA;	&#xA;	var newIssue as EA.ProjectIssues;&#xA;	newIssue = issues.AddNew( &quot;Problem&quot;, &quot;Defect&quot; );&#xA;	&#xA;	newIssue.Update();&#xA;	issues.Refresh();&#xA;	&#xA;	var newIssueID = newIssue.IssueID;&#xA;	Session.Output( &quot;Added new Issue: &quot; + newIssue.Name + &quot; (ID=&quot; +&#xA;		newIssueID + &quot;)&quot; );&#xA;	&#xA;	newIssue = null;&#xA;	&#xA;	// List all project issues&#xA;	for ( var i = 0 ; i &lt; issues.Count ; i++ )&#xA;	{&#xA;		var currentIssue as EA.ProjectIssues;&#xA;		currentIssue = issues.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Issue: &quot; + currentIssue.Name );&#xA;		&#xA;		// Delete the project issue that we just added&#xA;		if ( currentIssue.IssueID == newIssueID )&#xA;		{&#xA;			issues.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted issue: &quot; + currentIssue.Name +&#xA;				&quot; (ID=&quot; + currentIssue.IssueID + &quot;)&quot; );&#xA;		}&#xA;	}&#xA;	&#xA;	issues = null;&#xA;	&#xA;	// ==================================================&#xA;	// MANAGE TASKS&#xA;	// ==================================================&#xA;	// Add a task&#xA;	var tasks as EA.Collection;&#xA;	tasks = Repository.Tasks&#xA;	&#xA;	var newTask as EA.Task;&#xA;	newTask = tasks.AddNew( &quot;NewTask&quot;, &quot;Defect&quot; );&#xA;	&#xA;	newTask.Update();&#xA;	tasks.Refresh();&#xA;	&#xA;	var newTaskID = newTask.TaskID;&#xA;	Session.Output( &quot;Added new Task: &quot; + newTask.Name + &quot; (ID=&quot; +&#xA;		newTaskID + &quot;)&quot; );&#xA;	&#xA;	newTask = null;&#xA;	&#xA;	// List all tasks&#xA;	for ( var i = 0 ; i &lt; tasks.Count ; i++ )&#xA;	{&#xA;		var currentTask as EA.Task;&#xA;		currentTask = tasks.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Task: &quot; + currentTask.Name );&#xA;		&#xA;		// Delete the task that we just added&#xA;		if ( currentTask.TaskID == newTaskID )&#xA;		{&#xA;			tasks.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted task: &quot; + currentTask.Name +&#xA;				&quot; (ID=&quot; + currentTask.TaskID + &quot;)&quot; );&#xA;		}&#xA;	}&#xA;	&#xA;	tasks = null;&#xA;	&#xA;	// ==================================================&#xA;	// MANAGE GLOSSARY TERMS&#xA;	// ==================================================&#xA;	// Add a term&#xA;	var terms as EA.Collection;&#xA;	terms = Repository.Terms&#xA;	&#xA;	var newTerm as EA.Term;&#xA;	newTerm = terms.AddNew( &quot;NewTerm&quot;, &quot;Business&quot; );&#xA;	&#xA;	newTerm.Update();&#xA;	terms.Refresh();&#xA;	&#xA;	var newTermID = newTerm.TermID;&#xA;	Session.Output( &quot;Added new Term: &quot; + newTerm.Term + &quot; (ID=&quot; +&#xA;		newTermID + &quot;)&quot; );&#xA;	&#xA;	newTerm = null;&#xA;	&#xA;	// List all terms&#xA;	for ( var i = 0 ; i &lt; terms.Count ; i++ )&#xA;	{&#xA;		var currentTerm as EA.Term;&#xA;		currentTerm = terms.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Term: &quot; + currentTerm.Term );&#xA;		&#xA;		// Delete the term that we just added&#xA;		if ( currentTerm.TermID == newTermID )&#xA;		{&#xA;			terms.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted term: &quot; + currentTerm.Term +&#xA;				&quot; (ID=&quot; + currentTerm.TermID + &quot;)&quot; );&#xA;		}&#xA;	}&#xA;	&#xA;	terms = null;&#xA;	&#xA;	// ==================================================&#xA;	// MANAGE AUTHORS&#xA;	// ==================================================&#xA;	// Add an author&#xA;	var authors as EA.Collection;&#xA;	authors = Repository.Authors;&#xA;	&#xA;	var newAuthor as EA.Author;&#xA;	newAuthor = authors.AddNew( &quot;Author P. McAuthor&quot;, &quot;Writer&quot; );&#xA;	&#xA;	newAuthor.Update();&#xA;	authors.Refresh();&#xA;	&#xA;	Session.Output( &quot;Added new author: &quot; + newAuthor.Name );&#xA;	&#xA;	newAuthor = null;&#xA;	&#xA;	// List all authors&#xA;	for ( var i = 0 ; i &lt; authors.Count ; i++ )&#xA;	{&#xA;		var currentAuthor as EA.Author;&#xA;		currentAuthor = authors.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Author: &quot; + currentAuthor.Name );&#xA;		&#xA;		// Delete the author that we just added&#xA;		if ( currentAuthor.Name == &quot;Author P. McAuthor&quot; )&#xA;		{&#xA;			authors.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted author: &quot; + currentAuthor.Name );&#xA;		}&#xA;	}&#xA;	&#xA;	authors = null;	&#xA;&#xA;	// ==================================================&#xA;	// MANAGE CLIENTS&#xA;	// ==================================================&#xA;	// Add a Client&#xA;	var clients as EA.Collection;&#xA;	clients = Repository.Clients;&#xA;	&#xA;	var newClient as EA.Client;&#xA;	newClient = clients.AddNew( &quot;Joe Client&quot;, &quot;Client&quot; );&#xA;	&#xA;	newClient.Update();&#xA;	clients.Refresh();&#xA;	&#xA;	Session.Output( &quot;Added new client: &quot; + newClient.Name );&#xA;	&#xA;	newClient = null;&#xA;	&#xA;	// List all clients&#xA;	for ( var i = 0 ; i &lt; clients.Count ; i++ )&#xA;	{&#xA;		var currentClient as EA.Client;&#xA;		currentClient = clients.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Client: &quot; + currentClient.Name );&#xA;		&#xA;		// Delete the client that we just added&#xA;		if ( currentClient.Name == &quot;Joe Client&quot; )&#xA;		{&#xA;			clients.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted client: &quot; + currentClient.Name );&#xA;		}&#xA;	}&#xA;	&#xA;	clients = null;	&#xA;&#xA;	// ==================================================&#xA;	// MANAGE PROJECT RESOURCES&#xA;	// ==================================================&#xA;	// Add a Project Resource&#xA;	var resources as EA.Collection;&#xA;	resources = Repository.Resources;&#xA;	&#xA;	var newResource as EA.Resource;&#xA;	newResource = resources.AddNew( &quot;Senor Resource&quot;, &quot;Resource&quot; );&#xA;	&#xA;	newResource.Update();&#xA;	resources.Refresh();&#xA;	&#xA;	Session.Output( &quot;Added new resource: &quot; + newResource.Name );&#xA;	&#xA;	newResource = null;&#xA;	&#xA;	// List all resources&#xA;	for ( var i = 0 ; i &lt; resources.Count ; i++ )&#xA;	{&#xA;		var currentResource as EA.Resource;&#xA;		currentResource = resources.GetAt( i );&#xA;		&#xA;		Session.Output( &quot;Resource: &quot; + currentResource.Name );&#xA;		&#xA;		// Delete the resource that we just added&#xA;		if ( currentResource.Name == &quot;Senor Resource&quot; )&#xA;		{&#xA;			resources.DeleteAt( i, false );&#xA;			Session.Output( &quot;Deleted resource: &quot; + currentResource.Name );&#xA;		}&#xA;	}&#xA;	&#xA;	resources = null;	&#xA;	&#xA;	Session.Output( &quot;Done!&quot; );&#xA;	&#xA;}&#xA;&#xA;RepositoryExtrasExample();"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="42"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="43"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="44"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="45"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="46"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="47"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="48"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="49"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="50"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="51"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="52"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="53"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="54"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="55"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="56"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="57"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="58"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="59"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="60"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="206"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{9BB70D4F-3874-4116-8185-AB0730F25791}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;EA Script examples ported to JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="JavaScriptExamples"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="207"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="183"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="184"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="185"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="186"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="187"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="188"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="189"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="190"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="191"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="192"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="193"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="194"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="195"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="196"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="197"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="198"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="199"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="200"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="201"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="202"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="203"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="204"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="205"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="209"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{EE63DAA6-AEDE-49b0-B34D-83FBA3A16D7C}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;PROJBROWSER&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="ProjectScripts"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="210"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2FA2C7F9-A7D8-4671-8CDC-A52C2F8AF413}"/>
			<Column name="ScriptAuthor" value="{6F2AAA79-A828-415b-8FCF-6C374FC7F45B}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ConvertTypesAndConnectors&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="!INC JavaScriptLib.JavaScript-EAConstants&#xA;!INC JavaScriptLib.JavaScript-Enumerator&#xA;// Uncomment Conversion needed&#xA;&#xA;// Convert ArchiMate elements and connectors to EA MDG &#xA;//!INC ConversionTables.ConversionTable-ArchiMateToEA&#xA;// OR&#xA;// Convert EA MDG elements and connectors to ArchiMate &#xA;//!INC ConversionTables.ConversionTable-EAToArchiMate&#xA;// OR&#xA;// Convert EA2 MDG elements and connectors to EA8 &#xA;//!INC ConversionTables.ConversionTable-EA2ToEA8&#xA;&#xA;/*&#xA; * Script Name: ConvertTypesAndConnectors&#xA; * Author: Paul Henzell&#xA; * Purpose: Converts types, stereotypes and connectors from one modelling notation to another as defined by ConversionTable &#xA; * Date: 05-01-2022&#xA; */&#xA;&#xA;/*&#xA; * Project Browser Script main function&#xA; */&#xA;function OnProjectBrowserScript()&#xA;{&#xA;	// Get the type of element selected in the Project Browser&#xA;	var treeSelectedType = Repository.GetTreeSelectedItemType();&#xA;	&#xA;	// Handling Code: Uncomment any types you wish this script to support&#xA;	// NOTE: You can toggle comments on multiple lines that are currently&#xA;	// selected with [CTRL]+[SHIFT]+[C].&#xA;	switch ( treeSelectedType )&#xA;	{&#xA;//		case otElement :&#xA;//		{&#xA;//			// Code for when an element is selected&#xA;//			var theElement as EA.Element;&#xA;//			theElement = Repository.GetTreeSelectedObject();&#xA;//						&#xA;//			break;&#xA;//		}&#xA;		case otPackage :&#xA;		{&#xA;			// Code for when a package is selected&#xA;			// Show the script output window&#xA;			Repository.EnsureOutputVisible( &quot;Script&quot; );&#xA;&#xA;			Session.Output( &quot;=======================================&quot; );&#xA;			Session.Output( &quot;STARTING SCRIPT: JavaScript-ConvertTypesAndConnectors&quot; );&#xA;			Session.Output( &quot;=======================================&quot; );&#xA;&#xA;			var thePackage as EA.Package;&#xA;			thePackage = Repository.GetTreeSelectedPackage();&#xA;			&#xA;			if ( thePackage != null &amp;&amp; thePackage.ParentID != 0 )&#xA;			{&#xA;				NavigatePackage( &quot;&quot;, thePackage );&#xA;			}&#xA;			else&#xA;			{&#xA;				Session.Prompt( &quot;This script requires a package to be selected in the Project Browser.\n&quot; +&#xA;					&quot;Please select a package in the Project Browser and try again.&quot;, promptOK );&#xA;			}&#xA;			&#xA;			break;&#xA;		}&#xA;//		case otDiagram :&#xA;//		{&#xA;//			// Code for when a diagram is selected&#xA;//			var theDiagram as EA.Diagram;&#xA;//			theDiagram = Repository.GetTreeSelectedObject();&#xA;//			&#xA;//			break;&#xA;//		}&#xA;//		case otAttribute :&#xA;//		{&#xA;//			// Code for when an attribute is selected&#xA;//			var theAttribute as EA.Attribute;&#xA;//			theAttribute = Repository.GetTreeSelectedObject();&#xA;//			&#xA;//			break;&#xA;//		}&#xA;//		case otMethod :&#xA;//		{&#xA;//			// Code for when a method is selected&#xA;//			var theMethod as EA.Method;&#xA;//			theMethod = Repository.GetTreeSelectedObject();&#xA;//			&#xA;//			break;&#xA;//		}&#xA;		default:&#xA;		{&#xA;			// Error message&#xA;			Session.Prompt( &quot;This script does not support items of this type.&quot;, promptOK );&#xA;		}&#xA;	}&#xA;	&#xA;	Session.Output( &quot;==============&quot; );&#xA;	Session.Output( &quot;SCRIPT COMPLETED!&quot; );			&#xA;	Session.Output( &quot;==============&quot; );&#xA;}&#xA;&#xA;//&#xA;// Outputs the packages name and elements, and then recursively processes any child &#xA;// packages&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function NavigatePackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;    &#xA;    // Add the current package's name to the list&#xA;    Session.Output( indent +  &quot;Navigating through Package Name: &quot; + currentPackage.Name + &quot; (Package ID = &quot; +     currentPackage.PackageID + &quot;)&quot; );&#xA;    &#xA;    // Convert the elements this package contains&#xA;    ConvertElementsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;    ConvertDiagramsInPackage( indent + &quot;    &quot;, currentPackage );&#xA;	&#xA;    // Recursively process any child packages&#xA;    var childPackageEnumerator = new Enumerator( currentPackage.Packages );&#xA;    while (!childPackageEnumerator.atEnd() )&#xA;    {&#xA;        var childPackage as EA.Package;&#xA;        childPackage = childPackageEnumerator.item();&#xA;        NavigatePackage( indent + &quot;    &quot;, childPackage );&#xA;        &#xA;        childPackageEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the elements of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertElementsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;    &#xA;    // Iterate through all elements and convert them&#xA;    var elementEnumerator = new Enumerator( currentPackage.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertElements( indent, theElement )&#xA;{&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    currentElement.ObjectType&#xA;    ConvertElement(indent+&quot;    &quot;,currentElement );&#xA;	ConvertDiagramsInElement( indent + &quot;    &quot;, currentElement );&#xA;&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var elementEnumerator = new Enumerator( currentElement.Elements );&#xA;    while ( !elementEnumerator.atEnd() )&#xA;    {&#xA;        var currentElement as EA.Element;&#xA;        currentElement = elementEnumerator.item();&#xA;        ConvertElements(indent+&quot;    &quot;,currentElement );&#xA;        elementEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the element from Source to Target types&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertElement( indent, theElement )&#xA;{&#xA;// Debug Comment &#xA;    //Session.Output( indent + &quot;CALLED: ConvertElement with &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; elementConversions.length ; i++ )&#xA;    {&#xA;        // If stereotype matches source list then convert&#xA;        if ( (theElement.Stereotype == elementConversions[i].sourceStereotype) &amp;&amp; (theElement.Type == elementConversions[i].sourceType ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED ELEMENT: &quot; + theElement.Name + &quot; (&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+elementConversions[i].targetType+&quot;,&quot;+elementConversions[i].targetStereotype+&quot;)&quot; );&#xA;            //uncomment stuff below to actually do conversion.&#xA;            theElement.Type = elementConversions[i].targetType;&#xA;            //Overwrite the stereotype list to have only one stereotype&#xA;            theElement.StereotypeEx = elementConversions[i].targetStereotype;&#xA;            theElement.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;	ConvertConnectors(indent+&quot;    &quot;,theElement);&#xA;}&#xA;&#xA;// Converts the connectors of an Element&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertConnectors( indent, theElement )&#xA;{&#xA;// Debug Comment &#xA;    //Session.Output( indent + &quot;CALLED: ConvertConnectors with Element &quot; + theElement.Name + &quot; [&quot; + theElement.Type + &quot;, &quot; + theElement.Stereotype + &quot; )&quot; );&#xA;    // Cast theElement to EA.Element so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    // Iterate through all embedded elements and add them to the list&#xA;    var connectorEnumerator = new Enumerator( currentElement.Connectors);&#xA;    while ( !connectorEnumerator.atEnd() )&#xA;    {&#xA;        var currentConnector as EA.Connector;&#xA;        currentConnector = connectorEnumerator.item();&#xA;        ConvertConnector(indent+&quot;    &quot;,currentConnector );&#xA;        connectorEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;// Converts the Connector from Source to Target types&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - theElement The element object to be processed&#xA;function ConvertConnector( indent, theConnector )&#xA;{&#xA;    var currentConnector as EA.Connector;&#xA;    currentConnector = theConnector;&#xA;&#xA;	// Debug Comment &#xA;    //Session.Output( indent + &quot;CALLED: ConvertConnector with Connector &quot; + currentConnector.Name + &quot; (&quot; + currentConnector.Type + &quot;, &quot; + currentConnector.StereotypeEx + &quot; )&quot; );&#xA;&#xA;    for ( var i = 0 ; i &lt; connectorConversions.length ; i++ )&#xA;    {&#xA;        // If stereotype matches source list then convert&#xA;        if ( (currentConnector.Stereotype == connectorConversions[i].sourceStereotype) &amp;&amp; (currentConnector.Type == connectorConversions[i].sourceType ))&#xA;        {&#xA;            Session.Output( indent + &quot;CONVERTED CONNECTOR: &quot; + currentConnector.Name + &quot; (&quot; + currentConnector.Type + &quot;, &quot; + currentConnector.Stereotype + &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+connectorConversions[i].targetType+&quot;,&quot;+connectorConversions[i].targetStereotype+&quot;)&quot; );&#xA;            //uncomment stuff below to actually do conversion.&#xA;            currentConnector.Type = connectorConversions[i].targetType;&#xA;            //Overright the stereotype list to have only one stereotype&#xA;            currentConnector.StereotypeEx = connectorConversions[i].targetStereotype;&#xA;            currentConnector.Update();&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the diagrams of the provided package to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertDiagramsInPackage( indent, thePackage )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentPackage as EA.Package;&#xA;    currentPackage = thePackage;&#xA;    &#xA;    // Iterate through all elements and add them to the list&#xA;    var diagramEnumerator = new Enumerator( currentPackage.Diagrams );&#xA;    while ( !diagramEnumerator.atEnd() )&#xA;    {&#xA;        var currentDiagram as EA.Diagram;&#xA;        currentDiagram = diagramEnumerator.item();&#xA;		ConvertDiagram( indent+&quot;    &quot;, currentDiagram);&#xA;        diagramEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;//&#xA;// Converts the diagrams of the provided element to the Script output window&#xA;//&#xA;// Parameters:&#xA;// - indent A string representing the current level of indentation&#xA;// - thePackage The package object to be processed&#xA;//&#xA;function ConvertDiagramsInElement( indent, theElement )&#xA;{&#xA;    // Cast thePackage to EA.Package so we get intellisense&#xA;    var currentElement as EA.Element;&#xA;    currentElement = theElement;&#xA;    &#xA;    // Iterate through all elements and add them to the list&#xA;    var diagramEnumerator = new Enumerator( currentElement.Diagrams );&#xA;    while ( !diagramEnumerator.atEnd() )&#xA;    {&#xA;        var currentDiagram as EA.Diagram;&#xA;        currentDiagram = diagramEnumerator.item();&#xA;		ConvertDiagram( indent+&quot;    &quot;, currentDiagram);&#xA;        diagramEnumerator.moveNext();&#xA;    }&#xA;}&#xA;&#xA;function ConvertDiagram( indent, theDiagram )&#xA;{&#xA;    var currentDiagram as EA.Diagram;&#xA;	currentDiagram = theDiagram;&#xA;	&#xA;	// Debug Comment &#xA;    //Session.Output( indent + &quot;CALLED: ConvertDiagram with Diagram &quot; + currentDiagram.Name + &quot; (&quot; + currentDiagram.Type + &quot;,&quot; + currentDiagram.MetaType + &quot;)&quot;);&#xA;&#xA;    for ( var i = 0 ; i &lt; diagramConversions.length ; i++ )&#xA;    {&#xA;        // If type matches source list then convert&#xA;        if ( (currentDiagram.Type == diagramConversions[i].sourceType) &amp;&amp; (currentDiagram.MetaType == diagramConversions[i].sourceStereotype) )&#xA;        {&#xA;			&#xA;            Session.Output( indent + &quot;CONVERTED DIAGRAM: &quot; + currentDiagram.Name + &quot; (&quot; + currentDiagram.Type + &quot;, &quot; + currentDiagram.MetaType+ &quot;)&quot; + &quot;=&gt;&quot; +&quot;(&quot;+diagramConversions[i].targetType + &quot;, &quot; + diagramConversions[i].targetStereotype + &quot;)&quot; );&#xA;            //uncomment stuff below to actually do conversion.&#xA;			currentDiagram.Type=diagramConversions[i].targetType&#xA;			// API currentDiagram.StyleEx  didn't appear to work so resorted to SQL &#xA;			// Replace in SQL didn't appear to work as got DAO error saying undefined function Replace&#xA;//			var updateSQL = 'UPDATE t_diagram SET StyleEx = Replace(StyleEx, &quot;MDGDgm='+ diagramConversions[i].sourceStereotype +'&quot;, &quot;MDGDgm='+ diagramConversions[i].targetStereotype+'&quot;) WHERE Diagram_ID ='+currentDiagram.DiagramID;&#xA;			var updateSQL = 'UPDATE t_diagram SET StyleEx = &quot;MDGDgm='+ diagramConversions[i].targetStereotype+'&quot; WHERE Diagram_ID ='+currentDiagram.DiagramID;&#xA;			Session.Output( indent + &quot;SQL = &quot; + updateSQL); &#xA;			Repository.Execute(updateSQL);&#xA;            break; // once found cease iterating through for-loop.&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;OnProjectBrowserScript();&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="211"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="212"/>
			<Column name="ScriptCategory" value="3955A83E-9E54-4810-8053-FACC68CD4782"/>
			<Column name="ScriptName" value="{861EEC3B-1A10-4525-BB87-B28ACCD85864}"/>
			<Column name="Notes" value="&lt;Group Type=&quot;NORMAL&quot; Notes=&quot;&quot;/&gt;"/>
			<Column name="Script" value="ConversionTables"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="213"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{694BBA82-EAEA-4e21-9793-2943A3375569}"/>
			<Column name="ScriptAuthor" value="{861EEC3B-1A10-4525-BB87-B28ACCD85864}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ConversionTable-EA2ToEA8&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="/*&#xA; * Script Name: ConversionTable-EA2ToEA8&#xA; * Author: Paul Henzell&#xA; * Purpose: Array of conversation elements types and stereotypes to convert EA2 to EA8&#xA; */&#xA; &#xA;function TypeConversion(sourceObject,sourceStereotype,targetObject, targetStereotype)&#xA;{&#xA;    this.sourceObject = sourceObject;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetObject = targetObject;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var Conversions = new Array();&#xA;// sourceObject,sourceStereotype,targetObject, targetStereotype&#xA;&#xA;//Element: Application&#xA;Conversions[0] = new TypeConversion(&quot;Component&quot;, &quot;Application&quot;, &quot;Component&quot;, &quot;ApplicationComponent&quot;);&#xA;//Element: ApplicationDataBase&#xA;Conversions[1] = new TypeConversion(&quot;Component&quot;, &quot;ApplicationDataBase&quot;, &quot;Class&quot;, &quot;Artifact&quot;);&#xA;//Element: ArchiMate_Contract&#xA;Conversions[2] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Contract&quot;, &quot;Class&quot;, &quot;BusinessContract&quot;);&#xA;//Element: BusinessCollaboration&#xA;Conversions[3] = new TypeConversion(&quot;Collaboration&quot;, &quot;BusinessCollaboration&quot;, &quot;Class&quot;, &quot;BusinessCollaboration&quot;);&#xA;//Element: BusinessEvent&#xA;Conversions[4] = new TypeConversion(&quot;Event&quot;, &quot;BusinessEvent&quot;, &quot;Activity&quot;, &quot;BusinessEvent&quot;);&#xA;//Element: BusinessProcess&#xA;//Conversions[5] = new TypeConversion(&quot;Activity&quot;, &quot;BusinessProcess&quot;, &quot;Activity&quot;, &quot;Business Process&quot;);&#xA;//Element: BusinessRole&#xA;Conversions[5] = new TypeConversion(&quot;Actor&quot;, &quot;BusinessRole&quot;, &quot;Class&quot;, &quot;BusinessRole&quot;);&#xA;//Element: Constraint&#xA;Conversions[6] = new TypeConversion(&quot;Requirement&quot;, &quot;Constraint&quot;, &quot;Class&quot;, &quot;Constraint&quot;);&#xA;//Element: Device&#xA;Conversions[7] = new TypeConversion(&quot;Device&quot;, &quot;Device&quot;, &quot;Class&quot;, &quot;Device&quot;);&#xA;//Element: Driver&#xA;Conversions[8] = new TypeConversion(&quot;Requirement&quot;, &quot;Driver&quot;, &quot;Class&quot;, &quot;Driver&quot;);&#xA;//Element: Goal&#xA;Conversions[9] = new TypeConversion(&quot;Requirement&quot;, &quot;Goal&quot;, &quot;Class&quot;, &quot;Goal&quot;);&#xA;//Element: InfrastructureService&#xA;Conversions[10] = new TypeConversion(&quot;Class&quot;, &quot;InfrastructureService&quot;, &quot;Activity&quot;, &quot;InfrastructureService&quot;);&#xA;//Element: Network&#xA;Conversions[11] = new TypeConversion(&quot;Node&quot;, &quot;Network&quot;, &quot;Class&quot;, &quot;Network&quot;);&#xA;//Element: Node&#xA;Conversions[12] = new TypeConversion(&quot;Node&quot;, &quot;Node&quot;, &quot;Class&quot;, &quot;Node&quot;);&#xA;//Element: Plateau&#xA;Conversions[13] = new TypeConversion(&quot;Node&quot;, &quot;Plateau&quot;, &quot;Class&quot;, &quot;Plateau&quot;);&#xA;//Element: Principle&#xA;Conversions[14] = new TypeConversion(&quot;Requirement&quot;, &quot;Principle&quot;, &quot;Class&quot;, &quot;Principle&quot;);&#xA;//Element: Programme&#xA;Conversions[15] = new TypeConversion(&quot;Activity&quot;, &quot;Programme&quot;, &quot;Class&quot;, &quot;Programme&quot;);&#xA;//Element: Requirement&#xA;Conversions[16] = new TypeConversion(&quot;Requirement&quot;, &quot;Requirement&quot;, &quot;Class&quot;, &quot;Requirement&quot;);&#xA;//Element: Stakeholder&#xA;Conversions[17] = new TypeConversion(&quot;Actor&quot;, &quot;Stakeholder&quot;, &quot;Class&quot;, &quot;Stakeholder&quot;);&#xA;//Element: SystemSoftware&#xA;Conversions[18] = new TypeConversion(&quot;Node&quot;, &quot;SystemSoftware&quot;, &quot;Class&quot;, &quot;SystemSoftware&quot;);&#xA;//Element: Workpackage&#xA;Conversions[19] = new TypeConversion(&quot;Activity&quot;, &quot;Workpackage&quot;, &quot;Class&quot;, &quot;Workpackage&quot;);&#xA;&#xA;//Connector Conversion Table&#xA;var connectorConversions = new Array();&#xA;&#xA;connectorConversions[0] = new TypeConversion(&quot;Dependency&quot;, &quot;Access&quot;,&quot;Dependency&quot;, &quot;Relationships::Access&quot;);&#xA;connectorConversions[1] = new TypeConversion(&quot;Association&quot;, &quot;Aggregation&quot;,&quot;Association&quot;, &quot;Relationships::Aggregation&quot;);&#xA;connectorConversions[2] = new TypeConversion(&quot;Association&quot;, &quot;Assignment&quot;,&quot;Association&quot;, &quot;Relationships::Assignment&quot;);&#xA;connectorConversions[3] = new TypeConversion(&quot;Dependency&quot;, &quot;Association&quot;,&quot;Association&quot;, &quot;Relationships::Association&quot;);&#xA;connectorConversions[4] = new TypeConversion(&quot;Association&quot;, &quot;Composition&quot;,&quot;Association&quot;, &quot;Relationships::Composition&quot;);&#xA;connectorConversions[5] = new TypeConversion(&quot;Information Flow&quot;, &quot;MessageFlow&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Flow&quot;);&#xA;connectorConversions[6] = new TypeConversion(&quot;ControlFlow&quot;, &quot;Influence&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Influence&quot;);&#xA;connectorConversions[7] = new TypeConversion(&quot;Dependency&quot;, &quot;Realization&quot;,&quot;Dependency&quot;, &quot;Relationships::Realisation&quot;);&#xA;connectorConversions[8] = new TypeConversion(&quot;Association&quot;, &quot;Serving&quot;,&quot;Association&quot;, &quot;Relationships::Serving&quot;);&#xA;connectorConversions[9] = new TypeConversion(&quot;Generalization&quot;, &quot;Specialisation&quot;,&quot;Generalization&quot;, &quot;Relationships::Specialisation&quot;);&#xA;connectorConversions[10] = new TypeConversion(&quot;ControlFlow&quot;, &quot;Triggering&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Triggering&quot;);&#xA;connectorConversions[11] = new TypeConversion(&quot;ControlFlow&quot;, &quot;SequenceFlow&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Triggering&quot;);&#xA;connectorConversions[12] = new TypeConversion(&quot;Dependency&quot;, &quot;DFD_DataFlow&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Flow&quot;);&#xA;&#xA;//Diagram Conversion Table&#xA;var diagramConversions = new Array();&#xA;&#xA;diagramConversions[0] = new TypeConversion(&quot;Logical&quot;, &quot;Business&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Business&quot;);&#xA;diagramConversions[1] = new TypeConversion(&quot;Logical&quot;, &quot;Application&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Application&quot;);&#xA;diagramConversions[2] = new TypeConversion(&quot;Logical&quot;, &quot;Technology&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Technology&quot;);&#xA;diagramConversions[3] = new TypeConversion(&quot;Logical&quot;, &quot;Motivation&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Motivation&quot;);&#xA;diagramConversions[4] = new TypeConversion(&quot;Logical&quot;, &quot;Implementation&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Implementation&quot;);&#xA;&#xA;// THE END&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="214"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="215"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="216"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="217"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{9D896B8D-2691-418a-9D72-E98AC9391F3A}"/>
			<Column name="ScriptAuthor" value="{861EEC3B-1A10-4525-BB87-B28ACCD85864}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ConversionTable-EAToArchiMate&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="/*&#xA; * Script Name: ConversionTable-EAToArchiMate&#xA; * Author: Paul Henzell&#xA; * Purpose: Array of elements types and stereotypes to convert EA 2 ArchiMate&#xA; */&#xA; &#xA;function TypeConversion(sourceType, sourceStereotype, targetType, targetStereotype)&#xA;{&#xA;    this.sourceType = sourceType;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetType = targetType;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var elementConversions = new Array();&#xA;// sourceObject,sourceStereotype,targetObject, targetStereotype&#xA;//Package: EA to ArchiMate Conversion Table&#xA;// EA to ArchiMate Conversion Table&#xA;//Package: ArchiMate Metamodel&#xA;&#xA;//Package: Application&#xA;elementConversions[0] = new TypeConversion( &quot;Class&quot;, &quot;Application Collaboration&quot;, &quot;Class&quot;, &quot;ArchiMate_ApplicationCollaboration&quot;);&#xA;elementConversions[1] = new TypeConversion( &quot;Class&quot;, &quot;Data Object&quot;,&quot;Class&quot;, &quot;ArchiMate_DataObject&quot;);&#xA;elementConversions[2] = new TypeConversion( &quot;Interface&quot;, &quot;Application Interface&quot;,&quot;Interface&quot;, &quot;ArchiMate_ApplicationInterface&quot;);&#xA;elementConversions[3] = new TypeConversion( &quot;Component&quot;, &quot;Application Component&quot;,&quot;Component&quot;, &quot;ArchiMate_ApplicationComponent&quot;);&#xA;elementConversions[4] = new TypeConversion( &quot;Activity&quot;, &quot;Application Event&quot;,&quot;Activity&quot;, &quot;ArchiMate_ApplicationEvent&quot;);&#xA;elementConversions[5] = new TypeConversion( &quot;Activity&quot;, &quot;Application Function&quot;,&quot;Activity&quot;, &quot;ArchiMate_ApplicationFunction&quot;);&#xA;elementConversions[6] = new TypeConversion( &quot;Activity&quot;, &quot;Application Interaction&quot;,&quot;Activity&quot;, &quot;ArchiMate_ApplicationInteraction&quot;);&#xA;elementConversions[7] = new TypeConversion( &quot;Activity&quot;, &quot;Application Process&quot;,&quot;Activity&quot;, &quot;ArchiMate_ApplicationProcess&quot;);&#xA;elementConversions[8] = new TypeConversion( &quot;Activity&quot;, &quot;Application Service&quot;,&quot;Activity&quot;, &quot;ArchiMate_ApplicationService&quot;);&#xA;&#xA;//Package: Business&#xA;elementConversions[9] = new TypeConversion( &quot;Class&quot;, &quot;Business Actor&quot;,&quot;Class&quot;, &quot;ArchiMate_BusinessActor&quot;);&#xA;elementConversions[10] = new TypeConversion( &quot;Class&quot;, &quot;Business Collaboration&quot;,&quot;Class&quot;, &quot;ArchiMate_BusinessCollaboration&quot;);&#xA;elementConversions[11] = new TypeConversion( &quot;Class&quot;, &quot;Business Object&quot;,&quot;Class&quot;, &quot;ArchiMate_BusinessObject&quot;);&#xA;elementConversions[12] = new TypeConversion( &quot;Class&quot;, &quot;Business Role&quot;,&quot;Class&quot;, &quot;ArchiMate_BusinessRole&quot;);&#xA;elementConversions[13] = new TypeConversion( &quot;Class&quot;, &quot;Contract&quot;,&quot;Class&quot;, &quot;ArchiMate_Contract&quot;);&#xA;elementConversions[14] = new TypeConversion( &quot;Class&quot;, &quot;Product&quot;,&quot;Class&quot;, &quot;ArchiMate_Product&quot;);&#xA;elementConversions[15] = new TypeConversion( &quot;Class&quot;, &quot;Representation&quot;,&quot;Class&quot;, &quot;ArchiMate_Representation&quot;);&#xA;elementConversions[16] = new TypeConversion( &quot;Interface&quot;, &quot;Business Interface&quot;,&quot;Interface&quot;, &quot;ArchiMate_BusinessInterface&quot;);&#xA;elementConversions[17] = new TypeConversion( &quot;Activity&quot;, &quot;Business Event&quot;,&quot;Activity&quot;, &quot;ArchiMate_BusinessEvent&quot;);&#xA;elementConversions[18] = new TypeConversion( &quot;Activity&quot;, &quot;Business Function&quot;,&quot;Activity&quot;, &quot;ArchiMate_BusinessFunction&quot;);&#xA;elementConversions[19] = new TypeConversion( &quot;Activity&quot;, &quot;Business Interaction&quot;,&quot;Activity&quot;, &quot;ArchiMate_BusinessInteraction&quot;);&#xA;elementConversions[20] = new TypeConversion( &quot;Activity&quot;, &quot;Business Process&quot;,&quot;Activity&quot;, &quot;ArchiMate_BusinessProcess&quot;);&#xA;elementConversions[21] = new TypeConversion( &quot;Activity&quot;, &quot;Business Service&quot;,&quot;Activity&quot;, &quot;ArchiMate_BusinessService&quot;);&#xA;elementConversions[22] = new TypeConversion( &quot;Decision&quot;, &quot;Junction&quot;,&quot;Decision&quot;, &quot;ArchiMate_Junction&quot;);&#xA;&#xA;//Package: Implementation&#xA;elementConversions[23] = new TypeConversion( &quot;Class&quot;, &quot;Deliverable&quot;,&quot;Class&quot;, &quot;ArchiMate_Deliverable&quot;);&#xA;elementConversions[24] = new TypeConversion( &quot;Class&quot;, &quot;Gap&quot;,&quot;Class&quot;, &quot;ArchiMate_Gap&quot;);&#xA;elementConversions[25] = new TypeConversion( &quot;Class&quot;, &quot;Plateau&quot;,&quot;Class&quot;, &quot;ArchiMate_Plateau&quot;);&#xA;elementConversions[26] = new TypeConversion( &quot;Class&quot;, &quot;WorkPackage&quot;,&quot;Class&quot;, &quot;ArchiMate_WorkPackage&quot;);&#xA;elementConversions[27] = new TypeConversion( &quot;Activity&quot;, &quot;Implementation Event&quot;,&quot;Activity&quot;, &quot;ArchiMate_ImplementationEvent&quot;);&#xA;&#xA;//Package: Motivation&#xA;elementConversions[28] = new TypeConversion( &quot;Class&quot;, &quot;Assessment&quot;,&quot;Class&quot;, &quot;ArchiMate_Assessment&quot;);&#xA;elementConversions[29] = new TypeConversion( &quot;Class&quot;, &quot;Capability&quot;,&quot;Class&quot;, &quot;ArchiMate_Capability&quot;);&#xA;elementConversions[30] = new TypeConversion( &quot;Class&quot;, &quot;Constraint&quot;,&quot;Class&quot;, &quot;ArchiMate_Constraint&quot;);&#xA;elementConversions[31] = new TypeConversion( &quot;Class&quot;, &quot;Course Of Action&quot;,&quot;Class&quot;, &quot;ArchiMate_CourseOfAction&quot;);&#xA;elementConversions[32] = new TypeConversion( &quot;Class&quot;, &quot;Driver&quot;,&quot;Class&quot;, &quot;ArchiMate_Driver&quot;);&#xA;elementConversions[33] = new TypeConversion( &quot;Class&quot;, &quot;Goal&quot;,&quot;Class&quot;, &quot;ArchiMate_Goal&quot;);&#xA;elementConversions[34] = new TypeConversion( &quot;Class&quot;, &quot;Location&quot;,&quot;Class&quot;, &quot;ArchiMate_Location&quot;);&#xA;elementConversions[35] = new TypeConversion( &quot;Class&quot;, &quot;Meaning&quot;,&quot;Class&quot;, &quot;ArchiMate_Meaning&quot;);&#xA;elementConversions[36] = new TypeConversion( &quot;Class&quot;, &quot;Outcome&quot;,&quot;Class&quot;, &quot;ArchiMate_Outcome&quot;);&#xA;elementConversions[37] = new TypeConversion( &quot;Class&quot;, &quot;Principle&quot;,&quot;Class&quot;, &quot;ArchiMate_Principle&quot;);&#xA;elementConversions[38] = new TypeConversion( &quot;Class&quot;, &quot;Requirement&quot;,&quot;Class&quot;, &quot;ArchiMate_Requirement&quot;);&#xA;elementConversions[39] = new TypeConversion( &quot;Class&quot;, &quot;Resource&quot;,&quot;Class&quot;, &quot;ArchiMate_Resource&quot;);&#xA;elementConversions[40] = new TypeConversion( &quot;Class&quot;, &quot;Stakeholder&quot;,&quot;Class&quot;, &quot;ArchiMate_Stakeholder&quot;);&#xA;elementConversions[41] = new TypeConversion( &quot;Class&quot;, &quot;Value&quot;,&quot;Class&quot;, &quot;ArchiMate_Value&quot;);&#xA;elementConversions[42] = new TypeConversion( &quot;Activity&quot;, &quot;Value Stream&quot;,&quot;Activity&quot;, &quot;ArchiMate_ValueStream&quot;);&#xA;&#xA;//Package: Technology&#xA;elementConversions[43] = new TypeConversion( &quot;Class&quot;, &quot;Artifact&quot;,&quot;Class&quot;, &quot;ArchiMate_Artifact&quot;);&#xA;elementConversions[44] = new TypeConversion( &quot;Class&quot;, &quot;Communication Network&quot;,&quot;Class&quot;, &quot;ArchiMate_CommunicationNetwork&quot;);&#xA;elementConversions[45] = new TypeConversion( &quot;Class&quot;, &quot;Device&quot;,&quot;Class&quot;, &quot;ArchiMate_Device&quot;);&#xA;elementConversions[46] = new TypeConversion( &quot;Class&quot;, &quot;Distribution Network&quot;,&quot;Class&quot;, &quot;ArchiMate_DistributionNetwork&quot;);&#xA;elementConversions[47] = new TypeConversion( &quot;Class&quot;, &quot;Equipment&quot;,&quot;Class&quot;, &quot;ArchiMate_Equipment&quot;);&#xA;elementConversions[48] = new TypeConversion( &quot;Class&quot;, &quot;Facility&quot;,&quot;Class&quot;, &quot;ArchiMate_Facility&quot;);&#xA;elementConversions[49] = new TypeConversion( &quot;Class&quot;, &quot;Location&quot;,&quot;Class&quot;, &quot;ArchiMate_Location&quot;);&#xA;elementConversions[50] = new TypeConversion( &quot;Class&quot;, &quot;Material&quot;,&quot;Class&quot;, &quot;ArchiMate_Material&quot;);&#xA;elementConversions[51] = new TypeConversion( &quot;Class&quot;, &quot;Node&quot;,&quot;Class&quot;, &quot;ArchiMate_Node&quot;);&#xA;elementConversions[52] = new TypeConversion( &quot;Class&quot;, &quot;Path&quot;,&quot;Class&quot;, &quot;ArchiMate_Path&quot;);&#xA;elementConversions[53] = new TypeConversion( &quot;Class&quot;, &quot;System Software&quot;,&quot;Class&quot;, &quot;ArchiMate_SystemSoftware&quot;);&#xA;elementConversions[54] = new TypeConversion( &quot;Class&quot;, &quot;Technology Collaboration&quot;,&quot;Class&quot;, &quot;ArchiMate_TechnologyCollaboration&quot;);&#xA;elementConversions[55] = new TypeConversion( &quot;Interface&quot;, &quot;Technology Interface&quot;,&quot;Interface&quot;, &quot;ArchiMate_TechnologyInterface&quot;);&#xA;elementConversions[56] = new TypeConversion( &quot;Activity&quot;, &quot;Technology Event&quot;,&quot;Activity&quot;, &quot;ArchiMate_TechnologyEvent&quot;);&#xA;elementConversions[57] = new TypeConversion( &quot;Activity&quot;, &quot;Technology Function&quot;,&quot;Activity&quot;, &quot;ArchiMate_TechnologyFunction&quot;);&#xA;elementConversions[58] = new TypeConversion( &quot;Activity&quot;, &quot;Technology Interaction&quot;,&quot;Activity&quot;, &quot;ArchiMate_TechnologyInteraction&quot;);&#xA;elementConversions[59] = new TypeConversion( &quot;Activity&quot;, &quot;Technology Process&quot;,&quot;Activity&quot;, &quot;ArchiMate_TechnologyProcess&quot;);&#xA;elementConversions[60] = new TypeConversion( &quot;Activity&quot;, &quot;Technology Service&quot;,&quot;Activity&quot;, &quot;ArchiMate_TechnologyService&quot;);&#xA;&#xA;//Connector Conversion Table&#xA;var connectorConversions = new Array();&#xA;&#xA;connectorConversions[0] = new TypeConversion(&quot;Dependency&quot;, &quot;Access&quot;,&quot;Dependency&quot;, &quot;ArchiMate_Access&quot;);&#xA;connectorConversions[1] = new TypeConversion(&quot;Association&quot;, &quot;Aggregation&quot;,&quot;Association&quot;, &quot;ArchiMate_Aggregation&quot;);&#xA;connectorConversions[2] = new TypeConversion(&quot;Association&quot;, &quot;Assignment&quot;,&quot;Association&quot;, &quot;ArchiMate_Assignment&quot;);&#xA;connectorConversions[3] = new TypeConversion(&quot;Association&quot;, &quot;Association&quot;,&quot;Association&quot;, &quot;ArchiMate_Association&quot;);&#xA;connectorConversions[4] = new TypeConversion(&quot;Association&quot;, &quot;Composition&quot;,&quot;Association&quot;, &quot;ArchiMate_Composition&quot;);&#xA;connectorConversions[5] = new TypeConversion(&quot;ControlFlow&quot;, &quot;Flow&quot;,&quot;ControlFlow&quot;, &quot;ArchiMate_Flow&quot;);&#xA;connectorConversions[6] = new TypeConversion(&quot;ControlFlow&quot;, &quot;Influence&quot;,&quot;ControlFlow&quot;, &quot;ArchiMate_Influence&quot;);&#xA;connectorConversions[7] = new TypeConversion(&quot;Dependency&quot;, &quot;Realisation&quot;,&quot;Dependency&quot;, &quot;ArchiMate_Realization&quot;);&#xA;connectorConversions[8] = new TypeConversion(&quot;Association&quot;, &quot;Serving&quot;,&quot;Association&quot;, &quot;ArchiMate_Serving&quot;);&#xA;connectorConversions[9] = new TypeConversion(&quot;Generalization&quot;, &quot;Specialisation&quot;,&quot;Generalization&quot;, &quot;ArchiMate_Specialisation&quot;);&#xA;connectorConversions[10] = new TypeConversion(&quot;ControlFlow&quot;, &quot;Triggering&quot;,&quot;ControlFlow&quot;, &quot;ArchiMate_Triggering&quot;);&#xA;&#xA;&#xA;//Diagram Conversion Table&#xA;var diagramConversions = new Array();&#xA;&#xA;diagramConversions[0] = new TypeConversion(&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Business&quot;, &quot;Logical&quot;, &quot;Archimate3::Business&quot;);&#xA;diagramConversions[1] = new TypeConversion(&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Application&quot;, &quot;Logical&quot;, &quot;Archimate3::Application&quot;);&#xA;diagramConversions[2] = new TypeConversion(&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Implementation&quot;, &quot;Logical&quot;, &quot;Archimate3::Implementation&quot;);&#xA;diagramConversions[3] = new TypeConversion(&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Motivation&quot;, &quot;Logical&quot;, &quot;Archimate3::Motivation&quot;);&#xA;diagramConversions[4] = new TypeConversion(&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Technology&quot;, &quot;Logical&quot;, &quot;Archimate3::Technology&quot;);&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="218"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{1890A7AF-8630-4d65-A01D-CC4012E5D71F}"/>
			<Column name="ScriptAuthor" value="{861EEC3B-1A10-4525-BB87-B28ACCD85864}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ConversionTable-ArchiMateToEA&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="/*&#xA; * Script Name: ConversionTable-ArchiMateToEA&#xA; * Author: Paul Henzell&#xA; * Purpose: Array of elements types and stereotypes to convert from ArchiMate to EA&#xA; */&#xA; &#xA;function TypeConversion(sourceType,sourceStereotype,targetType, targetStereotype)&#xA;{&#xA;    this.sourceType = sourceType;&#xA;    this.sourceStereotype = sourceStereotype;&#xA;    this.targetType = targetType;&#xA;    this.targetStereotype = targetStereotype;&#xA;}&#xA;&#xA;var elementConversions = new Array();&#xA;// sourceObject,sourceStereotype,targetObject, targetStereotype&#xA;&#xA;//Convert ArhiMate to EA elements&#xA;&#xA;//Package ArchiMate Metamodel&#xA;&#xA;//Application Elements&#xA;elementConversions[0] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_ApplicationCollaboration&quot;, &quot;Class&quot;, &quot;Application::Application Collaboration&quot;); &#xA;elementConversions[1] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_DataObject&quot;, &quot;Class&quot;, &quot;Application::Data Object&quot;); &#xA;elementConversions[2] = new TypeConversion(&quot;Interface&quot;, &quot;ArchiMate_ApplicationInterface&quot;, &quot;Interface&quot;, &quot;Application::Application Interface&quot;); &#xA;elementConversions[3] = new TypeConversion(&quot;Component&quot;, &quot;ArchiMate_ApplicationComponent&quot;, &quot;Component&quot;, &quot;Application::Application Component&quot;); &#xA;elementConversions[4] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ApplicationEvent&quot;, &quot;Activity&quot;, &quot;Application::Application Event&quot;); &#xA;elementConversions[5] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ApplicationFunction&quot;, &quot;Activity&quot;, &quot;Application::Application Function&quot;); &#xA;elementConversions[6] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ApplicationInteraction&quot;, &quot;Activity&quot;, &quot;Application::Application Interaction&quot;); &#xA;elementConversions[7] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ApplicationProcess&quot;, &quot;Activity&quot;, &quot;Application::Application Process&quot;); &#xA;elementConversions[8] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ApplicationService&quot;, &quot;Activity&quot;, &quot;Application::Application Service&quot;); &#xA;&#xA;//Business Elements&#xA;elementConversions[9] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_BusinessActor&quot;, &quot;Class&quot;, &quot;Business::Business Actor&quot;); &#xA;elementConversions[10] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_BusinessCollaboration&quot;, &quot;Class&quot;, &quot;Business::Business Collaboration&quot;); &#xA;elementConversions[11] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_BusinessObject&quot;, &quot;Class&quot;, &quot;Business::Business Object&quot;); &#xA;elementConversions[12] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_BusinessRole&quot;, &quot;Class&quot;, &quot;Business::Business Role&quot;); &#xA;elementConversions[13] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Contract&quot;, &quot;Class&quot;, &quot;Business::Contract&quot;); &#xA;elementConversions[14] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Product&quot;, &quot;Class&quot;, &quot;Business::Product&quot;); &#xA;elementConversions[15] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Representation&quot;, &quot;Class&quot;, &quot;Business::Representation&quot;); &#xA;elementConversions[16] = new TypeConversion(&quot;Interface&quot;, &quot;ArchiMate_BusinessInterface&quot;, &quot;Interface&quot;, &quot;Business::Business Interface&quot;); &#xA;elementConversions[17] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_BusinessEvent&quot;, &quot;Activity&quot;, &quot;Business::Business Event&quot;); &#xA;elementConversions[18] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_BusinessFunction&quot;, &quot;Activity&quot;, &quot;Business::Business Function&quot;); &#xA;elementConversions[19] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_BusinessInteraction&quot;, &quot;Activity&quot;, &quot;Business::Business Interaction&quot;); &#xA;elementConversions[20] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_BusinessProcess&quot;, &quot;Activity&quot;, &quot;Business::Business Process&quot;); &#xA;elementConversions[21] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_BusinessService&quot;, &quot;Activity&quot;, &quot;Business::Business Service&quot;); &#xA;elementConversions[22] = new TypeConversion(&quot;Decision&quot;, &quot;ArchiMate_Junction&quot;, &quot;Decision&quot;, &quot;Relationships::Junction&quot;); &#xA;&#xA;//Implementation Elements&#xA;elementConversions[23] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Deliverable&quot;, &quot;Class&quot;, &quot;Implementation::Deliverable&quot;); &#xA;elementConversions[24] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Gap&quot;, &quot;Class&quot;, &quot;Implementation::Gap&quot;); &#xA;elementConversions[25] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Plateau&quot;, &quot;Class&quot;, &quot;Implementation::Plateau&quot;); &#xA;elementConversions[26] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_WorkPackage&quot;, &quot;Class&quot;, &quot;Implementation::WorkPackage&quot;); &#xA;elementConversions[27] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ImplementationEvent&quot;, &quot;Activity&quot;, &quot;Implementation::Implementation Event&quot;); &#xA;&#xA;//Motivation Elements&#xA;elementConversions[28] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Assessment&quot;, &quot;Class&quot;, &quot;Motivation::Assessment&quot;); &#xA;elementConversions[29] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Capability&quot;, &quot;Class&quot;, &quot;Strategy::Capability&quot;); &#xA;elementConversions[30] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Constraint&quot;, &quot;Class&quot;, &quot;Motivation::Constraint&quot;); &#xA;elementConversions[31] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_CourseOfAction&quot;, &quot;Class&quot;, &quot;Strategy::Course Of Action&quot;); &#xA;elementConversions[32] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Driver&quot;, &quot;Class&quot;, &quot;Motivation::Driver&quot;); &#xA;elementConversions[33] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Goal&quot;, &quot;Class&quot;, &quot;Motivation::Goal&quot;); &#xA;elementConversions[34] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Location&quot;, &quot;Class&quot;, &quot;Common::Location&quot;); &#xA;elementConversions[35] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Meaning&quot;, &quot;Class&quot;, &quot;Motivation::Meaning&quot;); &#xA;elementConversions[36] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Outcome&quot;, &quot;Class&quot;, &quot;Motivation::Outcome&quot;); &#xA;elementConversions[37] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Principle&quot;, &quot;Class&quot;, &quot;Motivation::Principle&quot;); &#xA;elementConversions[38] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Requirement&quot;, &quot;Class&quot;, &quot;Motivation::Requirement&quot;); &#xA;elementConversions[39] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Resource&quot;, &quot;Class&quot;, &quot;Strategy::Resource&quot;); &#xA;elementConversions[40] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Stakeholder&quot;, &quot;Class&quot;, &quot;Motivation::Stakeholder&quot;); &#xA;elementConversions[41] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Value&quot;, &quot;Class&quot;, &quot;Motivation::Value&quot;); &#xA;elementConversions[42] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_ValueStream&quot;, &quot;Activity&quot;, &quot;Business::ValueS tream&quot;); &#xA;&#xA;//Technology Elements&#xA;elementConversions[43] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Artifact&quot;, &quot;Class&quot;, &quot;Technology::Artifact&quot;); &#xA;elementConversions[44] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_CommunicationNetwork&quot;, &quot;Class&quot;, &quot;Technology::Communication Network&quot;); &#xA;elementConversions[45] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Device&quot;, &quot;Class&quot;, &quot;Technology::Device&quot;); &#xA;elementConversions[46] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_DistributionNetwork&quot;, &quot;Class&quot;, &quot;Physical::Distribution Network&quot;); &#xA;elementConversions[47] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Equipment&quot;, &quot;Class&quot;, &quot;Physical::Equipment&quot;); &#xA;elementConversions[48] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Facility&quot;, &quot;Class&quot;, &quot;Physical::Facility&quot;); &#xA;elementConversions[49] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Location&quot;, &quot;Class&quot;, &quot;Common::Location&quot;); &#xA;elementConversions[50] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Material&quot;, &quot;Class&quot;, &quot;Physical::Material&quot;); &#xA;elementConversions[51] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Node&quot;, &quot;Class&quot;, &quot;Technology::Node&quot;); &#xA;elementConversions[52] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_Path&quot;, &quot;Class&quot;, &quot;Relationships::Path&quot;); &#xA;elementConversions[53] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_SystemSoftware&quot;, &quot;Class&quot;, &quot;Technology::System Software&quot;); &#xA;elementConversions[54] = new TypeConversion(&quot;Class&quot;, &quot;ArchiMate_TechnologyCollaboration&quot;, &quot;Class&quot;, &quot;Technology::Technology Collaboration&quot;); &#xA;elementConversions[55] = new TypeConversion(&quot;Interface&quot;, &quot;ArchiMate_TechnologyInterface&quot;, &quot;Interface&quot;, &quot;Technology::Technology Interface&quot;); &#xA;elementConversions[56] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_TechnologyEvent&quot;, &quot;Activity&quot;, &quot;Technology::Technology Event&quot;); &#xA;elementConversions[57] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_TechnologyFunction&quot;, &quot;Activity&quot;, &quot;Technology::Technology Function&quot;); &#xA;elementConversions[58] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_TechnologyInteraction&quot;, &quot;Activity&quot;, &quot;Technology::Technology Interaction&quot;); &#xA;elementConversions[59] = new TypeConversion(&quot;Activity&quot;, &quot;ArchiMate_TechnologyProcess&quot;, &quot;Activity&quot;, &quot;Technology::Technology Process&quot;); &#xA;&#xA;//Connector Conversion Table&#xA;var connectorConversions = new Array();&#xA;&#xA;connectorConversions[0] = new TypeConversion(&quot;Dependency&quot;, &quot;ArchiMate_Access&quot;,&quot;Dependency&quot;, &quot;Relationships::Access&quot;);&#xA;connectorConversions[1] = new TypeConversion(&quot;Association&quot;, &quot;ArchiMate_Aggregation&quot;,&quot;Association&quot;, &quot;Relationships::Aggregation&quot;);&#xA;connectorConversions[2] = new TypeConversion(&quot;Association&quot;, &quot;ArchiMate_Assignment&quot;,&quot;Association&quot;, &quot;Relationships::Assignment&quot;);&#xA;connectorConversions[3] = new TypeConversion(&quot;Association&quot;, &quot;ArchiMate_Association&quot;,&quot;Association&quot;, &quot;Relationships::Association&quot;);&#xA;connectorConversions[4] = new TypeConversion(&quot;Association&quot;, &quot;ArchiMate_Composition&quot;,&quot;Association&quot;, &quot;Relationships::Composition&quot;);&#xA;connectorConversions[5] = new TypeConversion(&quot;ControlFlow&quot;, &quot;ArchiMate_Flow&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Flow&quot;);&#xA;connectorConversions[6] = new TypeConversion(&quot;ControlFlow&quot;, &quot;ArchiMate_Influence&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Influence&quot;);&#xA;connectorConversions[7] = new TypeConversion(&quot;Dependency&quot;, &quot;ArchiMate_Realization&quot;,&quot;Dependency&quot;, &quot;Relationships::Realisation&quot;);&#xA;connectorConversions[8] = new TypeConversion(&quot;Association&quot;, &quot;ArchiMate_Serving&quot;,&quot;Association&quot;, &quot;Relationships::Serving&quot;);&#xA;connectorConversions[9] = new TypeConversion(&quot;Generalization&quot;, &quot;ArchiMate_Specialisation&quot;,&quot;Generalization&quot;, &quot;Relationships::Specialisation&quot;);&#xA;connectorConversions[10] = new TypeConversion(&quot;ControlFlow&quot;, &quot;ArchiMate_Triggering&quot;,&quot;ControlFlow&quot;, &quot;Relationships::Triggering&quot;);&#xA;&#xA;//Diagram Conversion Table&#xA;var diagramConversions = new Array();&#xA;&#xA;diagramConversions[0] = new TypeConversion(&quot;Logical&quot;, &quot;Archimate3::Business&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Business&quot;);&#xA;diagramConversions[1] = new TypeConversion(&quot;Logical&quot;, &quot;Archimate3::Application&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Application&quot;);&#xA;diagramConversions[2] = new TypeConversion(&quot;Logical&quot;, &quot;Archimate3::Technology&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Technology&quot;);&#xA;diagramConversions[3] = new TypeConversion(&quot;Logical&quot;, &quot;Archimate3::Motivation&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Motivation&quot;);&#xA;diagramConversions[4] = new TypeConversion(&quot;Logical&quot;, &quot;Archimate3::Implementation&quot;,&quot;Logical&quot;, &quot;Enterprise Architecture Diagrams::Implementation&quot;);&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="219"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="220"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="221"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="222"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot; standalone=&quot;no&quot; ?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="143"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="144"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="145"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="146"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="147"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="148"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="149"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="150"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="151"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="152"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="153"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="154"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="155"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="156"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="157"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="158"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="159"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="160"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="161"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="162"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="163"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="164"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="165"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="166"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="167"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="169"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="170"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="171"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="172"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="173"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="174"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="175"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="176"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="177"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="178"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="179"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="180"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="181"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="182"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="223"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="224"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="225"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="226"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="227"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="228"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="229"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="230"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="231"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="232"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="233"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="234"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="235"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="236"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="237"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="238"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="239"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="240"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="241"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="242"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="243"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="244"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="245"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="246"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="247"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="248"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="249"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="250"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="251"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="252"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="253"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="254"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="255"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="256"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="257"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="258"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="259"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="260"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="261"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="262"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="263"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="264"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="265"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="266"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="267"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="268"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="269"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="270"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="271"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="272"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="273"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="274"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="275"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="276"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="277"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="278"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="279"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="280"/>
			<Column name="ScriptCategory" value="ScriptDebugging"/>
			<Column name="ScriptName" value="ScriptDebugging"/>
			<Column name="ScriptAuthor" value="ScriptDebugging"/>
			<Column name="Notes" value="&lt;?xml version=&quot;1.0&quot;?&gt;&#xA;&lt;DATA&gt;&lt;Debugger value=&quot;Scripting&quot;/&gt;&lt;/DATA&gt;&#xA;"/>
			<Column name="Script" value=" "/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="281"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{C454DE7C-8F63-434f-BC8C-BA921DD2AF7A}"/>
			<Column name="ScriptAuthor" value="{EE63DAA6-AEDE-49b0-B34D-83FBA3A16D7C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ConvertArchiMateToEA8&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value=" /*&#xA; * Script Name: ConversionArchiMateToEA8&#xA; * Author: Paul Henzell&#xA; * Purpose: Converts types, stereotypes, connectors and diagrams from EA8 modelling notation to ArchiMate 3 as defined by ConversionTable &#xA; * Date: 13-01-2022&#xA; */&#xA;!INC ConversionTables.ConversionTable-ArchiMateToEA&#xA;!INC JavaScriptLib.ConvertTypesAndConnectors&#xA;"/>
		</DataRow>
		<DataRow>
			<Column name="ScriptID" value="282"/>
			<Column name="ScriptCategory" value="605A62F7-BCD0-4845-A8D0-7DC45B4D2E3F"/>
			<Column name="ScriptName" value="{2800BFBD-57E2-459e-990A-FCE7EBCDC9C5}"/>
			<Column name="ScriptAuthor" value="{EE63DAA6-AEDE-49b0-B34D-83FBA3A16D7C}"/>
			<Column name="Notes" value="&lt;Script Name=&quot;ConvertEA8ToArchiMate&quot; Type=&quot;Internal&quot; Language=&quot;JavaScript&quot;/&gt;&#xA;"/>
			<Column name="Script" value="/*&#xA; * Script Name: ConvertEA8ToArchiMate&#xA; * Author: Paul Henzell&#xA; * Purpose: Converts types, stereotypes, connectors and diagrams from EA8 modelling notation to ArchiMate 3 as defined by ConversionTable &#xA; * Date: 13-01-2022&#xA; */&#xA;!INC ConversionTables.ConversionTable-EAToArchiMate&#xA;!INC JavaScriptLib.ConvertTypesAndConnectors&#xA;"/>
		</DataRow>
	</DataSet>
</RefData>
